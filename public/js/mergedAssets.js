require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"app/app":[function(require,module,exports){
module.exports=require('LentoW');
},{}],"LentoW":[function(require,module,exports){
'use strict';

var BaseApp = require('rendr/shared/app');
var handlebarsHelpers = require('./lib/handlebarsHelpers');
var customHandlebarsHelpers = require('./helpers').handlebars;

/**
 * Extend the `BaseApp` class, adding any custom methods or overrides.
 */
module.exports = BaseApp.extend({

    /**
     * Client and server.
     *
     * `initialize` is called on app initialize, both on the client and server.
     * On the server, an app is instantiated once for each request, and in the
     * client, it's instantiated once on page load.
     *
     * This is a good place to initialize any code that needs to be available to
     * app on both client and server.
     */
    initialize: function() {

        /**
         * Register our Handlebars helpers.
         *
         * `this.templateAdapter` is, by default, the `rendr-handlebars` module.
         * It has a `registerHelpers` method, which allows us to register helper
         * modules that can be used on both client & server.
         */
        this.templateAdapter.registerHelpers(handlebarsHelpers);
        this.templateAdapter.registerHelpers(customHandlebarsHelpers);
    },

    /**
    * Client-side only.
    *
    * `start` is called at the bottom of `__layout.hbs`. Calling this kicks off
    * the router and initializes the application.
    *
    * Override this method (remembering to call the superclass' `start` method!)
    * in order to do things like bind events to the router, as shown below.
    */
    start: function() {

        // Show a loading indicator when the app is fetching.
        this.router.on('action:start', function onStart() {
            this.set({
                loading: true
            });
        }, this);
        this.router.on('action:end', function onEnd() {
            this.set({
                loading: false
            });
        }, this);

        // Call 'super'.
        BaseApp.prototype.start.call(this);
    },

    /**
    * Client-side only.
    *
    * This method also exists on shared/app.js, and is called by client/router.
    * Override it here to specify your own app_view object.
    */
    getAppViewClass: function() {
        return require('./views/app_view');
    }

});

},{"./helpers":"xxG+1D","./lib/handlebarsHelpers":"Cu+0Ho","./views/app_view":"5syn3K","rendr/shared/app":170}],"app/collections/base":[function(require,module,exports){
module.exports=require('rCVOCK');
},{}],"rCVOCK":[function(require,module,exports){
'use strict';

var RendrBase = require('rendr/shared/base/collection');

module.exports = RendrBase.extend({});

},{"rendr/shared/base/collection":171}],"OqBiMu":[function(require,module,exports){
'use strict';

var Category = require('../models/category');
var Base = require('./base');

module.exports = Base.extend({
    model: Category,
    url: '/countries/:location/categories'
});

module.exports.id = 'Categories';

},{"../models/category":"1ZHO47","./base":"rCVOCK"}],"app/collections/categories":[function(require,module,exports){
module.exports=require('OqBiMu');
},{}],"app/collections/cities":[function(require,module,exports){
module.exports=require('b9oWHN');
},{}],"b9oWHN":[function(require,module,exports){
'use strict';

var City = require('../models/city');
var Base = require('./base');

module.exports = Base.extend({
    model: City,
    url: '/countries/:location/cities',
    parse: function(response) {
        this.metadata = response.metadata;
        return response.data;
    }
});

module.exports.id = 'Cities';

},{"../models/city":"GoV6d6","./base":"rCVOCK"}],"lrhmoF":[function(require,module,exports){
'use strict';

var Field = require('../models/field');
var Base = require('./base');

module.exports = Base.extend({
    model: Field,
    url: function(){
        var url;
        var params = this.params;
        switch(params.intent){
        case 'post':
            url = '/items/fields?intent=post&location='+params.location+'&categoryId='+params.categoryId+'&languageId='+params.languageId+'&languageCode='+params.languageCode;
        break;
        case 'edit':
            url = '/items/fields?intent=edit&location='+params.location+'&categoryId='+params.categoryId+'&languageId='+params.languageId+'&languageCode='+params.languageCode+'&itemId='+params.itemId;
        break;
        case 'catchange':
            url = '/items/fields?intent=catchange&location='+params.location+'&categoryId='+params.categoryId+'&languageId='+params.languageId+'&languageCode='+params.languageCode+'&itemId='+params.itemId;
        break;
        default:
            url = '/items/fields?intent=edit&location='+params.location+'&categoryId='+params.categoryId+'&languageId='+params.languageId+'&languageCode='+params.languageCode+'&itemId='+params.itemId;
        break;
    }
    return url;
  }
});

module.exports.id = 'Fields';

},{"../models/field":"e/8fLa","./base":"rCVOCK"}],"app/collections/fields":[function(require,module,exports){
module.exports=require('lrhmoF');
},{}],"Ogpeh+":[function(require,module,exports){
'use strict';

var Item = require('../models/item');
var Base = require('./base');
var querystring = require('querystring');

module.exports = Base.extend({
    model: Item,
    url: function() {
        var user = this.app.getSession('user') || {};
        var url;

        switch(this.params.item_type) {
            case 'adsList':
                url = '/items';
            break;
            case 'myAds':
                url = '/users/'+ user.userId +'/items';
            break;
            case 'favorites':
                url = '/users/'+ user.userId +'/favorites';
            break;
            default:
                url = '/items';
            break;
        }
        if (this.params) {
            url += '?';
            for (var param in this.params) {
                url += param + '=:' + param + '&';
            }
            url = url.slice(0, url.length - 1);
        }
        return url;
    }
});

module.exports.id = 'Items';

},{"../models/item":"gcAV3O","./base":"rCVOCK","querystring":133}],"app/collections/items":[function(require,module,exports){
module.exports=require('Ogpeh+');
},{}],"nBeCPh":[function(require,module,exports){
module.exports = {
    //Argentina+
    2 : {
        'siteId'           : 533954,
        'logServer'        : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Aruba+
    12 : {
        'siteId'          : 533955,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Bahamas+
    16 : {
        'siteId'          : 533956,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Belize+
    22 : {
        'siteId'          : 533957,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Bolivia+
    26 : {
        'siteId'          : 533958,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Brazil+
    30 : {
        'siteId'          : 533959,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Canada+
    38 : {
        'siteId'          : 533960,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Chile+
    43 : {
        'siteId'          : 533961,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Colombia+
    47 : {
        'siteId'          : 533962,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Costa Rica+
    51 : {
        'siteId'          : 533933,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Dominica+
    59 : {
        'siteId'          : 533934,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Dominican Republic+
    60 : {
        'siteId'          : 533935,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Ecuador+
    62 : {
        'siteId'          : 533936,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //El Salvador+
    64 : {
        'siteId'          : 533937,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Grenada+
    86 : {
        'siteId'          : 533938,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Guatemala+
    89 : {
        'siteId'          : 533939,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Haiti+
    93 : {
        'siteId'          : 533940,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Honduras+
    95 : {
        'siteId'          : 533941,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Jamaica+
    106 : {
        'siteId'          : 533942,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Mexico+
    138 : {
        'siteId'          : 533943,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Nicaragua+
    154 : {
        'siteId'          : 533944,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Panama+
    164 : {
        'siteId'          : 533945,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Paraguay+
    166 : {
        'siteId'          : 533946,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Peru+
    167 : {
        'siteId'          : 533947,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Puerto Rico+
    172 : {
        'siteId'          : 533948,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Trinidad and Tobago+
    213 : {
        'siteId'          : 533949,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Turks and Caicos Islands+
    217 : {
        'siteId'          : 533950,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //United States+
    1 : {
        'siteId'          : 533951,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Uruguay+
    225 : {
        'siteId'          : 533952,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //Venezuela+
    229 : {
        'siteId'          : 533953,
        'logServer'       : 'logw306',
        'secureLogServer' : 'logws306'
    },
    //India+
    99 : {
        'siteId'          : 533963,
        'logServer'       : 'logw307',
        'secureLogServer' : 'logws1307'
    },
    //Sri Lanka+
    196 : {
        'siteId'          : 533964,
        'logServer'       : 'logw307',
        'secureLogServer' : 'logws1307'
    },
    //Kazakhstan+
    109 : {
        'siteId'          : 533966,
        'logServer'       : 'logw308',
        'secureLogServer' : 'logws1308'
    },
    //Bangladesh+
    18 : {
        'siteId'          : 533967,
        'logServer'       : 'logw308',
        'secureLogServer' : 'logws1308'
    },
    //Mauritius+
    136 : {
        'siteId'          : 533968,
        'logServer'       : 'logw308',
        'secureLogServer' : 'logws1308'
    },
    //Pakistan+
    162 : {
        'siteId'          : 533969,
        'logServer'       : 'logw308',
        'secureLogServer' : 'logws1308'
    },
    //United Arab Emirates+
    221 : {
        'siteId'          : 533971,
        'logServer'       : 'logw308',
        'secureLogServer' : 'logws1308'
    },
    //Australia+
    13 : {
        'siteId'          : 533972,
        'logServer'       : 'logw305',
        'secureLogServer' : 'logws1305'
    },
    //HongKong+
    96 : {
        'siteId'          : 533978,
        'logServer'       : 'logw305',
        'secureLogServer' : 'logws1305'
    },
    //Indonesia+
    100 : {
        'siteId'          : 533973,
        'logServer'       : 'logw305',
        'secureLogServer' : 'logws1305'
    },
    //Japan+
    107 : {
        'siteId'          : 533979,
        'logServer'       : 'logw305',
        'secureLogServer' : 'logws1305'
    },
    //Malaysia+
    129 : {
        'siteId'          : 533974,
        'logServer'       : 'logw305',
        'secureLogServer' : 'logws1305'
    },
    //NewZealand+
    153 : {
        'siteId'          : 533980,
        'logServer'       : 'logw305',
        'secureLogServer' : 'logws1305'
    },
    //Philippines+
    168 : {
        'siteId'          : 533975,
        'logServer'       : 'logw305',
        'secureLogServer' : 'logws1305'
    },
    //Singapore+
    188 : {
        'siteId'          : 533981,
        'logServer'       : 'logw305',
        'secureLogServer' : 'logws1305'
    },
    //South Korea+
    113 : {
        'siteId'          : 533976,
        'logServer'       : 'logw305',
        'secureLogServer' : 'logws1305'
    },
    //Taiwan+
    206 : {
        'siteId'          : 533982,
        'logServer'       : 'logw305',
        'secureLogServer' : 'logws1305'
    },
    //Thailand+
    209 : {
        'siteId'          : 533977,
        'logServer'       : 'logw305',
        'secureLogServer' : 'logws1305'
    },
    //Vietnam+
    246 : {
        'siteId'          : 533983,
        'logServer'       : 'logw305',
        'secureLogServer' : 'logws1305'
    },
    //Algeria+
    3 : {
        'siteId'          : 533984,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Angola+
    6 : {
        'siteId'          : 533985,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Austria+
    14 : {
        'siteId'          : 533986,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Belgium+
    21 : {
        'siteId'          : 533987,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Bosnia and Herzegovina+
    27 : {
        'siteId'          : 533988,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Croatia+
    53 : {
        'siteId'          : 533989,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Czech Republic+
    56 : {
        'siteId'          : 533990,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Denmark+
    57 : {
        'siteId'          : 533991,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //France+
    73 : {
        'siteId'          : 533992,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Germany+
    81 : {
        'siteId'          : 533993,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Ghana+
    82 : {
        'siteId'          : 533994,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Hungary+
    97 : {
        'siteId'          : 533995,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Iceland+
    98 : {
        'siteId'          : 533996,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Ireland+
    103 : {
        'siteId'          : 533997,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Italy+
    105 : {
        'siteId'          : 533998,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Liechtenstein+
    122 : {
        'siteId'          : 533999,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Luxembourg+
    124 : {
        'siteId'          : 534000,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Malta+
    132 : {
        'siteId'          : 534001,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Monaco+
    141 : {
        'siteId'          : 534002,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Morocco+
    144 : {
        'siteId'          : 534003,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Netherlands+
    150 : {
        'siteId'          : 534004,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Nigeria+
    156 : {
        'siteId'          : 534005,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Norway+
    160 : {
        'siteId'          : 534006,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Poland+
    170 : {
        'siteId'          : 534007,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Serbia+
    247 : {
        'siteId'          : 534009,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Slovak Republic+
    189 : {
        'siteId'          : 534010,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Slovenia+
    190 : {
        'siteId'          : 534011,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Spain+
    195 : {
        'siteId'          : 534012,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Sweden+
    203 : {
        'siteId'          : 534013,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Switzerland+
    204 : {
        'siteId'          : 534014,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Tunisia+
    214 : {
        'siteId'          : 534015,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //United Kingdom+
    243 : {
        'siteId'          : 534016,
        'logServer'       : 'logw309',
        'secureLogServer' : 'logws1309'
    },
    //Belarus+
    20 : {
        'siteId'          : 534017,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Botswana+
    28 : {
        'siteId'          : 534018,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Bulgaria+
    33 : {
        'siteId'          : 534019,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Cyprus+
    55 : {
        'siteId'          : 534020,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Egypt+
    63 : {
        'siteId'          : 534021,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Estonia+
    67 : {
        'siteId'          : 534022,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Finland+
    72 : {
        'siteId'          : 534023,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Greece+
    84 : {
        'siteId'          : 534024,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Israel+
    104 : {
        'siteId'          : 534025,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Jordan+
    108 : {
        'siteId'          : 534026,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Kenya+
    110 : {
        'siteId'          : 534027,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Latvia+
    117 : {
        'siteId'          : 534028,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Lithuania+
    123 : {
        'siteId'          : 534029,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Moldova+
    140 : {
        'siteId'          : 534030,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Mozambique+
    145 : {
        'siteId'          : 534031,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Romania+
    175 : {
        'siteId'          : 534032,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //SouthAfrica+
    193 : {
        'siteId'          : 534033,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Tanzania+
    208 : {
        'siteId'          : 534034,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Turkey+
    215 : {
        'siteId'          : 534035,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Uganda+
    219 : {
        'siteId'          : 534036,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
    //Ukraine+
    220 : {
        'siteId'          : 534037,
        'logServer'       : 'logw310',
        'secureLogServer' : 'logws1310'
    },
};

},{}],"app/config/analytics/ati":[function(require,module,exports){
module.exports=require('nBeCPh');
},{}],"app/config/analytics/index":[function(require,module,exports){
module.exports=require('sh/PiQ');
},{}],"sh/PiQ":[function(require,module,exports){
'use strict';

module.exports = {
    paths: require('./paths'),
    ati: require('./ati')
};

},{"./ati":"nBeCPh","./paths":"76CSqE"}],"app/config/analytics/paths":[function(require,module,exports){
module.exports=require('76CSqE');
},{}],"76CSqE":[function(require,module,exports){
module.exports = {
    '/' : {
        'viewType': 'home',
        'pageName': 'home_page',
        'category': 'home',
    },
    '/items' : {
        'viewType': 'listing',
        'pageName': 'listing_',
        'category': '',
        'subcategory': '',
    },
    '/items/id' : {
        'viewType': 'item_page',
        'pageName': 'detail_page',
        'category': '',
        'subcategory': '',
        'geo1': '',
        'geo2': '',
        'ad_category': '',
        'ad_subcategory': '',
        'ad_id': '',
        'ad_photo': '',
        'poster_id': '',
        'poster_type': '',
        'posting_to_action': '',
        'action_type': 'loaded',
    },
    '/interstitial' : {
        'viewType': 'interstitial',
        'pageName': 'interstitial',
        'category': 'static',
        'subcategory': '',
    },
    '/categories' : {
        'viewType': 'categoryList',
        'pageName': 'listing_',
        'category': '',
        'subcategory': '',
    },
};

},{}],"app/config/index":[function(require,module,exports){
module.exports=require('xJ/34R');
},{}],"xJ/34R":[function(require,module,exports){
'use strict';

var _ = require('underscore');
var CONFIG = {
    analytics: require('./analytics')
};

function get(keys, defaultValue) {
    var value;

    if (!Array.isArray(keys)) {
        keys = [keys];
    }
    if (typeof defaultValue === 'undefined') {
        defaultValue = null;
    }
    keys.every(function iterate(key, index) {
        try {
            if (!index) {
                value = CONFIG[key];
            }
            else {
                value = value[key];
            }
        }
        catch (err) {
            value = null;
            return false;
        }
        return true;
    });
    if (typeof value === 'undefined' || value === null) {
        return defaultValue;
    }
    return _.clone(value);
}

module.exports = {
    get: get
};

},{"./analytics":"sh/PiQ","underscore":181}],"GmLQzC":[function(require,module,exports){
'use strict';

var helpers = require('../helpers');

module.exports = {
    index: function(params, callback) {
        var app = helpers.environment.init(this.app);
        var category = app.getSession('categories')._byId[params.id];

        callback(null, {
            'category': category,
            'params': params
        });
    },
    show: function(params, callback) {
        var app = helpers.environment.init(this.app);
        var category = app.getSession('categories')._byId[params.id];

        callback(null, {
            'category': category,
            'params': params
        });
    }
};

},{"../helpers":"xxG+1D"}],"app/controllers/categories_controller":[function(require,module,exports){
module.exports=require('GmLQzC');
},{}],"app/controllers/home_controller":[function(require,module,exports){
module.exports=require('n5JPJf');
},{}],"n5JPJf":[function(require,module,exports){
'use strict';

var _ = require('underscore');
var helpers = require('../helpers');

module.exports = {
    index: function(params, callback) {
        var app = helpers.environment.init(this.app);

        if (params.cityId) {
            helpers.environment.updateCity(app, params.cityId);
        }

        (function fetchWhatsNew() {
            var siteLocation = app.getSession('siteLocation');
            var spec = {
                whatsNewItems: {
                    collection: 'Items',
                    params: {}
                }
            };

            _.extend(spec.whatsNewItems.params, params, {
                location: siteLocation,
                item_type: 'adsList',
                'f.withPhotos': 'true'
            });
            app.fetch(spec, function afterFetch(err, result) {
                var whatsNew = result.whatsNewItems.models[0];

                function processItem(item) {
                    var year = item.date.year;
                    var month = item.date.month - 1;
                    var day = item.date.day;
                    var hour = item.date.hour;
                    var minute = item.date.minute;
                    var second = item.date.second;
                    var date = new Date(year, month, day, hour, minute, second);

                    item.date.since = helpers.timeAgo(date);
                }

                result.platform = app.getSession('platform');
                result.categories = app.getSession('categories');
                result.dictionary = app.getSession('dictionary');
                result.whatsNewMetadata = whatsNew.get('metadata');
                result.whatsNewItems = whatsNew.get('data');
                result.firstItem = result.whatsNewItems[0];
                result.siteLocation = siteLocation;
                _.each(result.whatsNewItems, processItem);
                callback(err, result);
            });
        })();
    }
};


},{"../helpers":"xxG+1D","underscore":181}],"app/controllers/items_controller":[function(require,module,exports){
module.exports=require('Q7OFda');
},{}],"Q7OFda":[function(require,module,exports){
'use strict';

var helpers = require('../helpers');

module.exports = {
    index: function(params, callback) {
        var app = helpers.environment.init(this.app);
        var spec = {
            items: {
                collection: 'Items',
                params: params
            }
        };

        params.item_type = 'adsList';

        /** don't read from cache, because rendr caching expects an array response
        with ids, and smaug returns an object with 'data' and 'metadata' */
        app.fetch(spec, {
            'readFromCache': false
        }, function afterFetch(err, result) {
            result.items = result.items.models[0].get('data');
            result.platform = app.getSession('platform');
            callback(err, result);
        });
    },
    show: function(params, callback) {
        var app = helpers.environment.init(this.app);
        var user = app.getSession('user');
        var spec = {
            item: {
                model: 'Item',
                params: params
            }
        };

        if (user) {
            params.token = user.token;
        }
        app.fetch(spec, {
            'readFromCache': false
        }, function afterFetch(err, result) {
            result.platform = app.getSession('platform');
            result.location = app.getSession('siteLocation');
            result.user = user;
            result.item = result.item.toJSON();
            callback(err, result);
        });
    },
    search: function(params, callback) {
        var app = helpers.environment.init(this.app);
        var spec = {
            items: {
                collection: 'Items',
                params: params
            }
        };

        params.item_type = 'adsList';
        params.searchTerm = params.q;
        delete params.q;

        //don't read from cache, because rendr caching expects an array response
        //with ids, and smaug returns an object with 'data' and 'metadata'
        app.fetch(spec, {
            'readFromCache': false
        }, function afterFetch(err, result) {
            var items = result.items.models[0];

            result.metadata = items.get('metadata');
            result.items = items.get('data');
            result.searchTerm = params.searchTerm;
            callback(err, result);
        });
    },
    reply: function(params, callback) {
        var app = helpers.environment.init(this.app);
        var spec = {
            item: {
                model: 'Item',
                params: params
            }
        };

        app.fetch(spec, {
            'readFromCache': false
        }, function afterFetch(err, result) {
            result.user = app.getSession('user');
            result.platform = app.getSession('platform');
            result.location = app.getSession('siteLocation');
            result.item = result.item.toJSON();
            callback(err, result);
        });
    }
};

},{"../helpers":"xxG+1D"}],"app/controllers/location_controller":[function(require,module,exports){
module.exports=require('IT+PYH');
},{}],"IT+PYH":[function(require,module,exports){
'use strict';

var helpers = require('../helpers');

module.exports = {
    index: function(params, callback) {
        var app = helpers.environment.init(this.app);
        var location = app.getSession('location');
        var cities = location.topCities;

        if (!params.search) {
            location.cities = cities;
            return callback(null, {
                'location': location,
                'cities': cities.models,
                'target': params.target,
            });
        }

        (function fetchCities() {
            var spec = {
                cities: {
                    collection: 'Cities',
                    params: {
                        location: app.getSession('siteLocation'),
                        name: params.search
                    }
                }
            };

            app.fetch(spec, function afterFetch(err, result) {
                var cities = {
                    'models': result.cities.toJSON(),
                    '_byId': {},
                    'metadata': result.cities.get('metadata')
                };

                cities.models.forEach(function sortCity(city) {
                    cities._byId[city.id] = city;
                });
                location.cities = cities;

                callback(err, {
                    'location': location,
                    'cities': cities.models,
                    'search': params.search,
                    'posting': params.posting,
                });
            });
        })();
    }
};

},{"../helpers":"xxG+1D"}],"CVSQ7j":[function(require,module,exports){
'use strict';

var helpers = require('../helpers');

module.exports = {
    terms: function(params, callback) {
        var app = helpers.environment.init(this.app);

        callback(null, {
            'params': params
        });
    }
};

},{"../helpers":"xxG+1D"}],"app/controllers/pages_controller":[function(require,module,exports){
module.exports=require('CVSQ7j');
},{}],"app/controllers/post_controller":[function(require,module,exports){
module.exports=require('EucHRb');
},{}],"EucHRb":[function(require,module,exports){
'use strict';

var helpers = require('../helpers');
var _ = require('underscore');

module.exports = {
    index: function(params, callback) {
        var app = helpers.environment.init(this.app);

        callback(null, {
            'params': params,
        });
    },
    subcat: function(params, callback) {
        var app = helpers.environment.init(this.app);
        var subcategories = this.app.getSession('categories')._byId[params.categoryId].children;

        callback(null, _.extend(params, {
            'subcategories': subcategories
        }));
    },
    form: function(params, callback) {
        var app = helpers.environment.init(this.app);
        var siteLocation = app.getSession('siteLocation');
        var language = app.getSession('selectedLanguage');
        var languages = app.getSession('languages');
        var languageCode = languages._byId[language].isocode.toLowerCase(); 
        var spec = {
            postingSession: {
                model: 'PostingSession'
            },
            fields: {
                collection: 'Fields',
                params: {
                    intent: 'post',
                    location: siteLocation,
                    categoryId: params.subcategoryId,
                    languageId: language,
                    languageCode: languageCode
                }
            }
        };

        app.fetch(spec, function afterFetch(err, result) {

            var response = result.fields.models[0].attributes;
            result.postingSession = result.postingSession.get('postingSession');
            result.intent = 'create';
            result.fields = response.fields;
            result.errors = params.err;
            result.category = params.categoryId;
            result.subcategory = params.subcategoryId;
            result.location = siteLocation;
            result.language = language;
            result.languageCode = languageCode;
            result.platform = app.getSession('platform');
            result.template = app.getSession('template');
            result.errField = params.errField;
            result.errMsg = params.errMsg;
            callback(err, result);
        });

    }
};

},{"../helpers":"xxG+1D","underscore":181}],"p9KMg0":[function(require,module,exports){
'use strict';

var _ = require('underscore');
var helpers = require('../helpers');

module.exports = {
    registration: function(params, callback) {
        var app = helpers.environment.init(this.app);

        callback(null, {
            'params': params
        });
    },
    login: function(params, callback) {
        var app = helpers.environment.init(this.app);

        callback(null, {
            'params': params
        });
    },
    'my-ads': function(params, callback) {
        var app = helpers.environment.init(this.app);
        var siteLocation = app.getSession('siteLocation');
        var user = app.getSession('user') || {};
        var spec = {
            myAds: {
                collection: 'Items',
                params: {
                    token: user.token
                }
            }
        };

        _.extend(spec.myAds.params, params, {
            location: siteLocation,
            item_type: 'myAds'
        });
        app.fetch(spec, function afterFetch(err, result) {
            var myAds = result.myAds.models[0];

            function processItem(item) {
                var year = item.date.year;
                var month = item.date.month - 1;
                var day = item.date.day;
                var hour = item.date.hour;
                var minute = item.date.minute;
                var second = item.date.second;
                var date = new Date(year, month, day, hour, minute, second);

                item.date.since = helpers.timeAgo(date);
            }

            result.dictionary = app.getSession('dictionary');
            result.myAdsMetadata = myAds.get('metadata');
            result.myAds = myAds.get('data');
            result.siteLocation = siteLocation;
            _.each(result.myAds, processItem);
            callback(err, result);
        });
    },
    favorites: function(params, callback) {
        var app = helpers.environment.init(this.app);
        var siteLocation = app.getSession('siteLocation');
        var user = app.getSession('user') || {};
        var spec = {
            favorites: {
                collection: 'Items',
                params: {
                    token: user.token
                }
            }
        };

        _.extend(spec.favorites.params, params, {
            location: siteLocation,
            item_type: 'favorites'
        });
        app.fetch(spec, function afterFetch(err, result) {
            var favorites = result.favorites.models[0];

            function processItem(item) {
                var year = item.date.year;
                var month = item.date.month - 1;
                var day = item.date.day;
                var hour = item.date.hour;
                var minute = item.date.minute;
                var second = item.date.second;
                var date = new Date(year, month, day, hour, minute, second);

                item.date.since = helpers.timeAgo(date);
            }

            result.dictionary = app.getSession('dictionary');
            result.favoritesMetadata = favorites.get('metadata');
            result.favorites = favorites.get('data');
            result.siteLocation = siteLocation;
            _.each(result.favorites, processItem);
            callback(err, result);
        });
    }
};

},{"../helpers":"xxG+1D","underscore":181}],"app/controllers/user_controller":[function(require,module,exports){
module.exports=require('p9KMg0');
},{}],"app/experiments":[function(require,module,exports){
module.exports=require('sw7mcy');
},{}],"sw7mcy":[function(require,module,exports){
'use strict';

module.exports = function experiments() {
    return [{
        name: 'button_color',
        options: ['red', 'blue']
    }];
};

},{}],"lqVaFV":[function(require,module,exports){
'use strict';

var config = require('../config');
var catHelper = require('./categories');

module.exports = function analyticsHelper() {
    var imgUrls = function(session, viewData) {
        var urls = [];
        atiImgUrl(session, viewData, urls);

        return urls;
    };

    var getAtiPageNameSuffix = function(session, catName, subCatName) {
        var suffix = '';

        if (session.viewType == 'listing') {
            suffix = subCatName;
        }
        else if (session.viewType == 'categoryList') {
            suffix = catName;
        }

        return suffix;
    };

    var getPathMatch = function(path) {
        var pathMatch = path;

        if (path.indexOf('/categories/') != -1) {
            pathMatch = '/categories';
        }
        else if (path.indexOf('/items/') != -1) {
            pathMatch = '/items/id';
        }

        return pathMatch;
    };

    var getAd = function(session, viewData) {
        var ad = {};

        if (viewData.hasOwnProperty('item')) {
            var item = viewData.item;
            var postDate = new Date(item.date.timestamp);
            var now = new Date();

            ad.ad_id = item.id;
            ad.ad_photo = item.images.length;
            ad.poster_id = (item.user)? item.user.id : 0;
            ad.poster_type = (item.user)? 'registered_logged' : 'registered_no';
            ad.posting_to_action = Math.abs(Math.round((now - postDate) / (60*60*24)));
        }

        return ad;
    };

    var getGeo = function(session, viewData) {
        var geo = {};

        if (viewData.hasOwnProperty('item')) {
            var item = viewData.item;
            var country = item.location;
            var state = country.children[0];
            var city = state.children[0];

            geo.geo1 = state.name.replace(/  /g,"_").replace(/ /g,"_").replace(/-/g,"");
            geo.geo2 = city.name.replace(/  /g,"_").replace(/ /g,"_").replace(/-/g,"");
        }

        return geo;
    };

    var getParams = function(paramsProperties, session, viewData) {
        var params = paramsProperties;
        delete params.viewType;

        var catName = catHelper.getCatName(session, viewData) || paramsProperties.category;
        var subCatName = catHelper.getSubCatName(session, viewData) || paramsProperties.subcategory;
        var pageName = paramsProperties.pageName + getAtiPageNameSuffix(session, catName, subCatName);

        var geoObj = getGeo(session, viewData);
        var adObj = getAd(session, viewData);

        var action_type;

        var allParams = {
            page_name: pageName,
            category: catName,
            subcategory: subCatName,
            geo1: geoObj.geo1,
            geo2: geoObj.geo2,
            ad_category: catName,
            ad_subcategory: subCatName,
            ad_id: adObj.ad_id,
            ad_photo: adObj.ad_photo,
            poster_id: adObj.poster_id,
            poster_type: adObj.poster_type,
            posting_to_action: adObj.posting_to_action,
            action_type: params.action_type
        };

        for(var p in params){
            params[p] = allParams[p];
        }

        params.language = session.location.flags.languageCode;
        params.platform = session.platform;

        return params;
    };

    var atiImgUrl = function(session, viewData, urls) {
        var countryId = session.location.id;

        var pathMatch = getPathMatch(session.path);
        var paramsProperties = config.get(['analytics', 'paths', pathMatch]);
        var atiCountryConfig = config.get(['analytics', 'ati', countryId]);

        if (!paramsProperties || !atiCountryConfig) {
            return;
        }

        var logServer = atiCountryConfig.logServer;
        var siteId = atiCountryConfig.siteId;
        var params = getParams(paramsProperties, session, viewData);
        var clientId = session.clientId;
        var rnd = Math.floor(Math.random() * 1000000000);
        var referer = session.referer;

        var url = "http://"+logServer+".ati-host.net/hit.xiti?s="+siteId+"&stc="+encodeURIComponent(JSON.stringify(params))+"&idclient="+clientId+"&na="+rnd+"&ref="+referer;

        urls.push(url);
    };

    var api = {
        imgUrls: imgUrls,
        getPathMatch: getPathMatch,
    };

    return api;
}();

},{"../config":"xJ/34R","./categories":"sAspA0"}],"app/helpers/analytics":[function(require,module,exports){
module.exports=require('lqVaFV');
},{}],"sAspA0":[function(require,module,exports){
'use strict';

var _ = require('underscore');

module.exports = function categoriesHelper(){
    var getCatName = function(session, viewData) {
        var name = '';
        var categories = session.categories;
        var url = session.url;
        var catId = getCatId(url, viewData);

        var category = categories._byId[catId];

        if(category){
            name = category.name;
        }else{
            var childCats = session.childCategories;
            var subCat = childCats[catId];

            if (subCat) {
                var parentCat = categories._byId[subCat.parentId];
                name = parentCat.name;
            }
        }

        return name;
    };

    var getSubCatName = function(session, viewData) {
        var name = '';
        
        var catId = getCatId(session.url, viewData);
        var childCats = session.childCategories;
        var subCat = childCats[catId];

        if (subCat) {
            name = subCat.name;
        }

        return name;
    };

    var getCatId = function (url, viewData) {
        var catIndex = url.indexOf('categories');
        var catIdIndex = url.indexOf('categoryId');
        var catId = 0;

        if (catIndex != -1) {
            var qMarkIndex = url.indexOf('?',catIndex+11);
            catId = parseInt(url.substring(catIndex+11,qMarkIndex),10);
        }else if (catIdIndex != -1) {
            var ampIndex = url.indexOf('&',catIdIndex+11);
            catId = parseInt(url.substring(catIdIndex+11,ampIndex),10);
        }else if(viewData && viewData.item){
            catId = viewData.item.category.id;
        }

        return catId;
    };

    var api = {
        getCatName: getCatName,
        getSubCatName: getSubCatName,
    };

    return api;
}();

},{"underscore":181}],"app/helpers/categories":[function(require,module,exports){
module.exports=require('sAspA0');
},{}],"RuXAvX":[function(require,module,exports){
'use strict';

var config = require('../config');
var analyticsHelper = require('./analytics');

module.exports = {
    init: function(app) {
        if (typeof window === 'undefined') {
            return app;
        }
        this.setSession(app);
        this.setUrlVars(app);
        return app;
    },
    setSession: function(app) {
        var data = app.get('session');

        if (!app.updateSession) {
            app.updateSession = function(pairs) {
                for (var key in pairs) {
                    data[key] = pairs[key];
                }
                app.set('session', data);
            };
        }
        if (!app.getSession) {
            app.getSession = function(key) {
                if (!key) {
                    return data;
                }
                return data[key];
            };
        }
    },
    setUrlVars: function(app) {
        var location = window.location;
        var url = location.href;
        var path = location.pathname;
        var referer = app.getSession('url');
        var pathMatch = analyticsHelper.getPathMatch(path);
        var viewType = config.get(['analytics', 'paths', pathMatch, 'viewType'], '');

        app.updateSession({
            path: path,
            referer: referer,
            url: url,
            viewType: viewType
        });
    },
    updateCity: function(app, cityId) {
        var location = app.getSession('location');
        var city = location.cities._byId[cityId];

        if (city) {
            location.city = city;
            app.updateSession({
                siteLocation: city.url
            });
        }
    },
};

},{"../config":"xJ/34R","./analytics":"lqVaFV"}],"app/helpers/environment":[function(require,module,exports){
module.exports=require('RuXAvX');
},{}],"app/helpers/handlebars":[function(require,module,exports){
module.exports=require('Cct4Ou');
},{}],"Cct4Ou":[function(require,module,exports){
'use strict';

module.exports = function(Handlebars) {
    return {
        layout: function(template, path, options) {
            this.layout = template + path;
            return options.fn(this);
        },
        getFieldTemplate: function(template, options) {
            this.fieldPath = template + "/fields/" + this.fieldType;
            return options.fn(this);
        },
        parseOptionalFieldName: function(fieldName, options) {
            if (fieldName.indexOf('opt.') !== 0) {
                return fieldName;
            }
            return 'opts['+fieldName+']';
        }
    };
};

},{}],"app/helpers/index":[function(require,module,exports){
module.exports=require('xxG+1D');
},{}],"xxG+1D":[function(require,module,exports){
'use strict';

module.exports = {
    handlebars: require('./handlebars'),
    environment: require('./environment'),
    analytics: require('./analytics'),
    categories: require('./categories'),
    marketing: require('./marketing'),
    fitText: function(element, kompressor, options) {
        var compressor = kompressor || 1;
        var settings = $.extend({
            'minFontSize' : Number.NEGATIVE_INFINITY,
            'maxFontSize' : Number.POSITIVE_INFINITY
        }, options);

        function onResize() {
            var $this = $(this);
            var max = parseFloat(settings.maxFontSize);
            var min = parseFloat(settings.minFontSize);

            $this.css('font-size', Math.max(Math.min($this.width() / (compressor * 10), max), min));
        }

        return element.each(function resize() {
            $(window).on('resize.fittext orientationchange.fittext', onResize).trigger('resize.fittext');
        });
    },
    timeAgo: function(previous) {
        var current = new Date();
        var msPerMinute = 60 * 1000;
        var msPerHour = msPerMinute * 60;
        var msPerDay = msPerHour * 24;
        var msPerMonth = msPerDay * 30;
        var msPerYear = msPerDay * 365;
        var elapsed = current - previous;

        if (elapsed < msPerMinute) {
            return Math.round(elapsed/1000) + ' seconds ago';
        }
        else if (elapsed < msPerHour) {
            return Math.round(elapsed/msPerMinute) + ' minutes ago';
        }
        else if (elapsed < msPerDay ) {
            return Math.round(elapsed/msPerHour ) + ' hours ago';
        }
        else if (elapsed < msPerMonth) {
            return 'approximately ' + Math.round(elapsed/msPerDay) + ' days ago';
        }
        else if (elapsed < msPerYear) {
            return 'approximately ' + Math.round(elapsed/msPerMonth) + ' months ago';
        }
        else {
            return 'approximately ' + Math.round(elapsed/msPerYear ) + ' years ago';
        }
    }
};

},{"./analytics":"lqVaFV","./categories":"sAspA0","./environment":"RuXAvX","./handlebars":"Cct4Ou","./marketing":"cWO2Aw"}],"app/helpers/marketing":[function(require,module,exports){
module.exports=require('cWO2Aw');
},{}],"cWO2Aw":[function(require,module,exports){
'use strict';

module.exports = {
    getInfo: function(marketing,medium,platform) {
        var osName = marketing.osName; 
        var osVersion = marketing.osVersion;
        var data = {};
        if((osVersion < 2.1 && osName == 'Android') || (osVersion < 3.2 && osName == 'iOS') || (osVersion < 4.5 && osName == 'RIM') || (osVersion < 8 && osName == 'Windows Phone')){
            return data;
        }
        switch(osName) {
            case 'Android':
                data.link = 'market://details?id=com.olx.olx&referrer=utm_source%3DOLX_'+platform+'_DownloadApp%26utm_'+medium+'%3DFooter%26utm_campaign%3B'+medium;
                data.promo = 'OLX para android';
                data.image = 'android';
            break;
            case 'iOS':
                data.link = 'http://itunes.apple.com/es/app/olx-classifieds/id382059698';
                data.promo = 'OLX para iOS';
                data.image = 'ios';
            break;
            case 'RIM':
                data.link = 'http://appworld.blackberry.com/webstore/content/58411/?lang=es';
                data.promo = 'OLX para BlackBerry';
                data.image = 'blackberry';
            break;
            case 'Windows Phone':
                data.link = 'http://windowsphone.com/s?appid=31fc00f9-44e8-df11-9264-00237de2db9e';
                data.promo = 'OLX para Windows Phone';
                data.image = 'windowsphone';
            break;
        }
        return data;

    },
};

},{}],"app/lib/handlebarsHelpers":[function(require,module,exports){
module.exports=require('Cu+0Ho');
},{}],"Cu+0Ho":[function(require,module,exports){
/**
 * We inject the Handlebars instance, because this module doesn't know where
 * the actual Handlebars instance will come from.
 */
module.exports = function(Handlebars) {
  return {
    copyright: function(year) {
      return new Handlebars.SafeString("&copy;" + year);
    },
    moduloIf: function(index_count,mod,block) {
	  if(parseInt(index_count)%(mod)=== 0){
	    return block.fn(this);}
	},
	gte: function(a,b,block) {
	  if(parseInt(a)>=parseInt(b)){
	  	return block.fn(this);
	  }
	},
	lt: function(a,b,block) {
	  if(parseInt(a)<parseInt(b)){
	  	return block.fn(this);
	  }
	},
	eq: function(a,b,block) {
	  if(a == b){
	  	return block.fn(this);
	  }
	},
	ifC: function (v1, operator, v2, options) {
	    switch (operator) {
	        case '==':
	            return (v1 == v2) ? options.fn(this) : options.inverse(this);
	        case '===':
	            return (v1 === v2) ? options.fn(this) : options.inverse(this);
	        case '<':
	            return (v1 < v2) ? options.fn(this) : options.inverse(this);
	        case '<=':
	            return (v1 <= v2) ? options.fn(this) : options.inverse(this);
	        case '>':
	            return (v1 > v2) ? options.fn(this) : options.inverse(this);
	        case '>=':
	            return (v1 >= v2) ? options.fn(this) : options.inverse(this);
	        case '&&':
	            return (v1 && v2) ? options.fn(this) : options.inverse(this);
	        case '||':
	            return (v1 || v2) ? options.fn(this) : options.inverse(this);
	        default:
	            return options.inverse(this);
	    }
  	}
  };
};

},{}],"app/lib/sixpack":[function(require,module,exports){
module.exports=require('ocCzwm');
},{}],"ocCzwm":[function(require,module,exports){
module.exports = function Sixpack() {

        var sixpack = {base_url: "http://localhost:5000", ip_address: null, user_agent: null};

        // check for node module loader
        var on_node = false;
        if (typeof module !== "undefined" && typeof require !== "undefined" && typeof window =="undefined") {
            on_node = true;
            module.exports = sixpack;
        } else {
            window["sixpack"] = sixpack;
        }

        sixpack.generate_client_id = function () {
            // from http://stackoverflow.com/questions/105034
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        };

        sixpack.Session = function (client_id, base_url, ip_address, user_agent) {
            this.client_id = client_id || sixpack.generate_client_id();
            this.base_url = base_url || sixpack.base_url;
            this.ip_address = ip_address || sixpack.ip_address;
            this.user_agent = user_agent || sixpack.user_agent;
            if (!on_node) {
                this.user_agent = this.user_agent || (window && window.navigator && window.navigator.userAgent);
            }
        };

        sixpack.Session.prototype = {
            participate: function(experiment_name, alternatives, force, callback) {
                if (typeof force === "function") {
                    callback = force;
                    force = null;
                }

                if (!(/^[a-z0-9][a-z0-9\-_ ]*$/).test(experiment_name)) {
                    return callback(new Error("Bad experiment_name"));
                }

                if (alternatives.length < 2) {
                    return callback(new Error("Must specify at least 2 alternatives"));
                }

                for (var i = 0; i < alternatives.length; i += 1) {
                    if (!(/^[a-z0-9][a-z0-9\-_ ]*$/).test(alternatives[i])) {
                        return callback(new Error("Bad alternative name: " + alternatives[i]));
                    }
                }
                var params = {client_id: this.client_id,
                              experiment: experiment_name,
                              alternatives: alternatives};
                if (!on_node && force == null) {
                    var regex = new RegExp("[\\?&]sixpack-force-" + experiment_name + "=([^&#]*)");
                    var results = regex.exec(window.location.search);
                    if(results != null) {
                        force = decodeURIComponent(results[1].replace(/\+/g, " "));
                    }
                }
                if (force != null && _in_array(alternatives, force)) {
                    return callback(null, {"status": "ok", "alternative": {"name": force}, "experiment": {"version": 0, "name": experiment_name}, "client_id": this.client_id});
                }
                if (this.ip_address) {
                    params.ip_address = this.ip_address;
                }
                if (this.user_agent) {
                    params.user_agent = this.user_agent;
                }
                return _request(this.base_url + "/participate", params, function(err, res) {
                    if (err) {
                        res = {status: "failed",
                               error: err,
                               alternative: {name: alternatives[0]}};
                    }
                    return callback(null, res);
                });
            },
            convert: function(experiment_name, callback) {
                if (!(/^[a-z0-9][a-z0-9\-_ ]*$/).test(experiment_name)) {
                    return callback(new Error("Bad experiment_name"));
                }

                var params = {client_id: this.client_id,
                              experiment: experiment_name};
                if (this.ip_address) {
                    params.ip_address = this.ip_address;
                }
                if (this.user_agent) {
                    params.user_agent = this.user_agent;
                }
                return _request(this.base_url + "/convert", params, function(err, res) {
                    if (err) {
                        res = {status: "failed",
                            error: err};
                    }
                    return callback(null, res);
                });
            }
        };

        var counter = 0;

        var _request = function(uri, params, callback) {
            var timed_out = false;
            var timeout_handle = setTimeout(function () {
                timed_out = true;
                return callback(new Error("request timed out"));
            }, 1000);

            if (!on_node) {
                var cb = "callback" + (++counter);
                params.callback = "sixpack." + cb
                sixpack[cb] = function (res) {
                    if (!timed_out) {
                        clearTimeout(timeout_handle);
                        return callback(null, res);
                    }
                }
            }
            var url = _request_uri(uri, params);
            if (!on_node) {
                script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = url;
                script.async = true;
                document.body.appendChild(script);
            } else {
                var http = require('http');
                var req = http.get(url, function(res) {
                    var body = "";
                    res.on('data', function(chunk) {
                        return body += chunk;
                    });
                    return res.on('end', function() {
                        var data;
                        if (res.statusCode == 500) {
                            data = {status: "failed", response: body};
                        } else {
                            data = JSON.parse(body);
                        }
                        if (!timed_out) {
                            clearTimeout(timeout_handle);
                            return callback(null, data);
                        }
                    });
                });
                req.on('error', function(err) {
                    if (!timed_out) {
                        clearTimeout(timeout_handle);
                        return callback(err);
                    }
                });
            }
        };

        var _request_uri = function(endpoint, params) {
            var query_string = [];
            var e = encodeURIComponent;
            for (var key in params) {
                if (params.hasOwnProperty(key)) {
                    var vals = params[key];
                    if (Object.prototype.toString.call(vals) !== '[object Array]') {
                        vals = [vals];
                    }
                    for (var i = 0; i < vals.length; i += 1) {
                        query_string.push(e(key) + '=' + e(vals[i]));
                    }
                }
            }
            if (query_string.length) {
                endpoint += '?' + query_string.join('&');
            }
            return endpoint;
        };

        var _in_array = function(a, v) {
            for(var i = 0; i < a.length; i++) {
                if(a[i] === v) {
                    return true;
                }
            }
            return false;
        };
    return sixpack;
};

},{"http":124}],"qnrstJ":[function(require,module,exports){
'use strict';

var RendrBase = require('rendr/shared/base/model');

module.exports = RendrBase.extend({});

},{"rendr/shared/base/model":172}],"app/models/base":[function(require,module,exports){
module.exports=require('qnrstJ');
},{}],"Lkugus":[function(require,module,exports){
'use strict';

var Base = require('./base');

module.exports = Base.extend({
    url: '/repos/:owner/:name',
    api: 'travis-ci'
});

module.exports.id = 'Build';

},{"./base":"qnrstJ"}],"app/models/build":[function(require,module,exports){
module.exports=require('Lkugus');
},{}],"1ZHO47":[function(require,module,exports){
'use strict';

var Base = require('./base');

module.exports = Base.extend({
    url: '/countries/:location/categories/:id',
    idAttribute: 'id'
});

module.exports.id = 'Category';

},{"./base":"qnrstJ"}],"app/models/category":[function(require,module,exports){
module.exports=require('1ZHO47');
},{}],"app/models/city":[function(require,module,exports){
module.exports=require('GoV6d6');
},{}],"GoV6d6":[function(require,module,exports){
'use strict';

var Base = require('./base');

module.exports = Base.extend({
    idAttribute: 'id'
});

module.exports.id = 'City';

},{"./base":"qnrstJ"}],"e/8fLa":[function(require,module,exports){
'use strict';

var Base = require('./base');

module.exports = Base.extend({
    url: '/items/fields/:id',
    idAttribute: 'id'
});

module.exports.id = 'Field';

},{"./base":"qnrstJ"}],"app/models/field":[function(require,module,exports){
module.exports=require('e/8fLa');
},{}],"app/models/item":[function(require,module,exports){
module.exports=require('gcAV3O');
},{}],"gcAV3O":[function(require,module,exports){
'use strict';

var Base = require('./base');

module.exports = Base.extend({
    url: function() {
        var url = '/items/:id';

        if (this.get('token')) {
            url += '?token=:token';
        }
        return url;
    },
    idAttribute: 'id'
});

module.exports.id = 'Item';

},{"./base":"qnrstJ"}],"3tHZeC":[function(require,module,exports){
'use strict';

var Base = require('./base');

module.exports = Base.extend({
    url: '/items/postingSession',
});

module.exports.id = 'PostingSession';
},{"./base":"qnrstJ"}],"app/models/posting_session":[function(require,module,exports){
module.exports=require('3tHZeC');
},{}],"app/router":[function(require,module,exports){
module.exports=require('86KJBY');
},{}],"86KJBY":[function(require,module,exports){
'use strict';

var BaseClientRouter = require('rendr/client/router');

var Router = module.exports = function Router(options) {
    BaseClientRouter.call(this, options);
};

/**
 * Set up inheritance.
 */
Router.prototype = Object.create(BaseClientRouter.prototype);
Router.prototype.constructor = BaseClientRouter;

Router.prototype.postInitialize = function() {
    this.on('action:start', this.trackImpression, this);
};

Router.prototype.trackImpression = function() {
    if (window._gaq) {
        _gaq.push(['_trackPageview']);
    }
};

},{"rendr/client/router":166}],"bbl2t2":[function(require,module,exports){
'use strict';

module.exports = function(match) {
    match('?*params', 'home#index');
    match('', 'home#index');

    match('categories', 'categories#index');
    match('items', 'items#index');
    match('categories?*params', 'categories#index');
    match('items?*params', 'items#index');

    match('search', 'items#search');
    match('search?*params', 'items#search');

    match('categories/:id?*params', 'categories#show');
    match('categories/:id', 'categories#show');
    match('items/:id', 'items#show');
    match('items/:id/reply', 'items#reply');

    match('location', 'location#index');
    match('registration', 'user#registration');
    match('login', 'user#login');
    match('my-ads', 'user#my-ads');
    match('favorites', 'user#favorites');

    match('post', 'post#index');
    match('post/:categoryId', 'post#subcat');
    match('post/:categoryId/:subcategoryId', 'post#form');

    match('terms', 'pages#terms');
};

},{}],"app/routes":[function(require,module,exports){
module.exports=require('bbl2t2');
},{}],"app/templates/compiledTemplates":[function(require,module,exports){
module.exports=require('rFRVhs');
},{}],"rFRVhs":[function(require,module,exports){
module.exports = function(Handlebars) {

var templates = {};

templates["analytics"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n	<img src=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\">\n";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, (depth0 && depth0.analyticsImgUrls), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  });

templates["basic/categories/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n  <li>\n  	<a href=\"/items?categoryId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&location="
    + escapeExpression(((stack1 = ((stack1 = (depth1 && depth1.params)),stack1 == null || stack1 === false ? stack1 : stack1.location)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a>\n  </li>\n";
  return buffer;
  }

  buffer += "<h1>Categories</h1>\n\n<ul>\n";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>\n";
  return buffer;
  });

templates["basic/categories/show"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		<tr>\n			<td style=\"border-top: solid thin #808080;\">\n				<a style=\"display: block;\" href=\"/items?categoryId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&location="
    + escapeExpression(((stack1 = ((stack1 = (depth1 && depth1.params)),stack1 == null || stack1 === false ? stack1 : stack1.location)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n					<small style=\"display: block;\"><img border=\"0\" alt=\"\" src=\"\" />";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</small>\n				</a>\n			</td>\n		</tr>\n	";
  return buffer;
  }

  buffer += escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n\n"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "location/select", options) : helperMissing.call(depth0, "view", "location/select", options)))
    + "\n"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "post/home_select", options) : helperMissing.call(depth0, "view", "post/home_select", options)))
    + "\n";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "basic/partials/search", options) : helperMissing.call(depth0, "partial", "basic/partials/search", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" align=\"left\">\n	";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.children), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</table>\n";
  return buffer;
  });

templates["basic/fields/combobox"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				<option value=\"";
  if (helper = helpers.key) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.key); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (helper = helpers.value) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.value); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</option>\n			";
  return buffer;
  }

  buffer += "<label style=\"display: block; padding-top: .5em;\">\n		<small>";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</small>\n		<br />\n		<select id=\"select-";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" name=\""
    + escapeExpression((helper = helpers.parseOptionalFieldName || (depth0 && depth0.parseOptionalFieldName),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.name), options) : helperMissing.call(depth0, "parseOptionalFieldName", (depth0 && depth0.name), options)))
    + "\">\n			";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.values), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	    </select>\n</label>\n\n\n";
  return buffer;
  });

templates["basic/fields/text"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<label style=\"display: block; padding-top: .5em;\">\n    <small>";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</small>\n    <br />\n    <input type=\"text\" name=\""
    + escapeExpression((helper = helpers.parseOptionalFieldName || (depth0 && depth0.parseOptionalFieldName),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.name), options) : helperMissing.call(depth0, "parseOptionalFieldName", (depth0 && depth0.name), options)))
    + "\" id=\"text-";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\"class=\"olx-ui-textbox\" data-role=\"none\">\n</label>";
  return buffer;
  });

templates["basic/footer/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\">\n	<tr>\n        <td align=\"center\" style=\"border-top: solid thin #808080;\">\n            <small><a target=\"_blank\" href=\"/terms\"> Condiciones de Uso</a></small>\n        	<small style=\"display: block;\">&copy; 2006-2014 OLX, Inc.</small>\n        </td>\n    </tr>\n</table>";
  });

templates["basic/home/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "in as "
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.user)),stack1 == null || stack1 === false ? stack1 : stack1.username)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " | <a href=\"/my-ads\">My ads</a>";
  return buffer;
  }

function program3(depth0,data) {
  
  
  return "out!";
  }

function program5(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		<tr>\n			<td style=\"border-top: solid thin #808080;\">\n				<a style=\"display: block;\" href=\"categories/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "?location="
    + escapeExpression(((stack1 = (depth1 && depth1.siteLocation)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n					<small style=\"display: block;\"><img border=\"0\" alt=\"\" src=\"\" />";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</small>\n				</a>\n			</td>\n		</tr>\n	";
  return buffer;
  }

  buffer += escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "location/select", options) : helperMissing.call(depth0, "view", "location/select", options)))
    + "\n"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "post/home_select", options) : helperMissing.call(depth0, "view", "post/home_select", options)))
    + "\n";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "basic/partials/search", options) : helperMissing.call(depth0, "partial", "basic/partials/search", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n    <tr>\n        <td style=\"border-top: solid thin #808080; border-bottom: solid thin #B0B0B0; padding:1px 4px;\">\n            <small>Logged ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.user), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</small>\n        </td>\n    </tr>\n</table>\n<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" align=\"left\">\n	";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.categories)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(5, program5, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</table>\n";
  return buffer;
  });

templates["basic/items/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n			<tr>\n	            <td style=\"border-top: solid thin #808080;\">\n	                <a style=\"display: block;\" tabindex=\"1\" href=\"/items/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n	                	<small style=\"display: block;\">\n	                		";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.thumbnail), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	                    	";
  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + " - "
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n	                	</small>\n	                </a>\n	            </td>\n	        </tr>\n        ";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return "\n	                			*\n	                		";
  }

  buffer += escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "location/select", options) : helperMissing.call(depth0, "view", "location/select", options)))
    + "\n";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "basic/partials/search", options) : helperMissing.call(depth0, "partial", "basic/partials/search", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n<table width=\"100%\" border=\"0\" align=\"left\" cellspacing=\"0\" cellpadding=\"4\">\n	<tbody>\n		";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "               \n	</tbody>\n</table>\n";
  return buffer;
  });

templates["basic/items/reply"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += " value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.user)),stack1 == null || stack1 === false ? stack1 : stack1.email)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"";
  return buffer;
  }

  buffer += "<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"width: 100%;\">\n    <tbody><tr>\n        <td style=\"padding: .25em .5em; border-top: solid thin #808080;\">\n            <strong style=\"color: #0075BD;\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.title)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</strong>\n            <br>\n            <small>Contactar al anunciante</small>\n        </td>\n    </tr>\n</tbody></table>\n<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"width: 100%;\">\n    <tr>\n        <td style=\"padding: .5em; border-top: solid thin #808080;\">\n            <small>\n                <strong>Para: </strong>\n                <span>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.contactName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n            </small>\n            <br />\n            <br style=\"display: none;\" />\n            <form id=\"postingForm\" action=\"/items/"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "/reply\" method=\"POST\">\n                <label style=\"display: block; padding-top: .5em;\">\n                    <small>Message</small>\n                    <br />\n                    <textarea name=\"message\"></textarea>\n                </label>\n                <label style=\"display: block; padding-top: .5em;\">\n                    <small>Email</small>\n                    <br />\n                    <input type=\"text\" name=\"email\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.user), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n                </label>\n                <label style=\"display: block; padding-top: .5em;\">\n                    <small>Name</small>\n                    <br />\n                    <input type=\"text\" name=\"name\">\n                </label>\n                <label style=\"display: block; padding-top: .5em;\">\n                    <small>Phone</small>\n                    <br />\n                    <input type=\"text\" name=\"phone\">\n                </label>\n                <input type=\"hidden\" name=\"itemId\" value=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n                <span style=\"display: block;\"><input type=\"submit\" value=\"Enviar Consulta\"></span>\n            </form>\n        </td>\n    </tr>\n</table>";
  return buffer;
  });

templates["basic/items/search"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<h3>Results for: ";
  if (helper = helpers.searchTerm) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.searchTerm); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n\n"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{
    'items': ((depth0 && depth0.items))
  },data:data},helper ? helper.call(depth0, "items/index", options) : helperMissing.call(depth0, "view", "items/index", options)))
    + "\n";
  return buffer;
  });

templates["basic/items/show"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n	<img src=\"";
  if (helper = helpers.url) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.url); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\"></br></br>\n";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n	";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ":";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ":";
  if (helper = helpers.value) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.value); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</br>\n";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "/items/"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "/favorite";
  return buffer;
  }

function program7(depth0,data) {
  
  
  return "/registration";
  }

function program9(depth0,data) {
  
  
  return " method=\"POST\"";
  }

function program11(depth0,data) {
  
  var stack1;
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.isFavorite), {hash:{},inverse:self.noop,fn:self.program(12, program12, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }
function program12(depth0,data) {
  
  
  return " disabled";
  }

  buffer += "<h2>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.title)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h2>\n<h3>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h3>\n\n";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</br></br>\n\n";
  stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</br></br>\n\n";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.optionals), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</br>\n<form action=\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.user), {hash:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.user), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n	<input type=\"submit\" value=\"Add to Favorites\"";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.user), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n</form>\n<br />\n<a href=\"/items/"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "/reply\">Reply</a>\n<br />\n<a href=\"/items?categoryId="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.category)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "&location=";
  if (helper = helpers.location) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.location); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&relatedAds="
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">Related Ads</a>";
  return buffer;
  });

templates["basic/location/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  
  return "Results";
  }

function program3(depth0,data) {
  
  
  return "Popular Cities";
  }

function program5(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		<tr>\n			<td style=\"border-top: solid thin #808080;\">\n				<a style=\"display: block;\" href=\"/";
  stack1 = helpers['if'].call(depth0, (depth1 && depth1.target), {hash:{},inverse:self.noop,fn:self.programWithDepth(6, program6, data, depth1),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "?cityId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n					<small style=\"display: block;\"><img border=\"0\" alt=\"\" src=\"\" />";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</small>\n				</a>\n			</td>\n		</tr>\n	";
  return buffer;
  }
function program6(depth0,data,depth2) {
  
  var stack1;
  return escapeExpression(((stack1 = (depth2 && depth2.target)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

  buffer += "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n    <tr>\n        <td style=\"border-top: solid thin #B0B0B0;\">\n            <small>Type a city</small>\n            <form action=\"/location\">\n                <input type=\"text\" name=\"search\">\n                <input type=\"submit\" value=\"Search\">\n            </form>\n        </td>\n    </tr>\n</table>\n<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" align=\"left\">\n	<tr>\n		<td>\n			<strong style=\"display: block;\">";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.search), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</strong>\n		</td>\n	</tr>\n	";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.cities), {hash:{},inverse:self.noop,fn:self.programWithDepth(5, program5, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</table>\n";
  return buffer;
  });

templates["basic/location/select"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program3(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program5(depth0,data) {
  
  
  return "Change city";
  }

function program7(depth0,data) {
  
  
  return "Select a city";
  }

  buffer += "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n    <tr>\n        <td style=\"border-top: solid thin #808080; border-bottom: solid thin #B0B0B0; padding:1px 4px;\">\n        	<span>";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</span>\n            <small><a href=\"/location\">";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</a></small>\n        </td>\n    </tr>\n</table>\n";
  return buffer;
  });

templates["basic/pages/terms"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<section>\n  	    	<div class=\"breadcrumbs\">\n    <p style=\"border:none;\" class=\"searchResultsTerm\">Terms Of Use</p>\n	</div>\n<div class=\"disclamer\">   \n    <p><br>PLEASE CAREFULLY READ THESE TERMS OF USE. BY USING THIS \nWEBSITE YOU INDICATE YOUR UNDERSTANDING AND ACCEPTANCE OF THESE TERMS. \nIF YOU DO NOT AGREE TO THESE TERMS YOU MAY NOT USE THIS WEBSITE.</p>\n    <p>\n</p><li>\n<h3>ACCEPTANCE</h3>\n<p>OLX, Inc. and its affiliates (OLX) provide a collection of online \nresources which include classified advertisements, forums, and certain \ne-mail services (collectively, the \"Service\") on the website <a target=\"_blank\" href=\"http://www.olx.com/\">www.olx.com</a> and its affiliated sites (including without limitation <a target=\"_blank\" href=\"http://www.mundoanuncio.com/\">www.mundoanuncio.com</a> and <a target=\"_blank\" href=\"http://www.edeng.cn/\">www.edeng.cn</a>)\n (collectively, the \"Website\") subject to these Terms of Use (these \n\"Terms\").  By using the Service, you agree to comply with these Terms.  \nAdditionally, when using a portion of the Service, you agree to conform \nto any applicable posted guidelines for such Service, which may change \nfrom time to time. You understand and agree that you are solely \nresponsible for reviewing these Terms from time to time. Should you \nobject to any term or condition of these Terms, any guideline, or any \nsubsequent changes thereto or become unhappy with OLX in any way, your \nonly choice is to immediately discontinue use of OLX. These Terms may be\n updated by OLX at any time at its sole discretion. OLX may send you \nnotices of changes to the Website or the Terms pursuant to Section 21(I)\n herein. OLX may provide a translation of the English version of the \nTerms into other languages. You understand and agree that any \ntranslation of the Terms into other languages is for your convenience \nonly and that the English version governs the terms of your relationship\n with OLX. Furthermore, if there are any inconsistencies between the \nEnglish version of the Terms and any translation, the English version of\n the Terms shall govern. You understand and agree that to the extent you\n are located in the United States, you will utilize the Service in \ncompliance with any laws, regulations, and guidelines that may be under \nthe jurisdiction of the Office of Foreign Asset Control, U.S. Department\n of Treasury.</p>\n</li>\n<li>\n<h3>DESCRIPTION OF SERVICE AND CONTENT POLICY</h3>\n<p>A.  OLX is the next generation of free online classifieds.  We act as\n a venue to allow our users who comply with these Terms to offer, sell, \nand buy products and services listed on the Website.  Although you may \nbe able to conduct payment and other transactions through the Website, \nusing third-party vendors such as PayPal, OLX is not in any way in \ninvolved in such transactions.  As a result, and as discussed in more \ndetail in these Terms, you hereby acknowledge and agree that OLX is not a\n party to such transactions, has no control over any element of such \ntransactions, and shall have no liability to any party in connection \nwith such transactions. You use the Service and the Website at your own \nrisk.</p>\n<p>B.  You understand that OLX does not control, and is not responsible \nfor ads, directory information, business listings/information, messages \nbetween users, including without limitation e-mails outside OLX’s e-mail\n system or other means of electronic communication, whether through the \nWebsite or another Third Party Website (defined below) or offerings, \ncomments, user postings, files, images, photos, video, sounds, business \nlistings/information and directory information or any other material \nmade available through the Website and the Service (\"Content\"), and that\n by using the Website and the Service, you may be exposed to Content \nthat is offensive, indecent, inaccurate, misleading, or otherwise \nobjectionable.  You acknowledge and agree that you are responsible for \nand must evaluate, and bear all risks associated with, the use of any \nContent, that you may not rely on said Content, and that under no \ncircumstances will OLX be liable in any way for the Content or for any \nloss or damage of any kind incurred as a result of the use of any \nContent listed, e-mailed or otherwise made available via the Service.  \nYou acknowledge and agree that OLX does not pre-screen or approve any \nContent, but that OLX has the right, in its sole and absolute \ndiscretion, to refuse, delete or move any Content that is or may be \navailable through the Service, for violating these Terms or for any \nother reason or no reason at all.  Furthermore, the Website and Content \navailable through the Website may contain links to other third party \nwebsites (“Third Party Websites”), which are completely unrelated to \nOLX. If you link to Third Party Websites, you may be subject to those \nThird Party Websites’ terms and conditions and other policies. OLX makes\n no representation or guarantee as to the accuracy or authenticity of \nthe information contained in any such Third Party Website, and your \nlinking to any other websites is completely at your own risk and OLX \ndisclaims all liability thereto.</p>\n<p>C.  You acknowledge and agree that you are solely responsible for \nyour own Content posted on, transmitted through, or linked from the \nService and the consequences of posting, transmitting, linking or \npublishing it.  More specifically, you are solely responsible for all \nContent that you upload, email or otherwise make available via the \nService. In connection with such Content posted on, transmitted through,\n or linked from the Service by you, you affirm, acknowledge, represent, \nand warrant that: (i) you own or have the necessary licenses, rights, \nconsents, and permissions to use such Content on the Service and Website\n (including without limitation all patent, trademark, trade secret, \ncopyright or other proprietary rights in and to any and all such \nContent) and authorize OLX to use such Content to enable inclusion and \nuse of the Content in the manner contemplated by the Service, the \nWebsite and these Terms; and (ii) you have the written consent, release,\n and/or permission of each and every identifiable individual person or \nbusiness in the Content to use the name or likeness of each and every \nsuch identifiable individual person or business to enable inclusion and \nuse of the Content in the manner contemplated by the Service, the \nWebsite and these Terms.  For clarity, you retain all of your ownership \nrights in your Content; however, by submitting the Content to OLX, you \nhereby grant to OLX an irrevocable, non-cancellable, perpetual, \nworldwide, non-exclusive, royalty-free, sub-licenseable, transferable \nlicense to use, reproduce, distribute, prepare derivative works of, \ndisplay, and perform the Content in connection with the Website and \nOLX's (and its successors') business, including without limitation for \nthe purpose of promoting and redistributing part or all of the Website \nand Content therein (and derivative works thereof) in any media formats \nand through any media channels now or hereafter known.  These rights are\n required by OLX in order to host and display your Content. Furthermore,\n by you posting Content to any public area of the Service, you agree to \nand do hereby grant to OLX all rights necessary to prohibit or allow any\n subsequent aggregation, display, copying, duplication, reproduction, or\n exploitation of the Content on the Service or Website by any party for \nany purpose. You also hereby grant each user of the Website a \nnon-exclusive license to access your Content through the Website. The \nforegoing license to each user granted by you terminates once you remove\n or delete such Content from the Website.</p>\n<p>D.  OLX does not endorse any Content or any opinion, statement, \nrecommendation, or advice expressed therein, and OLX expressly disclaims\n any and all liability in connection with user Content. OLX does not \npermit copyright infringing activities and infringement of intellectual \nproperty rights on the Website, and OLX may, at its sole discretion, \nremove any infringing Content if properly notified that such Content \ninfringes on another's intellectual property rights. OLX reserves the \nright to remove any Content without prior notice. <b>OLX may also \nterminate a user's access to the Website, if they are determined to be a\n repeat infringer. A repeat infringer is a user who has been notified of\n infringing activity more than twice and/or has had a user submission \nremoved from the Website more than twice.</b> Further, at its sole \ndiscretion, OLX reserves the right to decide whether any Content is \nappropriate and complies with these Terms for violations other than \ncopyright infringement and violations of intellectual property law, such\n as, but not limited to, pornography, obscene, libelous, or defamatory \nmaterial, or excessive length. OLX may remove such Content and/or \nterminate a user's access for uploading such material in violation of \nthese Terms at any time, without prior notice and at its sole \ndiscretion.</p>\n<p>E.  OLX may provide a video service to you if you upload photographs \nfor your ad.  By uploading your photographs, you irrevocably consent to \nthe use of your photographs for this service and represent and warrant \nthat you have all right, title and interest necessary to upload and use \nthe photographs on this service.  Under this service, using a third \nparty application or service, OLX may, at its discretion, create a video\n of your photographs, upload the video via <a href=\"http://www.youtube.com/\" target=\"_blank\">www.youtube.com</a> or another third party service provider, as determined by OLX at its discretion, and embed the video into your ad on OLX.</p>\n</li>\n<li>\n<h3>FEATURED ADS</h3>\n<p>OLX offers a service known as \"Featured Ads\" where users may pay a \nnon-refundable fee to have their ads posted in selected locations on the\n Website, thus potentially increasing an ads' visibility. In order to \npurchase a Featured Ad, you may be required to transmit certain \ninformation through a third party service provider, Click &amp; Buy, a \nThird Party Website, which may be governed by its own terms of use and \nother policies. OLX makes no representation or guarantee as to the \nsafety or security of the information transmitted to any Third Party \nWebsite, and your linking to any Third Party Website is completely at \nyour own risk, and OLX disclaims all liability related thereto.</p>\n<p><b>Featured Ads are subject to the Terms listed herein, as well as additional terms of service, which can be viewed</b> <a href=\"http://www.olx.com/featured_listings.php\">here</a></p>\n</li>\n<li>\n<h3>CONDUCT</h3>\n<p>You agree not to post, email, or otherwise make available Content:</p>\n<ul>\n	<li>that violates any law;</li>\n	<li>that is copyrighted or patented, protected by trade secret or \ntrademark, or otherwise subject to third party proprietary rights, \nincluding privacy and publicity rights, unless you are the owner of such\n rights or have\npermission or a license from their rightful owner to post the material \nand to grant OLX all of the license rights granted herein;</li>\n	<li>that infringes any of the foregoing intellectual property rights of\n any party, or is Content that you do not have a right to make available\n under any law or under contractual or fiduciary relationships;</li>\n	<li>that violates the Fair Housing Act, as amended, including its \nimplementing regulations and any Presidential Executive Order related \nthereto, by stating, in any notice or advertisements for the sale or \nrental of any dwelling not excluded by such Act, a discriminatory \npreference based sex, familial status or handicap, race, color, national\n origin, religion, (or violates any applicable state or local law \nprohibiting discrimination on the basis of aforementioned \ncharacteristics or any other characteristics);</li>\n	<li>that is harmful, abusive, unlawful, threatening, harassing, \ndefamatory, pornographic, libelous, invasive of another's privacy or \nother rights, or harms or could harm minors in any way;</li>\n	<li>that harasses, degrades, intimidates or is hateful toward an \nindividual or group of individuals on the basis of religion, gender, \nsexual orientation, race, ethnicity, age, or disability;</li>\n	<li>that violates any federal, state, or local equal employment laws, \nincluding but not limited to those prohibiting the stating, in any \nadvertisement for employment, a preference or requirement based on race,\n color, religion, sex, national origin, age, or disability of the \napplicant.</li>\n	<li>that includes personal or identifying information about another person without that person's explicit consent;</li>\n	<li>that impersonates any person or entity, including, but not limited \nto, an OLX employee, or falsely states or otherwise misrepresents an \naffiliation with a person or entity;</li>\n	<li>with respect to employers that employ four or more employees, that \nviolates any applicable provision of the Immigration and Nationality \nAct, including without limitation requiring U.S. citizenship or lawful \npermanent residency (green card status) as a condition for employment, \nunless otherwise required in order to comply with law, regulation, \nexecutive order, or federal, state, or local government contract.</li>\n	<li>that is false, deceptive, misleading, deceitful, misinformative, or constitutes \"bait and switch\" offer;</li>\n	<li>that constitutes or contains \"pyramid schemes,\" \"affiliate \nmarketing,\" \"link referral code,\" \"junk mail,\" \"spam,\" \"chain letters,\" \nor unsolicited advertisements of a commercial nature;</li>\n	<li>that constitutes or contains any form of advertising or \nsolicitation if (1) posted in areas or categories of the Website which \nare not designated for such purposes; or (2) e-mailed to OLX users who \nhave requested not to be contacted about other services, products or \ncommercial interests;</li>\n	<li>that includes links to commercial services or Third Party Websites, except as specifically allowed by OLX;</li>\n	<li>that advertises any illegal services or the sale of any items the \nsale of which is prohibited or restricted by applicable law, including \nwithout limitation items the sale of which is prohibited or regulated by\n New York law;</li>\n	<li>that contains software viruses or any other computer code, files or\n programs designed to interrupt, destroy or limit the functionality of \nany computer software or hardware or telecommunications equipment;</li>\n	<li>that disrupts the normal flow of dialogue with an excessive number \nof messages (flooding attack) to the Service, or that otherwise \nnegatively affects other users' ability to use the Service; or</li>\n	<li>that employs misleading email addresses, or forged headers or \notherwise manipulated identifiers in order to disguise the origin of \nContent transmitted through the Service.</li>\n</ul>\n<p>Additionally, you agree not to:</p>\n<ul>\n	<li>contact anyone who has asked not to be contacted, or make \nunsolicited contact with anyone for any commercial purpose; or to \n\"stalk\" or otherwise harass anyone;</li>\n	<li>make any libelous or defamatory comments or postings to or against anyone;</li>\n	<li>collect personal data about other users or entities for commercial or unlawful purposes;</li>\n	<li>use automated means, including spiders, robots, crawlers, data \nmining tools, or the like to download or scrape data from the Service, \nexcept for internet search engines (e.g,. Google) and non-commercial \npublic archives (e.g. archive.org) that comply with our robots.txt file;</li>\n	<li>post Content that is outside the local area or not relevant to the \nlocal area, repeatedly post the same or similar Content, or otherwise \nimpose unreasonable or disproportionately large loads on our servers and\n other infrastructure;</li>\n	<li>post the same item or service in multiple classified categories or forums, or in multiple metropolitan areas;</li>\n	<li>attempt to gain unauthorized access to computer systems owned or \ncontrolled by OLX or engage in any activity that disrupts, diminishes \nthe quality of, interferes with the performance of, or impairs the \nfunctionality of, the Service or the Website.</li>\n	<li>use any form of automated device or computer program (sometimes \nreferred to as \"flagging tools\") that enables the use of OLX's \"flagging\n system\" or other community control systems without each flag being \nmanually entered by a human that initiates the flag (an \"automated \nflagging device\"), or use any such flagging tool to remove posts of \ncompetitors, other third parties or to remove posts without a reasonable\n good faith belief that the post being flagged violates these Terms or \nany applicable law or regulation.</li>\n	<li>use any automated device or software that enables the submission of\n automatic postings on OLX without human intervention or authorship (an \n\"automated posting device\"), including without limitation, the use of \nany such automated posting device in connection with bulk postings, or \nfor automatic submission of postings at certain times or intervals; or</li>\n</ul>\n</li>\n<li>\n<h3>PAID POSTINGS</h3>\n<p>OLX may charge a fee to post Content in some areas of the Service. \nThe fee permits certain Content to be posted in a designated area of the\n Website. Each party posting Content to the Service is responsible for \nsaid Content and compliance with the Terms. Any such fees paid hereunder\n are non-refundable in the event any Content is removed from the Service\n for violating these Terms</p>\n</li>\n<li>\n<h3>POSTING AGENTS</h3>\n<p>As used herein, the term \"Posting Agent\" refers to a third-party \nagent, service, or intermediary that offers to post Content to the \nService on behalf of others. OLX prohibits the use of Posting Agents, \ndirectly or indirectly, without the express written permission of OLX  \nIn addition, Posting Agents are not permitted to post Content on behalf \nof others, directly or indirectly, or otherwise access the Service to in\n order to post Content on behalf of others, except with express written \npermission or license from OLX.</p>\n</li>\n<li>\n<h3>ACCESS TO THE SERVICE</h3>\n<p>OLX grants you a limited, revocable, non-exclusive license to access \nand use the Service for personal use.  This license granted herein does \nnot include any of the following: (a) access to or use of the Service by\n Posting Agents; or (b) any collection, aggregation, copying, \nduplication, display or derivative use of the Service nor any use of \ndata mining, robots, spiders, or similar data gathering and extraction \ntools for any purpose unless expressly permitted by OLX or as otherwise \nset forth in these Terms. Notwithstanding the foregoing, general purpose\n internet search engines and non-commercial public archives that gather \ninformation for the sole purpose of displaying hyperlinks to the \nService, provided they each do so from a stable IP address or range of \nIP addresses using an easily identifiable agent and comply with our \nrobots.txt file, may engage in the activities set forth in (b). For \npurposes of this exception, a \"general purpose internet search engine\" \ndoes not include a website or search engine or other service that \nspecializes in classified listings including any subset of classifieds \nlistings such as housing, for sale, jobs, services, or personals, or \nwhich otherwise provides classified ad listing services. The license set\n forth in this Section permits you to display on your website, or create\n a hyperlink thereto, individual postings on the Service so long as such\n use is for noncommercial and/or news reporting purposes only (e.g., for\n use in personal blogs or other personal online media). If the total \nnumber of such postings displayed on or linked to your website exceeds \nninety nine (99) postings, your use will be considered to be in \nviolation of these Terms, unless OLX expressly grants you permission \notherwise. You are also permitted to create a hyperlink to the home page\n of the Website so long as the link does not portray OLX, its employees,\n affiliates or agents in a false, confusing, misleading, derogatory, or \notherwise offensive matter. OLX may offer parts of the Service in RSS \nformat for the purpose of embedding individual RSS feeds into a personal\n website or blog, or view postings through third party software news \naggregators. OLX permits you to display, excerpt from, and link to any \nsuch RSS feeds on your personal website or personal blow, provided that \n(a) your use of the RSS feed is for personal, non-commercial purposes \nonly, (b) each title within an RSS feed is correctly linked back to the \noriginal post on the Service and redirects the user to the post when the\n user clicks on it, (c) you provide, in a conspicuous manner, proper \nattribution to 'OLX' as the source of the RSS feed, (d) your use or \ndisplay of the RSS feed does not suggest that OLX promotes or endorses \nany third party causes, opinions, ideas, web sites, products or \nservices, (e) you do not redistribute the RSS feed, and (f) your use \ndoes not overburden or otherwise slow the performance of OLX's systems. \nOLX reserves all rights in and to the content of any RSS feeds provided \nthrough the Service and may terminate any RSS feed at any time without \nnotice. Use of the Service beyond the scope of authorized access as set \nforth in these Terms immediately terminates any permission or license \ngranted herein. In order to collect, aggregate, copy, duplicate, display\n or make derivative use of the Service or any Content made available via\n the Service for other purposes (including commercial\npurposes) not stated herein, you must first obtain a license from OLX.\n</p>\n</li>\n<li>\n<h3>NOTIFICATION OF CLAIMS OF INFRINGEMENTS</h3>\n<p>If you are a copyright owner or an agent thereof and believe that any\n user Content or other content infringes upon your copyrights, you may \nsubmit a notification pursuant to the Digital Millennium Copyright Act \n(\"DMCA\") by providing our Copyright Agent with the following information\n in writing (see 17 U.S.C 512(c)(3) for further detail):</p>\n<p>1.A physical or electronic signature of a person authorized to act on\n behalf of the owner of an exclusive right that is allegedly infringed;</p>\n<p>2.Identification of the copyrighted work claimed to have been \ninfringed, or, if multiple copyrighted works at a single online site are\n covered by a single notification, a representative list of such works \nat that site;</p>\n<p>3.Identification of the material that is claimed to be infringing or \nto be the subject of infringing activity and that is to be removed or \naccess to which is to be disabled and information reasonably sufficient \nto permit OLX to locate the material;</p>\n<p>4.Information reasonably sufficient to permit OLX to contact you, \nsuch as an address, telephone number, and, if available, an electronic \nmail address;</p>\n<p>5.A statement that you have a good faith belief that use of the \nmaterial in the manner complained of is not authorized by the copyright \nowner, its agent, or the law; and</p>\n<p>6.A statement that the information in the notification is accurate, \nand under penalty of perjury, that you are authorized to act on behalf \nof the owner of an exclusive right that is allegedly infringed.</p>\n<p>OLX's designated Copyright Agent to receive notifications of claimed infringement is: <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Legal Issues report form</a>\n or OLX, S.A., Uriarte 2489 - 3rd Floor, Buenos Aires, Argentina, \nAttention: DMCA Complaint . For clarity, only DMCA notices should go to \nthe Copyright Agent; any other feedback, comments, requests for \ntechnical support, and other communications should be directed to OLX's \ncustomer service by clicking on the Contact Us link on the OLX website. \nYou acknowledge that if you fail to comply with all of the requirements \nof this Section 8, your DMCA notice may not be valid.</p>\n</li>\n<li>\n<h3>INTELLECTUAL PROPERTY RIGHTS</h3>\n<p>You acknowledge and agree that the materials on the Website, other \nthan the user Content that you licensed under Section 2(C) of the Terms,\n including without limitation, the text, software, scripts, graphics, \nphotos, sounds, music, videos, interactive features and the like \n(\"Materials\") and the trademarks, service marks and logos contained \ntherein (\"Marks\"), are owned by or licensed to OLX, and are subject to \ncopyright and other intellectual property rights under United States and\n foreign laws and international conventions. Materials on the Website \nare provided to you AS IS for your information and personal use only and\n may not be used, copied, reproduced, distributed, transmitted, \nbroadcast, displayed, sold, licensed, or otherwise exploited for any \nother purposes whatsoever without the prior written consent of the \nrespective owners. OLX reserves all rights not expressly granted herein \nto the Website and the Materials. You agree to not engage in the use, \ncopying, or distribution of any of the Materials other than as expressly\n permitted herein, including any use, copying, or distribution of \nMaterials of third parties obtained through the Website for any \ncommercial purposes. If you download or print a copy of the Materials \nfor personal use, you must retain all copyright and other proprietary \nnotices contained therein. You agree not to circumvent, disable or \notherwise interfere with security related features of the Website or \nfeatures that prevent or restrict use or copying of any Materials or \nenforce limitations on use of the Website or the Materials therein. The \nService is protected to the maximum extent permitted by copyright laws, \nother laws, and international treaties. Content displayed on or through \nthe Service is protected by copyright as a collective work and/or \ncompilation,\npursuant to copyrights laws, other laws, and international conventions. \nAny reproduction, modification, creation of derivative works from or \nredistribution of the Website, the Materials, or the collective work or \ncompilation is expressly prohibited. Copying or reproducing the Website,\n the Materials, or any portion thereof to any other server or location \nfor further reproduction or redistribution is expressly prohibited. You \nfurther agree not to reproduce, duplicate or copy Content or Materials \nfrom the Service, and agree to abide by any and all copyright notices \nand other notices displayed on the Service. You may not decompile or \ndisassemble, reverse engineer or otherwise attempt to discover any \nsource code contained in the Service. Without limiting the foregoing, \nyou agree not to reproduce, duplicate, copy, sell, resell or exploit for\n any commercial purposes, any aspect of the Service. OLX is a service \nmark registered with the U.S. Patent and Trademark Office and in various\n other jurisdictions.</p>\n</li>\n<li>\n<h3>USER SUBMISSIONS</h3>\n<p>You understand that when using the Website, you will be exposed to \nContent from a variety of sources, and that OLX is not responsible for \nthe accuracy, usefulness, safety, or intellectual property rights of or \nrelating to such Content, and you agree and assume all liability for \nyour use. You further understand and acknowledge that you may be exposed\n to Content that is inaccurate, offensive, indecent, or objectionable, \ndefamatory or libelous and you agree to waive, and hereby do waive, any \nlegal or equitable rights or remedies you have or may have against OLX \nwith respect thereto.</p>\n</li>\n<li>\n<h3>INDEMNITY</h3>\n<p>You agree to defend, indemnify and hold harmless OLX, its officers, \nsubsidiaries, affiliates, successors, assigns, directors, officers, \nagents, service providers, suppliers and employees, from and against any\n and all claims, damages, obligations, losses, liabilities, costs or \ndebt, and expenses (including but not limited to attorneys' fees) \narising from: (i) your use of and access to the Website and/or the \nService; (ii) your violation of any term of these Terms; (iii) your \nviolation of any third party right, including without limitation any \ncopyright, trademark, trade secret or other property, or privacy right; \nor (iv) any claim that your Content caused damage to a third party. This\n defense and indemnification obligation will survive termination, \nmodification or expiration of these Terms and your use of the Service \nand the Website.</p>\n</li>\n<li>\n<h3>NO SPAM POLICY</h3>\n<p>You understand and agree that sending unsolicited email \nadvertisements or other unsolicited communications to OLX email \naddresses or through OLX computer systems are expressly prohibited by \nthese Terms. You acknowledge and agree that from time to time OLX may \nmonitor email usage using human monitors or automated software to flag \ncertain words associated with spam or scams in emails that are sent \nbetween one user to another in the OLX e mail system. Any communication \nbetween yourself and any other user utilizing the communication features\n available on the Service and the Website may be used only in accordance\n with the Terms. Any unauthorized use of OLX computer systems is a \nviolation of these Terms and certain federal and state laws. Such \nviolations may subject the sender and his or her agents to civil and \ncriminal penalties.</p>\n</li>\n<li>\n<h3>DEALINGS WITH ORGANIZATIONS AND INDIVIDUALS</h3>\n<p>You acknowledge and agree that OLX shall not be liable for your \ninteractions with any organizations and/or individuals on the Website or\n through the Service. This includes, but is not limited to, payment and \ndelivery of goods and services, and any other terms, conditions, \nwarranties or representations associated with any interaction you may \nhave with other organizations and/or individuals. These dealings are \nsolely between you and such organizations and/or individuals. You agree \nand acknowledge that OLX shall not be responsible or liable for any loss\n or damage of any sort incurred as the result of any such dealings or \ninteractions. If there is a dispute between participants on the Website,\n or between users and any third party, you understand and agree that OLX\n is under no obligation to become involved in such dispute. In the event\n that you have a dispute with one or more other users, you hereby \nrelease OLX, its officers, employees, agents and successors from any and\n all claims, demands and damages (actual and consequential) of every \nkind or nature, known or unknown, suspected and unsuspected, disclosed \nand undisclosed, arising out of or in any way related to such disputes \nand/or our Service.</p>\n</li>\n<li>\n<h3>LIMITATION AND TERMINATION OF SERVICE</h3>\n<p>You acknowledge and agree that OLX may establish limits from time to \ntime concerning use of the Service, including among others, the maximum \nnumber of days that Content will be maintained or retained by the \nService, the maximum number and size of postings, e-mail messages, or \nother Content that may be transmitted or stored by the Service, and the \nfrequency with which you may access the Service or the Website. You \nacknowledge and agree that OLX has no responsibility or liability for \nthe deletion or failure to store any Content maintained or transmitted \nby the Website or the Service. You acknowledge and agree that OLX \nreserves the right at any time to modify or discontinue the Service (or \nany part thereof) with or without notice, and that OLX shall not be \nliable to you or to any third party for any such modification, \nsuspension or discontinuance of the Service. You acknowledge and agree \nthat OLX, in its sole and absolute discretion, has the right (but not \nthe obligation) to delete or deactivate your account, block your e-mail \nor IP address, or otherwise terminate your access to or use of the \nService (or any part thereof), immediately and without notice, and \nremove and discard any Content within the Service, for any reason or no \nreason at all, including, without limitation, if OLX believes that you \nhave violated these Terms. Further, you agree that OLX shall not be \nliable to you or any third-party for any termination of your access to \nthe Website or the Service. Further, you agree not to attempt to use the\n Service after any such termination.</p>\n</li>\n<li>\n<h3>DISCLAIMER OF WARRANTIES</h3>\n<p>YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT USE OF THE WEBSITE AND THE \nSERVICE IS ENTIRELY AT YOUR OWN RISK AND THAT THE WEBSITE AND THE \nSERVICE ARE PROVIDED ON AN \"AS IS\" OR \"AS AVAILABLE\" BASIS, WITHOUT ANY \nWARRANTIES OF ANY KIND. ALL EXPRESS AND IMPLIED WARRANTIES, INCLUDING, \nWITHOUT LIMITATION, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE, AND NON-INFRINGEMENT OF PROPRIETARY RIGHTS ARE \nEXPRESSLY DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. TO THE \nFULLEST EXTENT PERMITTED BY LAW OLX, ITS OFFICERS, DIRECTORS, EMPLOYEES,\n AND AGENTS DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, IN CONNECTION \nWITH THE WEBSITE AND YOUR USE THEREOF. OLX MAKES NO WARRANTIES OR \nREPRESENTATIONS ABOUT THE ACCURACY OR COMPLETENESS OF THE WEBSITE'S \nCONTENT OR THE CONTENT OF ANY THIRD PARTY WEBSITES LINKED TO THE WEBSITE\n AND ASSUMES NO LIABILITY OR RESPONSIBILITY FOR ANY (I) ERRORS, \nMISTAKES, OR INACCURACIES OF CONTENT, (II) PERSONAL INJURY OR PROPERTY \nDAMAGE, OF ANY NATURE WHATSOEVER, RESULTING FROM YOUR ACCESS TO AND USE \nOF THE WEBSITE AND SERVICE, (III) ANY UNAUTHORIZED ACCESS TO OR USE OF \nOUR SERVERS AND/OR ANY AND ALL PERSONAL INFORMATION AND/OR FINANCIAL \nINFORMATION STORED THEREIN, (IV) ANY INTERRUPTION OR CESSATION OF \nTRANSMISSION TO OR FROM THE WEBSITE, (IV) ANY BUGS, VIRUSES, TROJAN \nHORSES, OR THE LIKE WHICH MAY BE TRANSMITTED TO OR THROUGH THE WEBSITE \nBY ANY THIRD PARTY, AND/OR (V) ANY ERRORS OR OMISSIONS IN ANY CONTENT OR\n FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF \nANY CONTENT POSTED, EMAILED, COMMUNICATED, TRANSMITTED, OR OTHERWISE \nMADE AVAILABLE VIA THE WEBSITE OR THE SERVICE. OLX DOES NOT WARRANT, \nENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY FOR ANY PRODUCT OR SERVICE \nADVERTISED OR OFFERED BY A THIRD PARTY THROUGH THE WEBSITE OR ANY \nHYPERLINKED WEBSITE OR FEATURED IN ANY BANNER OR OTHER ADVERTISING, AND \nOLX WILL NOT BE A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING \nANY TRANSACTION BETWEEN YOU AND/OR OTHER USERS AND/OR THIRD-PARTY \nPROVIDERS OF PRODUCTS OR SERVICES. AS WITH THE PURCHASE OF A PRODUCT OR \nSERVICE THROUGH ANY MEDIUM OR IN ANY ENVIRONMENT, YOU SHOULD USE YOUR \nBEST JUDGMENT AND EXERCISE CAUTION WHERE APPROPRIATE.\n</p>\n</li>\n<li>\n<h3>LIMITATIONS OF LIABILITY</h3>\n<p>IN NO EVENT SHALL OLX, ITS OFFICERS, DIRECTORS, EMPLOYEES, OR AGENTS,\n BE LIABLE FOR DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR \nEXEMPLARY DAMAGES (EVEN IF OLX HAS BEEN ADVISED OF THE POSSIBILITY OF \nSUCH DAMAGES), RESULTING FROM ANY ASPECT OF YOUR USE OF THE WEBSITE OR \nTHE SERVICE, INCLUDING WITHOUT LIMITATION WHETHER THE DAMAGES ARISE FROM\n USE OR MISUSE OF THE WEBSITE OR THE SERVICE, FROM INABILITY TO USE THE \nWEBSITE OR THE SERVICE, OR THE INTERRUPTION, SUSPENSION, MODIFICATION, \nALTERATION, OR TERMINATION OF THE WEBSITE OR THE SERVICE. SUCH \nLIMITATION OF LIABILITY SHALL ALSO APPLY WITH RESPECT TO DAMAGES \nINCURRED BY REASON OF OTHER SERVICES OR PRODUCTS RECEIVED THROUGH OR \nADVERTISED IN CONNECTION WITH THE WEBSITE OR THE SERVICE OR ANY LINKS ON\n THE WEBSITE, AS WELL AS BY REASON OF ANY INFORMATION, OPINIONS OR \nADVICE RECEIVED THROUGH OR ADVERTISED IN CONNECTION WITH THE WEBSITE OR \nTHE SERVICE OR ANY LINKS ON THE OLX SITE. THESE LIMITATIONS SHALL APPLY \nTO THE FULLEST EXTENT PERMITTED BY LAW. YOU SPECIFICALLY ACKNOWLEDGE AND\n AGREE THAT OLX SHALL NOT BE LIABLE FOR USER SUBMISSIONS OR THE \nDEFAMATORY, OFFENSIVE, OR ILLEGAL CONDUCT OF ANY USER OR THIRD PARTY AND\n THAT THE RISK OF HARM OR DAMAGE FROM THE FOREGOING RESTS ENTIRELY WITH \nYOU. The Website is controlled and offered by OLX from its facilities in\n the United States of America. OLX makes no representations or \nwarranties that the Website is appropriate for use in other locations. \nThose who access or use the Website from other jurisdictions do so at \ntheir own volition and risk and are responsible for compliance with \nlocal law.\n</p>\n</li>\n<li>\n<h3>ASSIGNMENT</h3>\n<p>These Terms, and any rights and licenses granted hereunder, may not \nbe transferred or assigned by you, but may be assigned by OLX without \nrestriction. Any assignment or transfer by you shall be null and void.</p>\n</li>\n<li>\n<h3>ABILITY TO ACCEPT TERMS OF SERVICE</h3>\n<p>This Website is intended only for adults. You affirm that you are \neither more than 18 years of age, or an emancipated minor, or possess \nlegal parental or guardian consent, and are fully able and competent to \nenter into the terms, conditions, obligations, affirmations, \nrepresentations, and warranties set forth in these Terms, and to abide \nby and comply with these Terms. In any case, you affirm that you are \nover the age of 13, as the Website is not intended for children under \n13.</p>\n<p><u><b>NOTICE TO CHILDREN UNDER THE AGE OF 13 AND THEIR PARENTS OR GUARDIANS</b></u></p>\n<p><b>If you are under the age of 13, YOU MUST NOT USE THIS WEBSITE. \nPlease do not send us your personal information, including your email \naddresses, name, and/or contact information. If you want to contact us, \nyou may only do so through your parent or legal guardian.</b></p>\n</li>\n<li>\n<h3>GENERAL INFORMATION</h3>\n<p>These Terms and the other policies posted on the Website constitute \nthe complete and exclusive understanding and agreement between you and \nOLX and govern your use of the Service and the Website superseding all \nprior understandings, proposals, agreements, negotiations, and \ndiscussions between the parties, whether written or oral. The Terms and \nthe relationship between you and OLX shall be governed by the laws of \nthe State of New York without regard to its conflict of law principles. \nYou and OLX agree to submit to the personal and exclusive jurisdiction \nof the courts located within the State of New York. The failure of OLX \nto exercise or enforce any right or provision of the Terms shall not \nconstitute a waiver of such right or provision. If any provision of the \nTerms is found by a court of competent jurisdiction to be invalid \n(including, without limitation, because such provision is inconsistent \nwith the laws of another jurisdiction) or inapplicable, the parties \nnevertheless agree that the court should endeavor to give effect to the \nparties' intentions as reflected in the provision. If any provision or \nprovisions of these Terms is held to be invalid, illegal or \nunenforceable, the validity, legality and enforceability of the \nremaining provisions of the Terms shall not in any way be affected or be\n impaired. YOU AGREE THAT ANY CAUSE OF ACTION BROUGHT BY YOU AND ARISING\n OUT OF OR RELATED TO YOUR USE OF THE SERVICE AND/OR THE WEBSITE MUST \nCOMMENCE WITHIN ONE (1) YEAR AFTER THE CAUSE OF ACTION ACCRUES, EXCEPT \nTHAT OLX MAY COMMENCE ANY SUCH CAUSE OF ACTION IN ACCORDANCE WITH THE \nAPPLICABLE STATUTE OF LIMITATIONS UNDER NEW YORK LAW. OTHERWISE, SUCH \nCAUSE OF ACTION IS PERMANENTLY BARRED. These Terms shall inure to the \nbenefit of and be binding upon each party's successors and assigns.</p>\n</li>\n<li>\n<h3>VIOLATION OF TERMS AND LIQUIDATED DAMAGES</h3>\n<p>Please report any violations of the Terms that you become aware of by\n contacting us using the link at the bottom of the OLX homepage at <a target=\"_blank\" href=\"http://www.olx.com/\">www.olx.com</a>.\n Any failure to act by OLX with respect to a breach by you or others \ndoes not waive our right to act with respect to subsequent or similar \nbreaches by you or others. You understand and agree that, because \ndamages are often difficult or impossible to quantify, if actual damages\n cannot be reasonably calculated then you will be liable to pay OLX the \nfollowing as liquidated damages (and not a penalty):</p>\n<p>a. If OLX establishes any limits on the frequency with which you may \naccess the Service, or terminates your access to or use of the Service, \nyou agree to pay OLX ninety nine dollars ($99) for (i) each message \nposted in excess of such limits or (ii) for each day on which you access\n OLX in excess of such limits, whichever is higher.</p>\n<p>b. If you post a message that (1) impersonates any person or entity; \n(2) falsely states or otherwise misrepresents your affiliation with a \nperson or entity; or (3) that includes personal or identifying \ninformation about another person without that person's explicit consent,\n you agree that OLX in its sole discretion may disclose identifying \ninformation about you to the victim, and that should OLX bring a claim \nagainst you in court, that you will pay OLX one thousand one hundred \ndollars ($1,100) for each such message.</p>\n<p>c. If you are a Posting Agent that uses the Service in violation of \nthese Terms, in addition to any liquidated damages under Section 20(e) \nbelow you agree to pay OLX ninety nine dollars ($99) for each and every \nitem you post in violation of these Terms. A Posting Agent will also be \ndeemed an agent of the party engaging the Posting Agent to access the \nService, and such party (by engaging the Posting Agent in violation of \nthese Terms) agrees to pay OLX an additional ninety nine dollars ($99) \nfor each item posted by the Posting Agent on behalf of such party in \nviolation of these Terms.</p>\n<p>d. If you use OLX e-mail addresses or computer systems to send \nunsolicited e-mail advertisements to OLX e-mail addresses or any other \nparty, you agree to pay OLX thirty dollars ($30) for each such e-mail.</p>\n<p>e. If you post messages in violation of these Terms, other than as \ndescribed above, you agree to pay OLX ninety nine dollars ($99) for each\n such message. Notwithstanding the foregoing, OLX may, in its sole and \nabsolute discretion, issue a warning before assessing damages pursuant \nto this Section 20(e).</p>\n<p>f. If you aggregate, copy, display, mirror, reproduce, or otherwise \nexploit for any purpose any Content (except for your own Content) in \nviolation of these Terms without OLX's express written permission, you \nagree to pay OLX ten thousand dollars ($10,000) for each day on which \nyou engage in such conduct.</p>\n<p>If none of the foregoing clauses (a) – (f) are applicable, you agree \nto pay OLX’s actual damages, to the extent such actual damages can be \nreasonably calculated. Notwithstanding any other provision of these \nTerms, OLX retains the right to seek equitable remedies, including \nwithout limitation, specific performance of any term contained in these \nTerms, or a preliminary or permanent injunction against the breach or \nthreatened breach of any such term or in aid of the exercise of any \npower granted in these Terms, or any combination thereof, without the \nnecessity of posting a bond.</p>\n</li>\n<li>\n<h3>PRIVACY POLICY</h3>\n<p><u>A. Safe Harbor Certification</u></p>\n<p>OLX complies with the U.S.-EU Safe Harbor Framework and the \nU.S.-Swiss Safe Harbor Framework as set forth by the U.S. Department of \nCommerce regarding the collection, use, and retention of personal \ninformation from European Union member countries and Switzerland.  OLX \nhas certified that it adheres to the Safe Harbor Privacy Principles of \nnotice, choice, onward transfer, security, data integrity, access, and \nenforcement.  To learn more about the Safe Harbor program, and to view \nOLX’s certification, please visit http://www.export.gov/safeharbor/</p>\n<p><u>B. Type of Information Collected:</u></p>\n<p>When you visit the Website, we may collect certain non-personal \ninformation such as your Internet Protocol (“IP”) address, operating \nsystem, browser type, and Internet service provider. This type of \ninformation does not identify you personally. When you register with the\n Website, we may also collect personal information that you provide such\n as your name, mailing address, email address, home country, and zip \ncode (“Registration Information”). You have the option of also providing\n to us your phone and fax numbers, gender, age, and/or company name if \nyou choose to register with OLX. If you provide your phone number, it \nwill be displayed in your posting. We may also collect additional \ninformation that our users provide, such as new or deleted postings, new\n or deleted comments, keyword searches, scam reports and new contact \nsellers. We use a third-party credit card processing company for \npurchases, and other third party companies to monitor site traffic, \nwhich may, in some instances, store your information (see Section 21(D) \nbelow). When you visit the Website and/or use the OLX mobile \napplication, OLX may use GPS technology (or other similar technology) to\n determine your current location in order to determine the city you are \nlocated within and display a location map with relevant advertisements. \nOLX will not share your current location with other OLX users or \npartners. If you do not want OLX to use your location for the purposes \nset forth above, you should turn off the location services for the OLX \napplication located in your OLX account settings or in your mobile phone\n settings. <b>By using this Website or the Service, you consent to \ncollection, storage, and use of the personal information you provide for\n any of the Services that we offer, and you consent to our collection of\n any changes or updates that you may provide to any information you \nprovide that is collected by OLX.</b>\n</p>\n<p><u>C. Cookies</u></p>\n<p>We may use cookies to manage our users’ sessions and to store \npreferences, tracking information, and language selection. Cookies may \nbe used whether you register with us or not. “Cookies” are small text \nfiles transferred by a web server to your hard drive and thereafter \nstored on your computer. The types of information a cookie collects \ninclude the date and time you visited, your browsing history, your \npreferences, and your username. In some instances, our third-party \nservice providers may use cookies on the Website. We cannot control or \naccess cookies used by third- party service providers. This Privacy \nPolicy covers only Cookies used by us, and not any cookies used by third\n parties. You have the ability to either accept or decline the use of \ncookies on your computer, whether you are registered with us or not. \nTypically, you can configure your browser to not accept cookies. \nHowever, declining the use of cookies may limit your access to certain \nfeatures of the Website. For example, you may have difficulty logging in\n or using certain interactive features of the Website, such as the OLX \nForum or Comments feature.</p>\n<p><u>D. Third Parties</u></p>\n<p>We use third-party service providers to process purchases you make \nand to monitor our users’ interests. In addition, the Website may \noccasionally contain links to Third-Party Sites. If you click on the \nlinks to Third-Party Websites, you leave the Website. We are not \nresponsible for the content of these Third-Party Websites or for the \nsecurity of your personal information when you use the Third Party \nWebsites. These third-party service providers and Third-Party Sites may \nhave their own privacy policies governing the storage and retention of \nyour personal information that you may be subject to. They may collect \ninformation such as your IP address, browser specification, or operating\n system. This Privacy Policy does not govern personal information \nprovided to, stored on, or used by these third-party providers and \nThird-Party Sites. We recommend that when you enter a Third-Party Site, \nyou review the Third Party Site’s privacy policy as it relates to \nsafeguarding your personal information. We use third-party advertising \ncompanies to serve ads when you visit the Website. These companies may \nuse information (not including your name, address, email address, or \ntelephone number) about your visits to the Website and Third-Party \nWebsites in order to provide advertisements about goods and services of \ninterest to you. On the Website, Google, as a third-party vendor, uses \nCookies to serve ads. Google’s use of the DoubleClick DART Cookie \nenables it to serve ads to the Website’s users based on their visit to \nthe Websites and Third-Party Websites. For more information on the DART \nCookie see: <a target=\"_blank\" href=\"http://www.doubleclick.com/privacy/faq.aspx\">http://www.doubleclick.com/privacy/faq.aspx</a>. You may opt out of the use of the DART Cookie by Google by visiting the Google Ad and Content Network Privacy Policy at: <a target=\"_blank\" href=\"http://www.google.com/privacy_ads.html\">http://www.google.com/privacy_ads.html</a>. You may opt out of targeting advertising for all NAI member ad networks by visiting: <a target=\"_blank\" href=\"http://www.networkadvertising.org/\">http://www.networkadvertising.org/</a>.\n By publishing an ad on the Website, you acknowledge and agree that the \nContent is public and accessible by any third party and that they may \nappear in search engine results (such as Yahoo!, MSN, Google, Altavista,\n and other search engines) and in the cache of those search engines, in \nfeeds and Third-Party Websites pursuant to cobranding agreements, and \nthat it is the sole responsibility of each of those search engines, \nThird-Party Websites or RSS web feed resources to update and/or to \nremove Content from their indexes and their cache. You agree and \nacknowledge that OLX is not be liable for the information published in \nsearch results or by any Third-Party Website that carries OLX postings.\n</p>\n<p><u>E. How Your Information is Used</u></p>\n<p>We may use information provided by you to: (i) enforce our Terms of \nUse, monitor user activity, such as keyword searches or new postings, \nand more effectively manage traffic on the Website; (ii) provide \ncustomer services, create and manage user accounts; and (iii) assist you\n with technical difficulties.  Also, we may share with third-party \nservice providers certain information, such as your browser capabilities\n or operating system, that we have collected in order to better \nunderstand which advertisements and services may interest you. We may \nblock users located in certain countries from using the Website. We may \nretain such information for as long as is required to fulfill our \nbusiness objective, even after your account is terminated.</p>\n<p><u>F. Protecting Your Personal Information</u></p>\n<p>You are a valued customer, and we recognize that protecting your \nprivacy is important to you. For this reason, we are committed to \nprotecting the personal information you provide in a variety of ways. We\n do not directly process any payments and do not store your credit card \ninformation. Secured socket layer (“SSL”) technology is used for \nprocessing payment transactions with third- party service provider \npartners, such as Click &amp; Buy, PayPal, and DineroMail. Your \nRegistration Information may be protected by a unique customer password \nand user ID. You should not disclose your password information to anyone\n and you should always remember to log off if using a shared computer. \nLastly, you may utilize the Website as an anonymous user by not \nregistering.  We have taken certain security protections in safeguarding\n your personal information. However, as with most electronic \ntransactions, no method is 100% safe. While we strive to use a \ncommercially acceptable means to protect the personal information you \nprovide, we cannot guarantee its security. Therefore, you acknowledge \nand agree that we assume no liability regarding the theft, loss, \nalteration or misuse of personal or other information or Content, \nincluding, without limitation, such information that has been provided \nto third parties or other users, or with regards to the failure of a \nthird party to abide by the agreement between us and such third party. \nYou may participate in our Forum or utilize our Comments feature. For \npostings to the Forum, your username will be posted. For postings using \nthe Comments feature, your name and email will only be posted if you \nprovide it in the comment. We strongly discourage posting any \ninformation on these features or in any Content posted by you that you \ndo not want others to see. You agree that you are responsible for \nmaintaining the confidentiality of your username and password, and all \nuses of your account, whether or not you have authorized such use.\n</p>\n<p><u>G. Accessing and Modifying Personal Information and Communication Preferences</u></p>\n<p>You may access, remove, review, and/or make changes to personal information that you have provided to us <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Contact Support form</a>.\n You need not register in order to post or respond to advertisements on \nthe Website. If you register, we may send you certain notifications, \nadvertisements, promotions, and specials. We may also send you any \nlegally required notifications and certain notifications, including but \nnot limited to, service related notices or notices regarding a change to\n any of our policies. For example, we may send you a notice regarding \nserver problems or scheduled maintenance to the Website. In order to \nopt-out of receiving these notices, you may need to deactivate your \naccount. You can opt out of certain e-mail communications from us, \nincluding our newsletters, advice on buying and selling on the Website, \nnotifications that a user has commented on your posting, and \nnotifications that you can refresh your posting. We will not change your\n preferences without your consent.  You cannot opt out of receiving \ntransactional communications from OLX related to your account.</p>\n<p><u>H. Disclosures</u></p>\n<p>On rare occasions, we may be required to disclose your personal \ninformation due to legal or regulatory requirements. In such instances, \nwe reserve the right to disclose your personal information as required \nin order to comply with our legal obligations, including but not limited\n to complying with court orders, warrants, subpoenas, service of process\n requirements, or discovery requests. We may also disclose information \nabout our users to law enforcement officers or others, in the good faith\n belief that such disclosure is reasonably necessary to enforce these \nTerms and/or Privacy Policy; respond to claims that any Content violates\n the rights of third-parties; or protect the rights, property, or \npersonal safety of OLX, our users or the general public.  If \nsubstantially all of our assets are sold or merged into another company,\n we will notify you of the transaction. The acquiring company shall be \ngiven access to your personal information without your consent. If we \nsell only a part of our business, the acquiring entity shall have access\n to your personal information without your consent and we may send you a\n notice regarding this sale.</p>\n<p><u>I. Notification of Changes</u></p>\n<p>We reserve the right to change these Terms from time to time, and at \nour sole discretion. We may send you a notice regarding material changes\n to these Terms, including the Privacy Policy or the Website. You should\n make note of the “last updated date” at the beginning of the Terms. \nWith this information, you should be able to identify if the Terms have \nbeen updated recently.</p>\n<p><u>J. Disputes</u></p>\n<p>Any disputes regarding your privacy are subject to the Terms, \nincluding but not limited to any provisions related to indemnification, \nlimitations on damages, and choice of law.</p>\n<p><u>K. Important Notices to Non-U.S. Residents</u></p>\n<p>OLX abides by the Safe Harbor principles set forth by the U.S. \nDepartment of Commerce regarding the collection, use, and retention of \napplicable data from the European Union.  However, it is important to \nnote that the Website and its servers are operated in the United States.\n  If you are located outside of the United States, please be aware that \nany personal information you provide to us will be transferred to the \nUnited States.  By using the Website and by providing us personal \ninformation when using our services, you consent to this transfer and \nour use of the information and data provided by you in accordance with \nthis Privacy Policy.</p>\n<p>In order to comply with the Safe Harbor framework, OLX commits to the\n resolution of complaints about your privacy and our collection or use \nof your personal information.  We have also committed to resolve any \ncomplaints by European Union citizens relating to this Privacy Policy, \nwhich cannot be resolved directly with our company, through the Council \nof Better Business Bureaus, Inc.’s Safe Harbor Privacy Dispute \nResolution Procedures.</p>\n<p>If you have any questions regarding this Privacy Policy, please \ncontact us as described in the “How to Contact Us” section. We will \ninvestigate your question, respond to your inquiry, and attempt to \nresolve any concerns regarding your privacy question. If you do not \nreceive acknowledgement of your complaint or if your complaint is not \nsatisfactorily addressed by OLX, you should then contact the Council of \nBetter Business Bureaus, Inc. as set forth below.</p>\n<p>In compliance with the US-EU Safe Harbor Principles, OLX commits to \nresolve complaints about your privacy and our collection or use of your \npersonal information. European Union citizens with inquiries or \ncomplaints regarding this privacy policy should first contact OLX as \ndescribed in the “How to Contact Us” section.</p>\n<p>OLX has further committed to refer unresolved privacy complaints \nunder the US-EU Safe Harbor Principles to an independent dispute \nresolution mechanism, the BBB EU SAFE HARBOR, operated by the Council of\n Better Business Bureaus. If you do not receive timely acknowledgment of\n your complaint, or if your complaint is not satisfactorily addressed by\n OLX, please visit the BBB EU SAFE HARBOR web site at \nwww.bbb.org/us/safe-harbor-complaints for more information and to file a\n complaint.</p>\n\n<p><u>L.How to Contact Us</u></p>\n<p>If you have questions about this Privacy Policy, please contact OLX <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Legal Issues report form</a> with “Privacy Policy” in the subject line.</p>\n</li><p></p>\n    </div>\n</section>";
  });

templates["basic/partials/actions"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n	<tr>\n        <td align=\"center\" style=\"border-top: solid thin #808080;\">\n            <small style=\"display: block;\"><a href=\"/choosecountry\">Cambiar País</a> | <a href=\"/login\">Entrar</a> | <a href=\"/registration\">Registrarte</a></small>\n        </td>\n    </tr>\n</table>\n";
  });

templates["basic/partials/head"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<title>OLX Mobile</title>\n<meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable: no\" />\n<style type=\"text/css\">\n	a {text-decoration: none;}\n	.category-link:hover, .category-link:focus {outline: 0px; background-color: #EEE;}\n	.itemDescription p {margin: 0;}\n	.itemReplyFeedback br {display: none;}\n</style>";
  });

templates["basic/partials/header"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" bgcolor=\"#0075BD\">\n    <tr>\n        <td>\n            <a style=\"display: block;\" tabindex=\"1\" href=\"/\">\n                <img border=\"0\" align=\"top\" style=\"display: block;\" alt=\"OLX\" src=\"http://m.olx.com.ar/images/wap/olxHeader.gif\">\n            </a>\n        </td>\n        <td width=\"100%\">&nbsp;</td>\n    </tr>\n</table>\n";
  });

templates["basic/partials/languages"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n    <tr>\n        <td align=\"center\" style=\"border-top: solid thin #808080;\">\n            <small style=\"display: block;\">Español | <a href=\"?language=1\" rel=\"nofollow\">English</a></small>\n        </td>\n    </tr>\n</table>\n";
  });

templates["basic/partials/layout"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, helperMissing=helpers.helperMissing, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n	<head>\n	    ";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "basic/partials/head", options) : helperMissing.call(depth0, "partial", "basic/partials/head", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</head>\n	<body style=\"margin: 0; padding: 0; font-family: Sans-Serif;\" text=\"#666666\" link=\"#0066FF\" vlink=\"#0066FF\">\n	    ";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "basic/partials/header", options) : helperMissing.call(depth0, "partial", "basic/partials/header", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	    \n\n	    ";
  if (helper = helpers.body) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.body); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	    \n	    ";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "basic/partials/actions", options) : helperMissing.call(depth0, "partial", "basic/partials/actions", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	    ";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "basic/partials/languages", options) : helperMissing.call(depth0, "partial", "basic/partials/languages", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	    "
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "footer/index", options) : helperMissing.call(depth0, "view", "footer/index", options)))
    + "\n	</body>\n</html>\n";
  return buffer;
  });

templates["basic/partials/location"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n    <tr>\n        <td style=\"border-top: solid thin #808080; border-bottom: solid thin #B0B0B0; padding:1px 4px;\">\n            <small><a href=\"/location/page/1\">Selecciona una ciudad</a></small>\n        </td>\n    </tr>\n</table>\n";
  });

templates["basic/partials/search"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n    <tr>\n        <td style=\"border-top: solid thin #B0B0B0;\">\n            <small>¿Qué estás buscando?</small>\n            <form action=\"/search/page/1\">\n                <input type=\"text\" name=\"search\" value=\"\">\n                <input type=\"submit\" name=\"search_button\" value=\"Buscar\">\n            </form>\n        </td>\n    </tr>\n</table>\n";
  });

templates["basic/post/form"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, helperMissing=helpers.helperMissing, self=this, functionType="function", escapeExpression=this.escapeExpression;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n                    ";
  stack1 = (helper = helpers.getFieldTemplate || (depth1 && depth1.getFieldTemplate),options={hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data},helper ? helper.call(depth0, (depth1 && depth1.template), options) : helperMissing.call(depth0, "getFieldTemplate", (depth1 && depth1.template), options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n                        ";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.fieldPath), options) : helperMissing.call(depth0, "partial", (depth0 && depth0.fieldPath), options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                        <br style=\"display: none;\" />\n                    ";
  return buffer;
  }

function program4(depth0,data,depth1) {
  
  var buffer = "", stack1;
  buffer += "\n                    ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.values), {hash:{},inverse:self.noop,fn:self.programWithDepth(5, program5, data, depth1),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  return buffer;
  }
function program5(depth0,data,depth2) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n                        ";
  stack1 = (helper = helpers.getFieldTemplate || (depth2 && depth2.getFieldTemplate),options={hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data},helper ? helper.call(depth0, (depth2 && depth2.template), options) : helperMissing.call(depth0, "getFieldTemplate", (depth2 && depth2.template), options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                    ";
  return buffer;
  }
function program6(depth0,data) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n                            ";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.fieldPath), options) : helperMissing.call(depth0, "partial", (depth0 && depth0.fieldPath), options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                        ";
  return buffer;
  }

function program8(depth0,data,depth1) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n                    ";
  stack1 = (helper = helpers.getFieldTemplate || (depth1 && depth1.getFieldTemplate),options={hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data},helper ? helper.call(depth0, (depth1 && depth1.template), options) : helperMissing.call(depth0, "getFieldTemplate", (depth1 && depth1.template), options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  return buffer;
  }
function program9(depth0,data) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n                        ";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.fieldPath), options) : helperMissing.call(depth0, "partial", (depth0 && depth0.fieldPath), options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                    ";
  return buffer;
  }

function program11(depth0,data) {
  
  var buffer = "";
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</small>\n                ";
  return buffer;
  }

  buffer += "<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"width: 100%;\">\n    <tbody><tr>\n        <td style=\"padding: .25em .5em; border-top: solid thin #808080;\">\n            <strong style=\"color: #0075BD;\">Publicar</strong>\n            <br>\n            <small>Detalles de Publicación</small>\n        </td>\n    </tr>\n</tbody></table>\n<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"width: 100%;\">\n    <tr>\n        <td style=\"padding: .5em; border-top: solid thin #808080;\">\n            <small>\n                <strong>Categoría::</strong>\n                <span>Cat name</span>\n            </small>\n            <br />\n            <br style=\"display: none;\" />\n            <form id=\"postingForm\" action=\"/post\" method=\"POST\">\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.fields)),stack1 == null || stack1 === false ? stack1 : stack1.productDescription), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.fields)),stack1 == null || stack1 === false ? stack1 : stack1.categoryAttributes), {hash:{},inverse:self.noop,fn:self.programWithDepth(4, program4, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.fields)),stack1 == null || stack1 === false ? stack1 : stack1.contactInformation), {hash:{},inverse:self.noop,fn:self.programWithDepth(8, program8, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.errField), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.errMsg), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                <input type=\"hidden\" name=\"postingSession\" value=\"";
  if (helper = helpers.postingSession) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.postingSession); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                <input type=\"hidden\" name=\"intent\" value=\"";
  if (helper = helpers.intent) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.intent); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                <input type=\"hidden\" name=\"location\" value=\"";
  if (helper = helpers.location) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.location); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                <input type=\"hidden\" name=\"languageId\" value=\"";
  if (helper = helpers.language) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.language); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                <input type=\"hidden\" name=\"languageCode\" value=\"";
  if (helper = helpers.languageCode) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.languageCode); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                <input type=\"hidden\" name=\"platform\" value=\"";
  if (helper = helpers.platform) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.platform); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                <input type=\"hidden\" name=\"category[parentId]\" value=\"";
  if (helper = helpers.category) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.category); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                <input type=\"hidden\" name=\"category[id]\" value=\"";
  if (helper = helpers.subcategory) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.subcategory); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                <span style=\"display: block;\"><input type=\"submit\" value=\"Post Ad\"></span>\n            </form>\n        </td>\n    </tr>\n</table>";
  return buffer;
  });

templates["basic/post/home_select"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, self=this;

function program1(depth0,data) {
  
  
  return "\"/post\"";
  }

function program3(depth0,data) {
  
  
  return "\"/location?target=post\"";
  }

  buffer += "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n    <tr>\n        <td>\n            <table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n                <tr>\n                    <td bgcolor=\"#FF6600\" align=\"center\">\n                        <font size=\"2\" style=\"display: block;\">\n                            <a style=\"display: block;\" href=";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n                                <strong><font color=\"#FFFFFF\">&nbsp;&nbsp;Publica tu anuncio gratis&nbsp;&nbsp;</font></strong>\n                            </a>\n                        </font>\n                    </td>\n                </tr>\n            </table>\n        </td>\n    </tr>\n</table>\n";
  return buffer;
  });

templates["basic/post/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n            <tr>\n                <td style=\"border-top: solid thin #808080;\">\n                    <a style=\"display: block;\" href=\"post/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                        <small style=\"display: block;\"><img border=\"0\" alt=\"\" src=\"\" />";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</small>\n                    </a>\n                </td>\n            </tr>\n        ";
  return buffer;
  }

  buffer += "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n	<tr>\n		<td>\n			<strong style=\"display: block;\">Post an ad</strong>\n		</td>\n	</tr>\n    <tr>\n        <td>\n            <strong style=\"display: block;\">Select a category</strong>\n        </td>\n    </tr>\n    <table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" align=\"left\">\n        ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.categories)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </table>\n</table>";
  return buffer;
  });

templates["basic/post/subcat"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n            <tr>\n                <td style=\"border-top: solid thin #808080;\">\n                    <a style=\"display: block;\" href=\"/post/"
    + escapeExpression(((stack1 = (depth1 && depth1.categoryId)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                        <small style=\"display: block;\"><img border=\"0\" alt=\"\" src=\"\" />";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</small>\n                    </a>\n                </td>\n            </tr>\n        ";
  return buffer;
  }

  buffer += "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n	<tr>\n		<td>\n			<strong style=\"display: block;\">Post an ad</strong>\n		</td>\n	</tr>\n    <tr>\n        <td>\n            <strong style=\"display: block;\">Select a subcategory</strong>\n        </td>\n    </tr>\n    <table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" align=\"left\">\n        ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.subcategories), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </table>\n</table>";
  return buffer;
  });

templates["basic/user/favorites"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n			<tr>\n	            <td style=\"border-top: solid thin #808080;\">\n	                <a style=\"display: block;\" tabindex=\"1\" href=\"/items/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n	                	<small style=\"display: block;\">\n	                		";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.thumbnail), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	                    	";
  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + " - "
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n	                	</small>\n	                </a>\n	            </td>\n	        </tr>\n        ";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return "\n	                			*\n	                		";
  }

  buffer += "<h1>Favorites</h1>\n<table width=\"100%\" border=\"0\" align=\"left\" cellspacing=\"0\" cellpadding=\"4\">\n	<tbody>\n		";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.favorites), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</tbody>\n</table>";
  return buffer;
  });

templates["basic/user/login"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</small>\n                ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    <small style=\"display: block; color: blue;\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailMsg)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</small>\n                ";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailErr)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</small>\n                ";
  return buffer;
  }

  buffer += "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n	<tr>\n		<td>\n			<strong style=\"display: block;\">Login</strong>\n		</td>\n	</tr>\n	<tr>\n		<td>\n			<a href=\"/registration\" style=\"display: block;\">If you don't have an account, click here</a>\n		</td>\n	</tr>\n    <tr>\n        <td style=\"border-top: solid thin #B0B0B0;\">\n            <form action=\"/login\" method=\"POST\">\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.err), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                <span style=\"display: block;\">Username or Email</span>\n                <input type=\"text\" name=\"usernameOrEmail\">\n                <span style=\"display: block;\">Password</span>\n                <input type=\"password\" name=\"password\">\n                <span style=\"display: block;\"><input type=\"submit\" value=\"Login\"></span>\n            </form>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <strong style=\"display: block;\">Already posted an ad</strong>\n        </td>\n    </tr>\n    <tr>\n        <td style=\"border-top: solid thin #B0B0B0;\">\n            <form action=\"/loginAnon\" method=\"POST\">\n                ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailMsg), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailErr), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                <span style=\"display: block;\">Enter the email that you used to post your ad and receive the link to My OLX by email.</span>\n                <input type=\"text\" name=\"email\">\n                <span style=\"display: block;\"><input type=\"submit\" value=\"Send\"></span>\n            </form>\n        </td>\n    </tr>\n</table>";
  return buffer;
  });

templates["basic/user/my-ads"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n			<tr>\n	            <td style=\"border-top: solid thin #808080;\">\n	                <a style=\"display: block;\" tabindex=\"1\" href=\"/items/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n	                	<small style=\"display: block;\">\n	                		";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.thumbnail), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	                    	";
  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + " - "
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n	                	</small>\n	                </a>\n	            </td>\n	        </tr>\n        ";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return "\n	                			*\n	                		";
  }

  buffer += "<h1>My Ads</h1>\n<table width=\"100%\" border=\"0\" align=\"left\" cellspacing=\"0\" cellpadding=\"4\">\n	<tbody>\n		";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.myAds), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</tbody>\n</table>";
  return buffer;
  });

templates["basic/user/registration"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</small>\n                ";
  return buffer;
  }

  buffer += "<table width=\"100%\" cellspacing=\"0\" cellpadding=\"4\" border=\"0\" bgcolor=\"#DDDDDD\">\n	<tr>\n		<td>\n			<strong style=\"display: block;\">Register</strong>\n		</td>\n	</tr>\n	<tr>\n		<td>\n			<a href=\"/login\" style=\"display: block;\">If you already have an account, click here</a>\n		</td>\n	</tr>\n    <tr>\n        <td style=\"border-top: solid thin #B0B0B0;\">\n            <form action=\"/registration\" method=\"POST\">\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.err), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            	<span style=\"display: block;\">Username</span>\n                <input type=\"text\" name=\"username\">\n            	<span style=\"display: block;\">Email</span>\n                <input type=\"text\" name=\"email\">\n            	<span style=\"display: block;\">Password</span>\n                <input type=\"password\" name=\"password\">\n                <span style=\"display: block;\">\n                    <input type=\"checkbox\" name=\"agreeTerms\">\n                    I agree to the <a href=\"/terms\">Terms and Conditions</a> of OLX \n                </span>\n            	<span style=\"display: block;\"><input type=\"submit\" value=\"Register\"></span>\n            </form>\n        </td>\n    </tr>\n</table>";
  return buffer;
  });

templates["desktop/categories/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n 						<li>\n							<a href=\"/items?categoryId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&location="
    + escapeExpression(((stack1 = ((stack1 = (depth1 && depth1.params)),stack1 == null || stack1 === false ? stack1 : stack1.location)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a>\n						</li>\n					";
  return buffer;
  }

  buffer += "<h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1>\n\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n			<div id='subcategories.models'>\n			  	<ul>\n					";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.children), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				</ul>\n			</div>\n		</section>\n	</div>\n</div>";
  return buffer;
  });

templates["desktop/categories/menu"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n			<li class=\"menuItem\">\n				<a class=\"menuItemLink\" href=\"categories/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "?location="
    + escapeExpression(((stack1 = (depth1 && depth1.siteLocation)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ", <small class=\"counter\">";
  if (helper = helpers.counter) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.counter); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</small></a>\n			</li>\n		";
  return buffer;
  }

  buffer += "<nav>\n	<h4 class=\"navTitle\">Categoría</h4>\n	<ul>\n		";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.categories)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</ul>\n</nav>";
  return buffer;
  });

templates["desktop/categories/show"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n			<li><a href=\"/items?categoryId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&location="
    + escapeExpression(((stack1 = ((stack1 = (depth1 && depth1.params)),stack1 == null || stack1 === false ? stack1 : stack1.location)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a></li>\n		";
  return buffer;
  }

  buffer += "<!--h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1-->\n\n\n<section>\n  	<ul id=\"subCategory\">\n		";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.children), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</ul>\n</section>\n";
  return buffer;
  });

templates["desktop/home/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "			\n			<div class=\"listItem\">\n				<div class=\"listItemContainer listItemContainerImage\">\n					<img class=\"listItemImage\" src=\"";
  if (helper = helpers.thumbnail) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.thumbnail); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n				</div>\n				<div class=\"listItemContainer listItemContainerData\">\n					<div class=\"listItemData\">\n						<a class=\"listItemTitle\" href=\"items/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a>\n					</div>\n				</div>\n				<div class=\"listItemContainer listItemContainerPrice\">\n					<div class=\"listItemPrice\">\n						<strong>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</strong>\n					</div>\n				</div>\n				<div class=\"listItemContainer listItemContainerDate\">\n					<div class=\"listItemDate\">\n						<small>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.date)),stack1 == null || stack1 === false ? stack1 : stack1.since)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</small>\n					</div>\n				</div>\n			</div>\n		";
  return buffer;
  }

  buffer += " <div id=\"menu\">\n	"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "categories/menu", options) : helperMissing.call(depth0, "view", "categories/menu", options)))
    + "\n </div>\n <div id=\"main\">\n	<section id=\"location\">\n		"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "location/select", options) : helperMissing.call(depth0, "view", "location/select", options)))
    + "\n	</section>\n	<section id=\"newAds\">\n		";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.whatsNewItems), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</section>\n</div>";
  return buffer;
  });

templates["desktop/items/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n	<section>	\n		<a href=\"/items/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.thumbnail), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			\n			<p>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.date)),stack1 == null || stack1 === false ? stack1 : stack1.since)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " in ";
  if (helper = helpers.displayLocation) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.displayLocation); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</p>\n			<div class=\"title\"><h2><span><span>";
  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span></span></h2></div>\n			";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n		</a>\n	</section>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		        <div class=\"image filled\" style=\"background-image:url(";
  if (helper = helpers.thumbnail) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.thumbnail); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "); ?>);\"></div>\n			";
  return buffer;
  }

function program4(depth0,data) {
  
  
  return "\n				<div class=\"image\"></div>\n			";
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				<h3>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h3>\n			";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n";
  return buffer;
  });

templates["desktop/items/search"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<h3>Results for: ";
  if (helper = helpers.searchTerm) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.searchTerm); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n\n"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{
    'items': ((depth0 && depth0.items))
  },data:data},helper ? helper.call(depth0, "items/index", options) : helperMissing.call(depth0, "view", "items/index", options)))
    + "\n";
  return buffer;
  });

templates["desktop/items/show"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n		";
  stack1 = (helper = helpers.ifC || (depth0 && depth0.ifC),options={hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data},helper ? helper.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images)),stack1 == null || stack1 === false ? stack1 : stack1.length), "==", 1, options) : helperMissing.call(depth0, "ifC", ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images)),stack1 == null || stack1 === false ? stack1 : stack1.length), "==", 1, options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			<div class=\"onePicture\">\n				<div class=\"slide\">\n		          <div style=\"background-image: url('"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images)),stack1 == null || stack1 === false ? stack1 : stack1[0])),stack1 == null || stack1 === false ? stack1 : stack1.url)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "');\"></div>\n		        </div>\n			</div>\n		";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<div class=\"swiper-containerItem\">\n			<div class=\"swiper-wrapper\">\n				";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			</div>\n			<div class=\"slidePagination\"></div>\n		</div>\n		";
  return buffer;
  }
function program5(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				  <div class=\"swiper-slide\"> \n						<div class=\"slide\">\n				          <div style=\"background-image: url('";
  if (helper = helpers.url) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.url); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "');\"></div>\n				        </div>\n					</div>\n				";
  return buffer;
  }

function program7(depth0,data) {
  
  
  return "\n		<div class=\"noPicture\">\n			<span></span>\n			<p>No hay fotitos!!</p>\n			<div class=\"clear\"></div>\n		</div>\n	";
  }

function program9(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n			<li>";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ": <strong>";
  if (helper = helpers.value) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.value); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</strong></li>\n		";
  return buffer;
  }

function program11(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<img style=\"width:100%\" src=\"http://maps.googleapis.com/maps/api/staticmap?center="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.latitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ","
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.longitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " ?>&zoom=14&size=320x100&markers="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.latitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ","
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.longitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "&sensor=false\">\n	";
  return buffer;
  }

function program13(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.phone), {hash:{},inverse:self.program(16, program16, data),fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		";
  return buffer;
  }
function program14(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.user)),stack1 == null || stack1 === false ? stack1 : stack1.username)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " : ";
  if (helper = helpers.phone) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.phone); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\n			";
  return buffer;
  }

function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.user)),stack1 == null || stack1 === false ? stack1 : stack1.username)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n			";
  return buffer;
  }

function program18(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		";
  return buffer;
  }
function program19(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n			";
  return buffer;
  }

function program21(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<div class=\"action call trackMe\" data-tracking=\"itemPage-clickCall\">\n			<a href=\"tel:"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" >\n				<span>Call</span>\n			</a>\n		</div>\n		<div class=\"action sms trackMe\" data-tracking=\"itemPage-clickSms\">\n			<a href=\"sms:"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" >\n				<span>SMS</span>\n			</a>\n		</div>\n	";
  return buffer;
  }

function program23(depth0,data) {
  
  
  return "fullWidth";
  }

  buffer += "<section id=\"itemPage\">\n	";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images), {hash:{},inverse:self.program(7, program7, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	<span>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.location)),stack1 == null || stack1 === false ? stack1 : stack1.cityName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n	<h1>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1>\n	<p class=\"desc\">";
  stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n	\n	<ul id=\"optionals\">\n		";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.optionals), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</ul>\n	";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n	<div class=\"clear\"></div>\n</section>\n\n<section id=\"actions\">\n	<div class=\"background\"></div>\n	<span>\n		";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.user)),stack1 == null || stack1 === false ? stack1 : stack1.username), {hash:{},inverse:self.program(18, program18, data),fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</span>\n	";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone), {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	<div class=\"action email ";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone), {hash:{},inverse:self.noop,fn:self.program(23, program23, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " trackMe\" data-tracking=\"itemPage-clickEmail\">\n		<div>\n			<span>EMAIL</span>\n		</div>\n	</div>\n	<div class=\"clear\"></div>\n</section>\n\n\n<!--a href=\"/items?categoryId="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.category)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "&location=";
  if (helper = helpers.location) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.location); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&relatedAds="
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">Related Ads</a-->\n";
  return buffer;
  });

templates["desktop/left-panel/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  
  return "\n				<li class=\"myAds\"><a href=\"/\">Mis Avisos</a></li>\n				<li class=\"myFav\"><a href=\"/\">Favoritos</a></li>\n				<li class=\"login\"><a href=\"/login\">Login</a></li>\n			";
  }

function program3(depth0,data) {
  
  
  return "\n				<li class=\"login\"><a href=\"/registration\">Registration</a></li>\n			";
  }

function program5(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				<li><a href=\"/categories/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "?location="
    + escapeExpression(((stack1 = (depth1 && depth1.siteLocation)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" class=\"home-";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a></li>\n			";
  return buffer;
  }

  buffer += "<nav id=\"leftPanel\">\n	<div>\n		<ul class=\"menu\">\n			<li class=\"start\"><a href=\"/\">Inicio</a></li>\n			<li class=\"post\"><a href=\"/\">Publicá un aviso gratis</a></li>\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.user), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			<li class=\"settings\"><a href=\"/\">Settings</a></li>\n		</ul>\n		<ul class=\"categories\">\n			<li class=\"title\">CATEGORIAS</li>\n			";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.categories)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(5, program5, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</ul>\n	</div>\n</nav>";
  return buffer;
  });

templates["desktop/location/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += " > "
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  return buffer;
  }

function program3(depth0,data) {
  
  
  return "Results";
  }

function program5(depth0,data) {
  
  
  return "Popular Cities";
  }

function program7(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n 						<li>\n							<a href=\"/?cityId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"city\" style=\"color:black;\">";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a>\n						</li>\n					";
  return buffer;
  }

  buffer += "<h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</h1>\n\n<form action=\"/location\">\n	<input type=\"text\" name=\"search\"><button type=\"submit\">Search</button>\n	<small>Type a city</small>\n</form>\n\n<h3>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.search), {hash:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</h3>\n\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n			<div id='cities.models'>\n			  	<ul>\n					";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.cities), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				</ul>\n			</div>\n		</section>\n	</div>\n</div>";
  return buffer;
  });

templates["desktop/location/select"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program3(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program5(depth0,data) {
  
  
  return "Change city";
  }

function program7(depth0,data) {
  
  
  return "Select a city";
  }

  buffer += "<strong>";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</strong>\n<a href=\"location\" style=\"color:black;\">";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</a>";
  return buffer;
  });

templates["desktop/pages/terms"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<section>\n  	    	<div class=\"breadcrumbs\">\n    <p style=\"border:none;\" class=\"searchResultsTerm\">Terms Of Use</p>\n	</div>\n<div class=\"disclamer\">   \n    <p><br>PLEASE CAREFULLY READ THESE TERMS OF USE. BY USING THIS \nWEBSITE YOU INDICATE YOUR UNDERSTANDING AND ACCEPTANCE OF THESE TERMS. \nIF YOU DO NOT AGREE TO THESE TERMS YOU MAY NOT USE THIS WEBSITE.</p>\n    <p>\n</p><li>\n<h3>ACCEPTANCE</h3>\n<p>OLX, Inc. and its affiliates (OLX) provide a collection of online \nresources which include classified advertisements, forums, and certain \ne-mail services (collectively, the \"Service\") on the website <a target=\"_blank\" href=\"http://www.olx.com/\">www.olx.com</a> and its affiliated sites (including without limitation <a target=\"_blank\" href=\"http://www.mundoanuncio.com/\">www.mundoanuncio.com</a> and <a target=\"_blank\" href=\"http://www.edeng.cn/\">www.edeng.cn</a>)\n (collectively, the \"Website\") subject to these Terms of Use (these \n\"Terms\").  By using the Service, you agree to comply with these Terms.  \nAdditionally, when using a portion of the Service, you agree to conform \nto any applicable posted guidelines for such Service, which may change \nfrom time to time. You understand and agree that you are solely \nresponsible for reviewing these Terms from time to time. Should you \nobject to any term or condition of these Terms, any guideline, or any \nsubsequent changes thereto or become unhappy with OLX in any way, your \nonly choice is to immediately discontinue use of OLX. These Terms may be\n updated by OLX at any time at its sole discretion. OLX may send you \nnotices of changes to the Website or the Terms pursuant to Section 21(I)\n herein. OLX may provide a translation of the English version of the \nTerms into other languages. You understand and agree that any \ntranslation of the Terms into other languages is for your convenience \nonly and that the English version governs the terms of your relationship\n with OLX. Furthermore, if there are any inconsistencies between the \nEnglish version of the Terms and any translation, the English version of\n the Terms shall govern. You understand and agree that to the extent you\n are located in the United States, you will utilize the Service in \ncompliance with any laws, regulations, and guidelines that may be under \nthe jurisdiction of the Office of Foreign Asset Control, U.S. Department\n of Treasury.</p>\n</li>\n<li>\n<h3>DESCRIPTION OF SERVICE AND CONTENT POLICY</h3>\n<p>A.  OLX is the next generation of free online classifieds.  We act as\n a venue to allow our users who comply with these Terms to offer, sell, \nand buy products and services listed on the Website.  Although you may \nbe able to conduct payment and other transactions through the Website, \nusing third-party vendors such as PayPal, OLX is not in any way in \ninvolved in such transactions.  As a result, and as discussed in more \ndetail in these Terms, you hereby acknowledge and agree that OLX is not a\n party to such transactions, has no control over any element of such \ntransactions, and shall have no liability to any party in connection \nwith such transactions. You use the Service and the Website at your own \nrisk.</p>\n<p>B.  You understand that OLX does not control, and is not responsible \nfor ads, directory information, business listings/information, messages \nbetween users, including without limitation e-mails outside OLX’s e-mail\n system or other means of electronic communication, whether through the \nWebsite or another Third Party Website (defined below) or offerings, \ncomments, user postings, files, images, photos, video, sounds, business \nlistings/information and directory information or any other material \nmade available through the Website and the Service (\"Content\"), and that\n by using the Website and the Service, you may be exposed to Content \nthat is offensive, indecent, inaccurate, misleading, or otherwise \nobjectionable.  You acknowledge and agree that you are responsible for \nand must evaluate, and bear all risks associated with, the use of any \nContent, that you may not rely on said Content, and that under no \ncircumstances will OLX be liable in any way for the Content or for any \nloss or damage of any kind incurred as a result of the use of any \nContent listed, e-mailed or otherwise made available via the Service.  \nYou acknowledge and agree that OLX does not pre-screen or approve any \nContent, but that OLX has the right, in its sole and absolute \ndiscretion, to refuse, delete or move any Content that is or may be \navailable through the Service, for violating these Terms or for any \nother reason or no reason at all.  Furthermore, the Website and Content \navailable through the Website may contain links to other third party \nwebsites (“Third Party Websites”), which are completely unrelated to \nOLX. If you link to Third Party Websites, you may be subject to those \nThird Party Websites’ terms and conditions and other policies. OLX makes\n no representation or guarantee as to the accuracy or authenticity of \nthe information contained in any such Third Party Website, and your \nlinking to any other websites is completely at your own risk and OLX \ndisclaims all liability thereto.</p>\n<p>C.  You acknowledge and agree that you are solely responsible for \nyour own Content posted on, transmitted through, or linked from the \nService and the consequences of posting, transmitting, linking or \npublishing it.  More specifically, you are solely responsible for all \nContent that you upload, email or otherwise make available via the \nService. In connection with such Content posted on, transmitted through,\n or linked from the Service by you, you affirm, acknowledge, represent, \nand warrant that: (i) you own or have the necessary licenses, rights, \nconsents, and permissions to use such Content on the Service and Website\n (including without limitation all patent, trademark, trade secret, \ncopyright or other proprietary rights in and to any and all such \nContent) and authorize OLX to use such Content to enable inclusion and \nuse of the Content in the manner contemplated by the Service, the \nWebsite and these Terms; and (ii) you have the written consent, release,\n and/or permission of each and every identifiable individual person or \nbusiness in the Content to use the name or likeness of each and every \nsuch identifiable individual person or business to enable inclusion and \nuse of the Content in the manner contemplated by the Service, the \nWebsite and these Terms.  For clarity, you retain all of your ownership \nrights in your Content; however, by submitting the Content to OLX, you \nhereby grant to OLX an irrevocable, non-cancellable, perpetual, \nworldwide, non-exclusive, royalty-free, sub-licenseable, transferable \nlicense to use, reproduce, distribute, prepare derivative works of, \ndisplay, and perform the Content in connection with the Website and \nOLX's (and its successors') business, including without limitation for \nthe purpose of promoting and redistributing part or all of the Website \nand Content therein (and derivative works thereof) in any media formats \nand through any media channels now or hereafter known.  These rights are\n required by OLX in order to host and display your Content. Furthermore,\n by you posting Content to any public area of the Service, you agree to \nand do hereby grant to OLX all rights necessary to prohibit or allow any\n subsequent aggregation, display, copying, duplication, reproduction, or\n exploitation of the Content on the Service or Website by any party for \nany purpose. You also hereby grant each user of the Website a \nnon-exclusive license to access your Content through the Website. The \nforegoing license to each user granted by you terminates once you remove\n or delete such Content from the Website.</p>\n<p>D.  OLX does not endorse any Content or any opinion, statement, \nrecommendation, or advice expressed therein, and OLX expressly disclaims\n any and all liability in connection with user Content. OLX does not \npermit copyright infringing activities and infringement of intellectual \nproperty rights on the Website, and OLX may, at its sole discretion, \nremove any infringing Content if properly notified that such Content \ninfringes on another's intellectual property rights. OLX reserves the \nright to remove any Content without prior notice. <b>OLX may also \nterminate a user's access to the Website, if they are determined to be a\n repeat infringer. A repeat infringer is a user who has been notified of\n infringing activity more than twice and/or has had a user submission \nremoved from the Website more than twice.</b> Further, at its sole \ndiscretion, OLX reserves the right to decide whether any Content is \nappropriate and complies with these Terms for violations other than \ncopyright infringement and violations of intellectual property law, such\n as, but not limited to, pornography, obscene, libelous, or defamatory \nmaterial, or excessive length. OLX may remove such Content and/or \nterminate a user's access for uploading such material in violation of \nthese Terms at any time, without prior notice and at its sole \ndiscretion.</p>\n<p>E.  OLX may provide a video service to you if you upload photographs \nfor your ad.  By uploading your photographs, you irrevocably consent to \nthe use of your photographs for this service and represent and warrant \nthat you have all right, title and interest necessary to upload and use \nthe photographs on this service.  Under this service, using a third \nparty application or service, OLX may, at its discretion, create a video\n of your photographs, upload the video via <a href=\"http://www.youtube.com/\" target=\"_blank\">www.youtube.com</a> or another third party service provider, as determined by OLX at its discretion, and embed the video into your ad on OLX.</p>\n</li>\n<li>\n<h3>FEATURED ADS</h3>\n<p>OLX offers a service known as \"Featured Ads\" where users may pay a \nnon-refundable fee to have their ads posted in selected locations on the\n Website, thus potentially increasing an ads' visibility. In order to \npurchase a Featured Ad, you may be required to transmit certain \ninformation through a third party service provider, Click &amp; Buy, a \nThird Party Website, which may be governed by its own terms of use and \nother policies. OLX makes no representation or guarantee as to the \nsafety or security of the information transmitted to any Third Party \nWebsite, and your linking to any Third Party Website is completely at \nyour own risk, and OLX disclaims all liability related thereto.</p>\n<p><b>Featured Ads are subject to the Terms listed herein, as well as additional terms of service, which can be viewed</b> <a href=\"http://www.olx.com/featured_listings.php\">here</a></p>\n</li>\n<li>\n<h3>CONDUCT</h3>\n<p>You agree not to post, email, or otherwise make available Content:</p>\n<ul>\n	<li>that violates any law;</li>\n	<li>that is copyrighted or patented, protected by trade secret or \ntrademark, or otherwise subject to third party proprietary rights, \nincluding privacy and publicity rights, unless you are the owner of such\n rights or have\npermission or a license from their rightful owner to post the material \nand to grant OLX all of the license rights granted herein;</li>\n	<li>that infringes any of the foregoing intellectual property rights of\n any party, or is Content that you do not have a right to make available\n under any law or under contractual or fiduciary relationships;</li>\n	<li>that violates the Fair Housing Act, as amended, including its \nimplementing regulations and any Presidential Executive Order related \nthereto, by stating, in any notice or advertisements for the sale or \nrental of any dwelling not excluded by such Act, a discriminatory \npreference based sex, familial status or handicap, race, color, national\n origin, religion, (or violates any applicable state or local law \nprohibiting discrimination on the basis of aforementioned \ncharacteristics or any other characteristics);</li>\n	<li>that is harmful, abusive, unlawful, threatening, harassing, \ndefamatory, pornographic, libelous, invasive of another's privacy or \nother rights, or harms or could harm minors in any way;</li>\n	<li>that harasses, degrades, intimidates or is hateful toward an \nindividual or group of individuals on the basis of religion, gender, \nsexual orientation, race, ethnicity, age, or disability;</li>\n	<li>that violates any federal, state, or local equal employment laws, \nincluding but not limited to those prohibiting the stating, in any \nadvertisement for employment, a preference or requirement based on race,\n color, religion, sex, national origin, age, or disability of the \napplicant.</li>\n	<li>that includes personal or identifying information about another person without that person's explicit consent;</li>\n	<li>that impersonates any person or entity, including, but not limited \nto, an OLX employee, or falsely states or otherwise misrepresents an \naffiliation with a person or entity;</li>\n	<li>with respect to employers that employ four or more employees, that \nviolates any applicable provision of the Immigration and Nationality \nAct, including without limitation requiring U.S. citizenship or lawful \npermanent residency (green card status) as a condition for employment, \nunless otherwise required in order to comply with law, regulation, \nexecutive order, or federal, state, or local government contract.</li>\n	<li>that is false, deceptive, misleading, deceitful, misinformative, or constitutes \"bait and switch\" offer;</li>\n	<li>that constitutes or contains \"pyramid schemes,\" \"affiliate \nmarketing,\" \"link referral code,\" \"junk mail,\" \"spam,\" \"chain letters,\" \nor unsolicited advertisements of a commercial nature;</li>\n	<li>that constitutes or contains any form of advertising or \nsolicitation if (1) posted in areas or categories of the Website which \nare not designated for such purposes; or (2) e-mailed to OLX users who \nhave requested not to be contacted about other services, products or \ncommercial interests;</li>\n	<li>that includes links to commercial services or Third Party Websites, except as specifically allowed by OLX;</li>\n	<li>that advertises any illegal services or the sale of any items the \nsale of which is prohibited or restricted by applicable law, including \nwithout limitation items the sale of which is prohibited or regulated by\n New York law;</li>\n	<li>that contains software viruses or any other computer code, files or\n programs designed to interrupt, destroy or limit the functionality of \nany computer software or hardware or telecommunications equipment;</li>\n	<li>that disrupts the normal flow of dialogue with an excessive number \nof messages (flooding attack) to the Service, or that otherwise \nnegatively affects other users' ability to use the Service; or</li>\n	<li>that employs misleading email addresses, or forged headers or \notherwise manipulated identifiers in order to disguise the origin of \nContent transmitted through the Service.</li>\n</ul>\n<p>Additionally, you agree not to:</p>\n<ul>\n	<li>contact anyone who has asked not to be contacted, or make \nunsolicited contact with anyone for any commercial purpose; or to \n\"stalk\" or otherwise harass anyone;</li>\n	<li>make any libelous or defamatory comments or postings to or against anyone;</li>\n	<li>collect personal data about other users or entities for commercial or unlawful purposes;</li>\n	<li>use automated means, including spiders, robots, crawlers, data \nmining tools, or the like to download or scrape data from the Service, \nexcept for internet search engines (e.g,. Google) and non-commercial \npublic archives (e.g. archive.org) that comply with our robots.txt file;</li>\n	<li>post Content that is outside the local area or not relevant to the \nlocal area, repeatedly post the same or similar Content, or otherwise \nimpose unreasonable or disproportionately large loads on our servers and\n other infrastructure;</li>\n	<li>post the same item or service in multiple classified categories or forums, or in multiple metropolitan areas;</li>\n	<li>attempt to gain unauthorized access to computer systems owned or \ncontrolled by OLX or engage in any activity that disrupts, diminishes \nthe quality of, interferes with the performance of, or impairs the \nfunctionality of, the Service or the Website.</li>\n	<li>use any form of automated device or computer program (sometimes \nreferred to as \"flagging tools\") that enables the use of OLX's \"flagging\n system\" or other community control systems without each flag being \nmanually entered by a human that initiates the flag (an \"automated \nflagging device\"), or use any such flagging tool to remove posts of \ncompetitors, other third parties or to remove posts without a reasonable\n good faith belief that the post being flagged violates these Terms or \nany applicable law or regulation.</li>\n	<li>use any automated device or software that enables the submission of\n automatic postings on OLX without human intervention or authorship (an \n\"automated posting device\"), including without limitation, the use of \nany such automated posting device in connection with bulk postings, or \nfor automatic submission of postings at certain times or intervals; or</li>\n</ul>\n</li>\n<li>\n<h3>PAID POSTINGS</h3>\n<p>OLX may charge a fee to post Content in some areas of the Service. \nThe fee permits certain Content to be posted in a designated area of the\n Website. Each party posting Content to the Service is responsible for \nsaid Content and compliance with the Terms. Any such fees paid hereunder\n are non-refundable in the event any Content is removed from the Service\n for violating these Terms</p>\n</li>\n<li>\n<h3>POSTING AGENTS</h3>\n<p>As used herein, the term \"Posting Agent\" refers to a third-party \nagent, service, or intermediary that offers to post Content to the \nService on behalf of others. OLX prohibits the use of Posting Agents, \ndirectly or indirectly, without the express written permission of OLX  \nIn addition, Posting Agents are not permitted to post Content on behalf \nof others, directly or indirectly, or otherwise access the Service to in\n order to post Content on behalf of others, except with express written \npermission or license from OLX.</p>\n</li>\n<li>\n<h3>ACCESS TO THE SERVICE</h3>\n<p>OLX grants you a limited, revocable, non-exclusive license to access \nand use the Service for personal use.  This license granted herein does \nnot include any of the following: (a) access to or use of the Service by\n Posting Agents; or (b) any collection, aggregation, copying, \nduplication, display or derivative use of the Service nor any use of \ndata mining, robots, spiders, or similar data gathering and extraction \ntools for any purpose unless expressly permitted by OLX or as otherwise \nset forth in these Terms. Notwithstanding the foregoing, general purpose\n internet search engines and non-commercial public archives that gather \ninformation for the sole purpose of displaying hyperlinks to the \nService, provided they each do so from a stable IP address or range of \nIP addresses using an easily identifiable agent and comply with our \nrobots.txt file, may engage in the activities set forth in (b). For \npurposes of this exception, a \"general purpose internet search engine\" \ndoes not include a website or search engine or other service that \nspecializes in classified listings including any subset of classifieds \nlistings such as housing, for sale, jobs, services, or personals, or \nwhich otherwise provides classified ad listing services. The license set\n forth in this Section permits you to display on your website, or create\n a hyperlink thereto, individual postings on the Service so long as such\n use is for noncommercial and/or news reporting purposes only (e.g., for\n use in personal blogs or other personal online media). If the total \nnumber of such postings displayed on or linked to your website exceeds \nninety nine (99) postings, your use will be considered to be in \nviolation of these Terms, unless OLX expressly grants you permission \notherwise. You are also permitted to create a hyperlink to the home page\n of the Website so long as the link does not portray OLX, its employees,\n affiliates or agents in a false, confusing, misleading, derogatory, or \notherwise offensive matter. OLX may offer parts of the Service in RSS \nformat for the purpose of embedding individual RSS feeds into a personal\n website or blog, or view postings through third party software news \naggregators. OLX permits you to display, excerpt from, and link to any \nsuch RSS feeds on your personal website or personal blow, provided that \n(a) your use of the RSS feed is for personal, non-commercial purposes \nonly, (b) each title within an RSS feed is correctly linked back to the \noriginal post on the Service and redirects the user to the post when the\n user clicks on it, (c) you provide, in a conspicuous manner, proper \nattribution to 'OLX' as the source of the RSS feed, (d) your use or \ndisplay of the RSS feed does not suggest that OLX promotes or endorses \nany third party causes, opinions, ideas, web sites, products or \nservices, (e) you do not redistribute the RSS feed, and (f) your use \ndoes not overburden or otherwise slow the performance of OLX's systems. \nOLX reserves all rights in and to the content of any RSS feeds provided \nthrough the Service and may terminate any RSS feed at any time without \nnotice. Use of the Service beyond the scope of authorized access as set \nforth in these Terms immediately terminates any permission or license \ngranted herein. In order to collect, aggregate, copy, duplicate, display\n or make derivative use of the Service or any Content made available via\n the Service for other purposes (including commercial\npurposes) not stated herein, you must first obtain a license from OLX.\n</p>\n</li>\n<li>\n<h3>NOTIFICATION OF CLAIMS OF INFRINGEMENTS</h3>\n<p>If you are a copyright owner or an agent thereof and believe that any\n user Content or other content infringes upon your copyrights, you may \nsubmit a notification pursuant to the Digital Millennium Copyright Act \n(\"DMCA\") by providing our Copyright Agent with the following information\n in writing (see 17 U.S.C 512(c)(3) for further detail):</p>\n<p>1.A physical or electronic signature of a person authorized to act on\n behalf of the owner of an exclusive right that is allegedly infringed;</p>\n<p>2.Identification of the copyrighted work claimed to have been \ninfringed, or, if multiple copyrighted works at a single online site are\n covered by a single notification, a representative list of such works \nat that site;</p>\n<p>3.Identification of the material that is claimed to be infringing or \nto be the subject of infringing activity and that is to be removed or \naccess to which is to be disabled and information reasonably sufficient \nto permit OLX to locate the material;</p>\n<p>4.Information reasonably sufficient to permit OLX to contact you, \nsuch as an address, telephone number, and, if available, an electronic \nmail address;</p>\n<p>5.A statement that you have a good faith belief that use of the \nmaterial in the manner complained of is not authorized by the copyright \nowner, its agent, or the law; and</p>\n<p>6.A statement that the information in the notification is accurate, \nand under penalty of perjury, that you are authorized to act on behalf \nof the owner of an exclusive right that is allegedly infringed.</p>\n<p>OLX's designated Copyright Agent to receive notifications of claimed infringement is: <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Legal Issues report form</a>\n or OLX, S.A., Uriarte 2489 - 3rd Floor, Buenos Aires, Argentina, \nAttention: DMCA Complaint . For clarity, only DMCA notices should go to \nthe Copyright Agent; any other feedback, comments, requests for \ntechnical support, and other communications should be directed to OLX's \ncustomer service by clicking on the Contact Us link on the OLX website. \nYou acknowledge that if you fail to comply with all of the requirements \nof this Section 8, your DMCA notice may not be valid.</p>\n</li>\n<li>\n<h3>INTELLECTUAL PROPERTY RIGHTS</h3>\n<p>You acknowledge and agree that the materials on the Website, other \nthan the user Content that you licensed under Section 2(C) of the Terms,\n including without limitation, the text, software, scripts, graphics, \nphotos, sounds, music, videos, interactive features and the like \n(\"Materials\") and the trademarks, service marks and logos contained \ntherein (\"Marks\"), are owned by or licensed to OLX, and are subject to \ncopyright and other intellectual property rights under United States and\n foreign laws and international conventions. Materials on the Website \nare provided to you AS IS for your information and personal use only and\n may not be used, copied, reproduced, distributed, transmitted, \nbroadcast, displayed, sold, licensed, or otherwise exploited for any \nother purposes whatsoever without the prior written consent of the \nrespective owners. OLX reserves all rights not expressly granted herein \nto the Website and the Materials. You agree to not engage in the use, \ncopying, or distribution of any of the Materials other than as expressly\n permitted herein, including any use, copying, or distribution of \nMaterials of third parties obtained through the Website for any \ncommercial purposes. If you download or print a copy of the Materials \nfor personal use, you must retain all copyright and other proprietary \nnotices contained therein. You agree not to circumvent, disable or \notherwise interfere with security related features of the Website or \nfeatures that prevent or restrict use or copying of any Materials or \nenforce limitations on use of the Website or the Materials therein. The \nService is protected to the maximum extent permitted by copyright laws, \nother laws, and international treaties. Content displayed on or through \nthe Service is protected by copyright as a collective work and/or \ncompilation,\npursuant to copyrights laws, other laws, and international conventions. \nAny reproduction, modification, creation of derivative works from or \nredistribution of the Website, the Materials, or the collective work or \ncompilation is expressly prohibited. Copying or reproducing the Website,\n the Materials, or any portion thereof to any other server or location \nfor further reproduction or redistribution is expressly prohibited. You \nfurther agree not to reproduce, duplicate or copy Content or Materials \nfrom the Service, and agree to abide by any and all copyright notices \nand other notices displayed on the Service. You may not decompile or \ndisassemble, reverse engineer or otherwise attempt to discover any \nsource code contained in the Service. Without limiting the foregoing, \nyou agree not to reproduce, duplicate, copy, sell, resell or exploit for\n any commercial purposes, any aspect of the Service. OLX is a service \nmark registered with the U.S. Patent and Trademark Office and in various\n other jurisdictions.</p>\n</li>\n<li>\n<h3>USER SUBMISSIONS</h3>\n<p>You understand that when using the Website, you will be exposed to \nContent from a variety of sources, and that OLX is not responsible for \nthe accuracy, usefulness, safety, or intellectual property rights of or \nrelating to such Content, and you agree and assume all liability for \nyour use. You further understand and acknowledge that you may be exposed\n to Content that is inaccurate, offensive, indecent, or objectionable, \ndefamatory or libelous and you agree to waive, and hereby do waive, any \nlegal or equitable rights or remedies you have or may have against OLX \nwith respect thereto.</p>\n</li>\n<li>\n<h3>INDEMNITY</h3>\n<p>You agree to defend, indemnify and hold harmless OLX, its officers, \nsubsidiaries, affiliates, successors, assigns, directors, officers, \nagents, service providers, suppliers and employees, from and against any\n and all claims, damages, obligations, losses, liabilities, costs or \ndebt, and expenses (including but not limited to attorneys' fees) \narising from: (i) your use of and access to the Website and/or the \nService; (ii) your violation of any term of these Terms; (iii) your \nviolation of any third party right, including without limitation any \ncopyright, trademark, trade secret or other property, or privacy right; \nor (iv) any claim that your Content caused damage to a third party. This\n defense and indemnification obligation will survive termination, \nmodification or expiration of these Terms and your use of the Service \nand the Website.</p>\n</li>\n<li>\n<h3>NO SPAM POLICY</h3>\n<p>You understand and agree that sending unsolicited email \nadvertisements or other unsolicited communications to OLX email \naddresses or through OLX computer systems are expressly prohibited by \nthese Terms. You acknowledge and agree that from time to time OLX may \nmonitor email usage using human monitors or automated software to flag \ncertain words associated with spam or scams in emails that are sent \nbetween one user to another in the OLX e mail system. Any communication \nbetween yourself and any other user utilizing the communication features\n available on the Service and the Website may be used only in accordance\n with the Terms. Any unauthorized use of OLX computer systems is a \nviolation of these Terms and certain federal and state laws. Such \nviolations may subject the sender and his or her agents to civil and \ncriminal penalties.</p>\n</li>\n<li>\n<h3>DEALINGS WITH ORGANIZATIONS AND INDIVIDUALS</h3>\n<p>You acknowledge and agree that OLX shall not be liable for your \ninteractions with any organizations and/or individuals on the Website or\n through the Service. This includes, but is not limited to, payment and \ndelivery of goods and services, and any other terms, conditions, \nwarranties or representations associated with any interaction you may \nhave with other organizations and/or individuals. These dealings are \nsolely between you and such organizations and/or individuals. You agree \nand acknowledge that OLX shall not be responsible or liable for any loss\n or damage of any sort incurred as the result of any such dealings or \ninteractions. If there is a dispute between participants on the Website,\n or between users and any third party, you understand and agree that OLX\n is under no obligation to become involved in such dispute. In the event\n that you have a dispute with one or more other users, you hereby \nrelease OLX, its officers, employees, agents and successors from any and\n all claims, demands and damages (actual and consequential) of every \nkind or nature, known or unknown, suspected and unsuspected, disclosed \nand undisclosed, arising out of or in any way related to such disputes \nand/or our Service.</p>\n</li>\n<li>\n<h3>LIMITATION AND TERMINATION OF SERVICE</h3>\n<p>You acknowledge and agree that OLX may establish limits from time to \ntime concerning use of the Service, including among others, the maximum \nnumber of days that Content will be maintained or retained by the \nService, the maximum number and size of postings, e-mail messages, or \nother Content that may be transmitted or stored by the Service, and the \nfrequency with which you may access the Service or the Website. You \nacknowledge and agree that OLX has no responsibility or liability for \nthe deletion or failure to store any Content maintained or transmitted \nby the Website or the Service. You acknowledge and agree that OLX \nreserves the right at any time to modify or discontinue the Service (or \nany part thereof) with or without notice, and that OLX shall not be \nliable to you or to any third party for any such modification, \nsuspension or discontinuance of the Service. You acknowledge and agree \nthat OLX, in its sole and absolute discretion, has the right (but not \nthe obligation) to delete or deactivate your account, block your e-mail \nor IP address, or otherwise terminate your access to or use of the \nService (or any part thereof), immediately and without notice, and \nremove and discard any Content within the Service, for any reason or no \nreason at all, including, without limitation, if OLX believes that you \nhave violated these Terms. Further, you agree that OLX shall not be \nliable to you or any third-party for any termination of your access to \nthe Website or the Service. Further, you agree not to attempt to use the\n Service after any such termination.</p>\n</li>\n<li>\n<h3>DISCLAIMER OF WARRANTIES</h3>\n<p>YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT USE OF THE WEBSITE AND THE \nSERVICE IS ENTIRELY AT YOUR OWN RISK AND THAT THE WEBSITE AND THE \nSERVICE ARE PROVIDED ON AN \"AS IS\" OR \"AS AVAILABLE\" BASIS, WITHOUT ANY \nWARRANTIES OF ANY KIND. ALL EXPRESS AND IMPLIED WARRANTIES, INCLUDING, \nWITHOUT LIMITATION, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE, AND NON-INFRINGEMENT OF PROPRIETARY RIGHTS ARE \nEXPRESSLY DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. TO THE \nFULLEST EXTENT PERMITTED BY LAW OLX, ITS OFFICERS, DIRECTORS, EMPLOYEES,\n AND AGENTS DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, IN CONNECTION \nWITH THE WEBSITE AND YOUR USE THEREOF. OLX MAKES NO WARRANTIES OR \nREPRESENTATIONS ABOUT THE ACCURACY OR COMPLETENESS OF THE WEBSITE'S \nCONTENT OR THE CONTENT OF ANY THIRD PARTY WEBSITES LINKED TO THE WEBSITE\n AND ASSUMES NO LIABILITY OR RESPONSIBILITY FOR ANY (I) ERRORS, \nMISTAKES, OR INACCURACIES OF CONTENT, (II) PERSONAL INJURY OR PROPERTY \nDAMAGE, OF ANY NATURE WHATSOEVER, RESULTING FROM YOUR ACCESS TO AND USE \nOF THE WEBSITE AND SERVICE, (III) ANY UNAUTHORIZED ACCESS TO OR USE OF \nOUR SERVERS AND/OR ANY AND ALL PERSONAL INFORMATION AND/OR FINANCIAL \nINFORMATION STORED THEREIN, (IV) ANY INTERRUPTION OR CESSATION OF \nTRANSMISSION TO OR FROM THE WEBSITE, (IV) ANY BUGS, VIRUSES, TROJAN \nHORSES, OR THE LIKE WHICH MAY BE TRANSMITTED TO OR THROUGH THE WEBSITE \nBY ANY THIRD PARTY, AND/OR (V) ANY ERRORS OR OMISSIONS IN ANY CONTENT OR\n FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF \nANY CONTENT POSTED, EMAILED, COMMUNICATED, TRANSMITTED, OR OTHERWISE \nMADE AVAILABLE VIA THE WEBSITE OR THE SERVICE. OLX DOES NOT WARRANT, \nENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY FOR ANY PRODUCT OR SERVICE \nADVERTISED OR OFFERED BY A THIRD PARTY THROUGH THE WEBSITE OR ANY \nHYPERLINKED WEBSITE OR FEATURED IN ANY BANNER OR OTHER ADVERTISING, AND \nOLX WILL NOT BE A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING \nANY TRANSACTION BETWEEN YOU AND/OR OTHER USERS AND/OR THIRD-PARTY \nPROVIDERS OF PRODUCTS OR SERVICES. AS WITH THE PURCHASE OF A PRODUCT OR \nSERVICE THROUGH ANY MEDIUM OR IN ANY ENVIRONMENT, YOU SHOULD USE YOUR \nBEST JUDGMENT AND EXERCISE CAUTION WHERE APPROPRIATE.\n</p>\n</li>\n<li>\n<h3>LIMITATIONS OF LIABILITY</h3>\n<p>IN NO EVENT SHALL OLX, ITS OFFICERS, DIRECTORS, EMPLOYEES, OR AGENTS,\n BE LIABLE FOR DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR \nEXEMPLARY DAMAGES (EVEN IF OLX HAS BEEN ADVISED OF THE POSSIBILITY OF \nSUCH DAMAGES), RESULTING FROM ANY ASPECT OF YOUR USE OF THE WEBSITE OR \nTHE SERVICE, INCLUDING WITHOUT LIMITATION WHETHER THE DAMAGES ARISE FROM\n USE OR MISUSE OF THE WEBSITE OR THE SERVICE, FROM INABILITY TO USE THE \nWEBSITE OR THE SERVICE, OR THE INTERRUPTION, SUSPENSION, MODIFICATION, \nALTERATION, OR TERMINATION OF THE WEBSITE OR THE SERVICE. SUCH \nLIMITATION OF LIABILITY SHALL ALSO APPLY WITH RESPECT TO DAMAGES \nINCURRED BY REASON OF OTHER SERVICES OR PRODUCTS RECEIVED THROUGH OR \nADVERTISED IN CONNECTION WITH THE WEBSITE OR THE SERVICE OR ANY LINKS ON\n THE WEBSITE, AS WELL AS BY REASON OF ANY INFORMATION, OPINIONS OR \nADVICE RECEIVED THROUGH OR ADVERTISED IN CONNECTION WITH THE WEBSITE OR \nTHE SERVICE OR ANY LINKS ON THE OLX SITE. THESE LIMITATIONS SHALL APPLY \nTO THE FULLEST EXTENT PERMITTED BY LAW. YOU SPECIFICALLY ACKNOWLEDGE AND\n AGREE THAT OLX SHALL NOT BE LIABLE FOR USER SUBMISSIONS OR THE \nDEFAMATORY, OFFENSIVE, OR ILLEGAL CONDUCT OF ANY USER OR THIRD PARTY AND\n THAT THE RISK OF HARM OR DAMAGE FROM THE FOREGOING RESTS ENTIRELY WITH \nYOU. The Website is controlled and offered by OLX from its facilities in\n the United States of America. OLX makes no representations or \nwarranties that the Website is appropriate for use in other locations. \nThose who access or use the Website from other jurisdictions do so at \ntheir own volition and risk and are responsible for compliance with \nlocal law.\n</p>\n</li>\n<li>\n<h3>ASSIGNMENT</h3>\n<p>These Terms, and any rights and licenses granted hereunder, may not \nbe transferred or assigned by you, but may be assigned by OLX without \nrestriction. Any assignment or transfer by you shall be null and void.</p>\n</li>\n<li>\n<h3>ABILITY TO ACCEPT TERMS OF SERVICE</h3>\n<p>This Website is intended only for adults. You affirm that you are \neither more than 18 years of age, or an emancipated minor, or possess \nlegal parental or guardian consent, and are fully able and competent to \nenter into the terms, conditions, obligations, affirmations, \nrepresentations, and warranties set forth in these Terms, and to abide \nby and comply with these Terms. In any case, you affirm that you are \nover the age of 13, as the Website is not intended for children under \n13.</p>\n<p><u><b>NOTICE TO CHILDREN UNDER THE AGE OF 13 AND THEIR PARENTS OR GUARDIANS</b></u></p>\n<p><b>If you are under the age of 13, YOU MUST NOT USE THIS WEBSITE. \nPlease do not send us your personal information, including your email \naddresses, name, and/or contact information. If you want to contact us, \nyou may only do so through your parent or legal guardian.</b></p>\n</li>\n<li>\n<h3>GENERAL INFORMATION</h3>\n<p>These Terms and the other policies posted on the Website constitute \nthe complete and exclusive understanding and agreement between you and \nOLX and govern your use of the Service and the Website superseding all \nprior understandings, proposals, agreements, negotiations, and \ndiscussions between the parties, whether written or oral. The Terms and \nthe relationship between you and OLX shall be governed by the laws of \nthe State of New York without regard to its conflict of law principles. \nYou and OLX agree to submit to the personal and exclusive jurisdiction \nof the courts located within the State of New York. The failure of OLX \nto exercise or enforce any right or provision of the Terms shall not \nconstitute a waiver of such right or provision. If any provision of the \nTerms is found by a court of competent jurisdiction to be invalid \n(including, without limitation, because such provision is inconsistent \nwith the laws of another jurisdiction) or inapplicable, the parties \nnevertheless agree that the court should endeavor to give effect to the \nparties' intentions as reflected in the provision. If any provision or \nprovisions of these Terms is held to be invalid, illegal or \nunenforceable, the validity, legality and enforceability of the \nremaining provisions of the Terms shall not in any way be affected or be\n impaired. YOU AGREE THAT ANY CAUSE OF ACTION BROUGHT BY YOU AND ARISING\n OUT OF OR RELATED TO YOUR USE OF THE SERVICE AND/OR THE WEBSITE MUST \nCOMMENCE WITHIN ONE (1) YEAR AFTER THE CAUSE OF ACTION ACCRUES, EXCEPT \nTHAT OLX MAY COMMENCE ANY SUCH CAUSE OF ACTION IN ACCORDANCE WITH THE \nAPPLICABLE STATUTE OF LIMITATIONS UNDER NEW YORK LAW. OTHERWISE, SUCH \nCAUSE OF ACTION IS PERMANENTLY BARRED. These Terms shall inure to the \nbenefit of and be binding upon each party's successors and assigns.</p>\n</li>\n<li>\n<h3>VIOLATION OF TERMS AND LIQUIDATED DAMAGES</h3>\n<p>Please report any violations of the Terms that you become aware of by\n contacting us using the link at the bottom of the OLX homepage at <a target=\"_blank\" href=\"http://www.olx.com/\">www.olx.com</a>.\n Any failure to act by OLX with respect to a breach by you or others \ndoes not waive our right to act with respect to subsequent or similar \nbreaches by you or others. You understand and agree that, because \ndamages are often difficult or impossible to quantify, if actual damages\n cannot be reasonably calculated then you will be liable to pay OLX the \nfollowing as liquidated damages (and not a penalty):</p>\n<p>a. If OLX establishes any limits on the frequency with which you may \naccess the Service, or terminates your access to or use of the Service, \nyou agree to pay OLX ninety nine dollars ($99) for (i) each message \nposted in excess of such limits or (ii) for each day on which you access\n OLX in excess of such limits, whichever is higher.</p>\n<p>b. If you post a message that (1) impersonates any person or entity; \n(2) falsely states or otherwise misrepresents your affiliation with a \nperson or entity; or (3) that includes personal or identifying \ninformation about another person without that person's explicit consent,\n you agree that OLX in its sole discretion may disclose identifying \ninformation about you to the victim, and that should OLX bring a claim \nagainst you in court, that you will pay OLX one thousand one hundred \ndollars ($1,100) for each such message.</p>\n<p>c. If you are a Posting Agent that uses the Service in violation of \nthese Terms, in addition to any liquidated damages under Section 20(e) \nbelow you agree to pay OLX ninety nine dollars ($99) for each and every \nitem you post in violation of these Terms. A Posting Agent will also be \ndeemed an agent of the party engaging the Posting Agent to access the \nService, and such party (by engaging the Posting Agent in violation of \nthese Terms) agrees to pay OLX an additional ninety nine dollars ($99) \nfor each item posted by the Posting Agent on behalf of such party in \nviolation of these Terms.</p>\n<p>d. If you use OLX e-mail addresses or computer systems to send \nunsolicited e-mail advertisements to OLX e-mail addresses or any other \nparty, you agree to pay OLX thirty dollars ($30) for each such e-mail.</p>\n<p>e. If you post messages in violation of these Terms, other than as \ndescribed above, you agree to pay OLX ninety nine dollars ($99) for each\n such message. Notwithstanding the foregoing, OLX may, in its sole and \nabsolute discretion, issue a warning before assessing damages pursuant \nto this Section 20(e).</p>\n<p>f. If you aggregate, copy, display, mirror, reproduce, or otherwise \nexploit for any purpose any Content (except for your own Content) in \nviolation of these Terms without OLX's express written permission, you \nagree to pay OLX ten thousand dollars ($10,000) for each day on which \nyou engage in such conduct.</p>\n<p>If none of the foregoing clauses (a) – (f) are applicable, you agree \nto pay OLX’s actual damages, to the extent such actual damages can be \nreasonably calculated. Notwithstanding any other provision of these \nTerms, OLX retains the right to seek equitable remedies, including \nwithout limitation, specific performance of any term contained in these \nTerms, or a preliminary or permanent injunction against the breach or \nthreatened breach of any such term or in aid of the exercise of any \npower granted in these Terms, or any combination thereof, without the \nnecessity of posting a bond.</p>\n</li>\n<li>\n<h3>PRIVACY POLICY</h3>\n<p><u>A. Safe Harbor Certification</u></p>\n<p>OLX complies with the U.S.-EU Safe Harbor Framework and the \nU.S.-Swiss Safe Harbor Framework as set forth by the U.S. Department of \nCommerce regarding the collection, use, and retention of personal \ninformation from European Union member countries and Switzerland.  OLX \nhas certified that it adheres to the Safe Harbor Privacy Principles of \nnotice, choice, onward transfer, security, data integrity, access, and \nenforcement.  To learn more about the Safe Harbor program, and to view \nOLX’s certification, please visit http://www.export.gov/safeharbor/</p>\n<p><u>B. Type of Information Collected:</u></p>\n<p>When you visit the Website, we may collect certain non-personal \ninformation such as your Internet Protocol (“IP”) address, operating \nsystem, browser type, and Internet service provider. This type of \ninformation does not identify you personally. When you register with the\n Website, we may also collect personal information that you provide such\n as your name, mailing address, email address, home country, and zip \ncode (“Registration Information”). You have the option of also providing\n to us your phone and fax numbers, gender, age, and/or company name if \nyou choose to register with OLX. If you provide your phone number, it \nwill be displayed in your posting. We may also collect additional \ninformation that our users provide, such as new or deleted postings, new\n or deleted comments, keyword searches, scam reports and new contact \nsellers. We use a third-party credit card processing company for \npurchases, and other third party companies to monitor site traffic, \nwhich may, in some instances, store your information (see Section 21(D) \nbelow). When you visit the Website and/or use the OLX mobile \napplication, OLX may use GPS technology (or other similar technology) to\n determine your current location in order to determine the city you are \nlocated within and display a location map with relevant advertisements. \nOLX will not share your current location with other OLX users or \npartners. If you do not want OLX to use your location for the purposes \nset forth above, you should turn off the location services for the OLX \napplication located in your OLX account settings or in your mobile phone\n settings. <b>By using this Website or the Service, you consent to \ncollection, storage, and use of the personal information you provide for\n any of the Services that we offer, and you consent to our collection of\n any changes or updates that you may provide to any information you \nprovide that is collected by OLX.</b>\n</p>\n<p><u>C. Cookies</u></p>\n<p>We may use cookies to manage our users’ sessions and to store \npreferences, tracking information, and language selection. Cookies may \nbe used whether you register with us or not. “Cookies” are small text \nfiles transferred by a web server to your hard drive and thereafter \nstored on your computer. The types of information a cookie collects \ninclude the date and time you visited, your browsing history, your \npreferences, and your username. In some instances, our third-party \nservice providers may use cookies on the Website. We cannot control or \naccess cookies used by third- party service providers. This Privacy \nPolicy covers only Cookies used by us, and not any cookies used by third\n parties. You have the ability to either accept or decline the use of \ncookies on your computer, whether you are registered with us or not. \nTypically, you can configure your browser to not accept cookies. \nHowever, declining the use of cookies may limit your access to certain \nfeatures of the Website. For example, you may have difficulty logging in\n or using certain interactive features of the Website, such as the OLX \nForum or Comments feature.</p>\n<p><u>D. Third Parties</u></p>\n<p>We use third-party service providers to process purchases you make \nand to monitor our users’ interests. In addition, the Website may \noccasionally contain links to Third-Party Sites. If you click on the \nlinks to Third-Party Websites, you leave the Website. We are not \nresponsible for the content of these Third-Party Websites or for the \nsecurity of your personal information when you use the Third Party \nWebsites. These third-party service providers and Third-Party Sites may \nhave their own privacy policies governing the storage and retention of \nyour personal information that you may be subject to. They may collect \ninformation such as your IP address, browser specification, or operating\n system. This Privacy Policy does not govern personal information \nprovided to, stored on, or used by these third-party providers and \nThird-Party Sites. We recommend that when you enter a Third-Party Site, \nyou review the Third Party Site’s privacy policy as it relates to \nsafeguarding your personal information. We use third-party advertising \ncompanies to serve ads when you visit the Website. These companies may \nuse information (not including your name, address, email address, or \ntelephone number) about your visits to the Website and Third-Party \nWebsites in order to provide advertisements about goods and services of \ninterest to you. On the Website, Google, as a third-party vendor, uses \nCookies to serve ads. Google’s use of the DoubleClick DART Cookie \nenables it to serve ads to the Website’s users based on their visit to \nthe Websites and Third-Party Websites. For more information on the DART \nCookie see: <a target=\"_blank\" href=\"http://www.doubleclick.com/privacy/faq.aspx\">http://www.doubleclick.com/privacy/faq.aspx</a>. You may opt out of the use of the DART Cookie by Google by visiting the Google Ad and Content Network Privacy Policy at: <a target=\"_blank\" href=\"http://www.google.com/privacy_ads.html\">http://www.google.com/privacy_ads.html</a>. You may opt out of targeting advertising for all NAI member ad networks by visiting: <a target=\"_blank\" href=\"http://www.networkadvertising.org/\">http://www.networkadvertising.org/</a>.\n By publishing an ad on the Website, you acknowledge and agree that the \nContent is public and accessible by any third party and that they may \nappear in search engine results (such as Yahoo!, MSN, Google, Altavista,\n and other search engines) and in the cache of those search engines, in \nfeeds and Third-Party Websites pursuant to cobranding agreements, and \nthat it is the sole responsibility of each of those search engines, \nThird-Party Websites or RSS web feed resources to update and/or to \nremove Content from their indexes and their cache. You agree and \nacknowledge that OLX is not be liable for the information published in \nsearch results or by any Third-Party Website that carries OLX postings.\n</p>\n<p><u>E. How Your Information is Used</u></p>\n<p>We may use information provided by you to: (i) enforce our Terms of \nUse, monitor user activity, such as keyword searches or new postings, \nand more effectively manage traffic on the Website; (ii) provide \ncustomer services, create and manage user accounts; and (iii) assist you\n with technical difficulties.  Also, we may share with third-party \nservice providers certain information, such as your browser capabilities\n or operating system, that we have collected in order to better \nunderstand which advertisements and services may interest you. We may \nblock users located in certain countries from using the Website. We may \nretain such information for as long as is required to fulfill our \nbusiness objective, even after your account is terminated.</p>\n<p><u>F. Protecting Your Personal Information</u></p>\n<p>You are a valued customer, and we recognize that protecting your \nprivacy is important to you. For this reason, we are committed to \nprotecting the personal information you provide in a variety of ways. We\n do not directly process any payments and do not store your credit card \ninformation. Secured socket layer (“SSL”) technology is used for \nprocessing payment transactions with third- party service provider \npartners, such as Click &amp; Buy, PayPal, and DineroMail. Your \nRegistration Information may be protected by a unique customer password \nand user ID. You should not disclose your password information to anyone\n and you should always remember to log off if using a shared computer. \nLastly, you may utilize the Website as an anonymous user by not \nregistering.  We have taken certain security protections in safeguarding\n your personal information. However, as with most electronic \ntransactions, no method is 100% safe. While we strive to use a \ncommercially acceptable means to protect the personal information you \nprovide, we cannot guarantee its security. Therefore, you acknowledge \nand agree that we assume no liability regarding the theft, loss, \nalteration or misuse of personal or other information or Content, \nincluding, without limitation, such information that has been provided \nto third parties or other users, or with regards to the failure of a \nthird party to abide by the agreement between us and such third party. \nYou may participate in our Forum or utilize our Comments feature. For \npostings to the Forum, your username will be posted. For postings using \nthe Comments feature, your name and email will only be posted if you \nprovide it in the comment. We strongly discourage posting any \ninformation on these features or in any Content posted by you that you \ndo not want others to see. You agree that you are responsible for \nmaintaining the confidentiality of your username and password, and all \nuses of your account, whether or not you have authorized such use.\n</p>\n<p><u>G. Accessing and Modifying Personal Information and Communication Preferences</u></p>\n<p>You may access, remove, review, and/or make changes to personal information that you have provided to us <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Contact Support form</a>.\n You need not register in order to post or respond to advertisements on \nthe Website. If you register, we may send you certain notifications, \nadvertisements, promotions, and specials. We may also send you any \nlegally required notifications and certain notifications, including but \nnot limited to, service related notices or notices regarding a change to\n any of our policies. For example, we may send you a notice regarding \nserver problems or scheduled maintenance to the Website. In order to \nopt-out of receiving these notices, you may need to deactivate your \naccount. You can opt out of certain e-mail communications from us, \nincluding our newsletters, advice on buying and selling on the Website, \nnotifications that a user has commented on your posting, and \nnotifications that you can refresh your posting. We will not change your\n preferences without your consent.  You cannot opt out of receiving \ntransactional communications from OLX related to your account.</p>\n<p><u>H. Disclosures</u></p>\n<p>On rare occasions, we may be required to disclose your personal \ninformation due to legal or regulatory requirements. In such instances, \nwe reserve the right to disclose your personal information as required \nin order to comply with our legal obligations, including but not limited\n to complying with court orders, warrants, subpoenas, service of process\n requirements, or discovery requests. We may also disclose information \nabout our users to law enforcement officers or others, in the good faith\n belief that such disclosure is reasonably necessary to enforce these \nTerms and/or Privacy Policy; respond to claims that any Content violates\n the rights of third-parties; or protect the rights, property, or \npersonal safety of OLX, our users or the general public.  If \nsubstantially all of our assets are sold or merged into another company,\n we will notify you of the transaction. The acquiring company shall be \ngiven access to your personal information without your consent. If we \nsell only a part of our business, the acquiring entity shall have access\n to your personal information without your consent and we may send you a\n notice regarding this sale.</p>\n<p><u>I. Notification of Changes</u></p>\n<p>We reserve the right to change these Terms from time to time, and at \nour sole discretion. We may send you a notice regarding material changes\n to these Terms, including the Privacy Policy or the Website. You should\n make note of the “last updated date” at the beginning of the Terms. \nWith this information, you should be able to identify if the Terms have \nbeen updated recently.</p>\n<p><u>J. Disputes</u></p>\n<p>Any disputes regarding your privacy are subject to the Terms, \nincluding but not limited to any provisions related to indemnification, \nlimitations on damages, and choice of law.</p>\n<p><u>K. Important Notices to Non-U.S. Residents</u></p>\n<p>OLX abides by the Safe Harbor principles set forth by the U.S. \nDepartment of Commerce regarding the collection, use, and retention of \napplicable data from the European Union.  However, it is important to \nnote that the Website and its servers are operated in the United States.\n  If you are located outside of the United States, please be aware that \nany personal information you provide to us will be transferred to the \nUnited States.  By using the Website and by providing us personal \ninformation when using our services, you consent to this transfer and \nour use of the information and data provided by you in accordance with \nthis Privacy Policy.</p>\n<p>In order to comply with the Safe Harbor framework, OLX commits to the\n resolution of complaints about your privacy and our collection or use \nof your personal information.  We have also committed to resolve any \ncomplaints by European Union citizens relating to this Privacy Policy, \nwhich cannot be resolved directly with our company, through the Council \nof Better Business Bureaus, Inc.’s Safe Harbor Privacy Dispute \nResolution Procedures.</p>\n<p>If you have any questions regarding this Privacy Policy, please \ncontact us as described in the “How to Contact Us” section. We will \ninvestigate your question, respond to your inquiry, and attempt to \nresolve any concerns regarding your privacy question. If you do not \nreceive acknowledgement of your complaint or if your complaint is not \nsatisfactorily addressed by OLX, you should then contact the Council of \nBetter Business Bureaus, Inc. as set forth below.</p>\n<p>In compliance with the US-EU Safe Harbor Principles, OLX commits to \nresolve complaints about your privacy and our collection or use of your \npersonal information. European Union citizens with inquiries or \ncomplaints regarding this privacy policy should first contact OLX as \ndescribed in the “How to Contact Us” section.</p>\n<p>OLX has further committed to refer unresolved privacy complaints \nunder the US-EU Safe Harbor Principles to an independent dispute \nresolution mechanism, the BBB EU SAFE HARBOR, operated by the Council of\n Better Business Bureaus. If you do not receive timely acknowledgment of\n your complaint, or if your complaint is not satisfactorily addressed by\n OLX, please visit the BBB EU SAFE HARBOR web site at \nwww.bbb.org/us/safe-harbor-complaints for more information and to file a\n complaint.</p>\n\n<p><u>L.How to Contact Us</u></p>\n<p>If you have questions about this Privacy Policy, please contact OLX <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Legal Issues report form</a> with “Privacy Policy” in the subject line.</p>\n</li><p></p>\n    </div>\n</section>";
  });

templates["desktop/partials/head"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<title>OLX Mobile</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n<link href=\"/css/desktop/styles.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\" />\n";
  });

templates["desktop/partials/header"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<header>\n	<div id=\"headerContent\">\n	    <a href=\"/\"><div class=\"olxLogo\"></div></a>\n	    <nav>\n	    	<ul id=\"userMenu\">\n	    		<li>\n	    			<a class=\"userMenuItem\" href=\"/login\">Ingresar</a> o <a class=\"userMenuItem\" href=\"/registration\">Registrarte</a>\n	    		</li>\n	    	</ul>\n	    </nav>\n	</div>\n</header>";
  });

templates["desktop/partials/layout"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, helperMissing=helpers.helperMissing, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<!doctype html>\n<html>\n	<head>\n	    ";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "desktop/partials/head", options) : helperMissing.call(depth0, "partial", "desktop/partials/head", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</head>\n	<body>\n		";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "desktop/partials/header", options) : helperMissing.call(depth0, "partial", "desktop/partials/header", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		<article>\n			<div id=\"content\">\n				";
  if (helper = helpers.body) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.body); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			</div>\n		</article>\n		<script src=\"/js/mergedAssets.js\"></script>\n		<script>\n			(function() {\n				var App = window.App = new (require('app/app'))("
    + escapeExpression((helper = helpers.json || (depth0 && depth0.json),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.appData), options) : helperMissing.call(depth0, "json", (depth0 && depth0.appData), options)))
    + ");\n				App.bootstrapData("
    + escapeExpression((helper = helpers.json || (depth0 && depth0.json),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.bootstrappedData), options) : helperMissing.call(depth0, "json", (depth0 && depth0.bootstrappedData), options)))
    + ");\n				App.start();\n			})();\n		</script>\n	</body>\n</html>\n";
  return buffer;
  });

templates["desktop/user/login"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</small>\n                ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    <small style=\"display: block; color: blue;\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailMsg)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</small>\n                ";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailErr)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</small>\n                ";
  return buffer;
  }

  buffer += "<h1>Login</h1>\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n            <form action=\"/login\" method=\"POST\">\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.err), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            	<span style=\"display: block;\">Username or Email</span>\n                <input type=\"text\" name=\"usernameOrEmail\">\n            	<span style=\"display: block;\">Password</span>\n                <input type=\"password\" name=\"password\">\n            	<span style=\"display: block;\"><input type=\"submit\" value=\"Login\"></span>\n            </form>\n		</section>\n	</div>\n</div>\n<h1>Already posted an ad</h1>\n<div class=\"row-fluid font-format\">\n    <div class=\"span6 celd-format\" >\n        <section style=\"padding-bottom:0px;\">\n            <form action=\"/loginAnon\" method=\"POST\">\n                ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailMsg), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailErr), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                <span style=\"display: block;\">\n                    Enter the email that you used to post your ad and receive the link to My OLX by email.\n                </span>\n                <input type=\"text\" name=\"email\">\n                <span style=\"display: block;\"><input type=\"submit\" value=\"Send\"></span>\n            </form>\n        </section>\n    </div>\n</div>";
  return buffer;
  });

templates["desktop/user/registration"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</small>\n                ";
  return buffer;
  }

  buffer += "<h1>Register</h1>\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n            <form action=\"/registration\" method=\"POST\">\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.err), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            	<span style=\"display: block;\">Username</span>\n                <input type=\"text\" name=\"username\">\n            	<span style=\"display: block;\">Email</span>\n                <input type=\"text\" name=\"email\">\n            	<span style=\"display: block;\">Password</span>\n                <input type=\"password\" name=\"password\">\n                <span style=\"display: block;\">\n                    <input type=\"checkbox\" name=\"agreeTerms\">\n                    I agree to the <a href=\"/terms\">Terms and Conditions</a> of OLX \n                </span>\n            	<span style=\"display: block;\"><input type=\"submit\" value=\"Register\"></span>\n            </form>\n		</section>\n	</div>\n</div>";
  return buffer;
  });

templates["enhanced/categories/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n 						<li>\n							<a href=\"/items?categoryId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&location="
    + escapeExpression(((stack1 = ((stack1 = (depth1 && depth1.params)),stack1 == null || stack1 === false ? stack1 : stack1.location)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a>\n						</li>\n					";
  return buffer;
  }

  buffer += "<h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1>\n\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n			<div id='subcategories.models'>\n			  	<ul>\n					";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.children), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				</ul>\n			</div>\n		</section>\n	</div>\n</div>";
  return buffer;
  });

templates["enhanced/categories/show"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n			<li><a href=\"/items?categoryId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&location="
    + escapeExpression(((stack1 = ((stack1 = (depth1 && depth1.params)),stack1 == null || stack1 === false ? stack1 : stack1.location)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a></li>\n		";
  return buffer;
  }

  buffer += "<!--h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1-->\n\n\n<section>\n  	<ul id=\"subCategory\">\n		";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.children), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</ul>\n</section>\n";
  return buffer;
  });

templates["enhanced/footer/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<section>\n		<a href=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.marketing)),stack1 == null || stack1 === false ? stack1 : stack1.link)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.marketing)),stack1 == null || stack1 === false ? stack1 : stack1.promo)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</a>\n	</section>\n";
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.marketing)),stack1 == null || stack1 === false ? stack1 : stack1.link), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  });

templates["enhanced/home/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program3(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program5(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				\n				<div class=\"swiper-slide\"> \n					<a href=\"items/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" >\n						<div class=\"slide\">\n				        	<div style=\"background-image: url('";
  if (helper = helpers.thumbnail) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.thumbnail); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "');\"></div>\n				        </div>\n				        <div class=\"caption\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.date)),stack1 == null || stack1 === false ? stack1 : stack1.since)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<br><span>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n				    </a>\n				</div>\n				\n			";
  return buffer;
  }

function program7(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				<div class=\"swiper-slide\"> \n					<a href=\"categories/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "?location="
    + escapeExpression(((stack1 = (depth1 && depth1.siteLocation)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" >\n						<div class=\"slide\">\n				          <div class=\"home-";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + " color\">\n				          	<p>";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</p>\n				          </div>\n				        </div>\n			        </a>\n				</div>\n			";
  return buffer;
  }

function program9(depth0,data) {
  
  var buffer = "", helper, options;
  buffer += "\n		"
    + escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.layout), options) : helperMissing.call(depth0, "partial", (depth0 && depth0.layout), options)))
    + "\n	";
  return buffer;
  }

  buffer += "<section id=\"postAd\">\n	<div>\n		<h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.postAd_prefix)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<strong>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.postAd_strong)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</strong>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.postAd_suffix)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1>\n		<a href=\"/posting\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.postAd_button)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</a>\n	</div>\n</section>\n\n<section id=\"newAds\">\n	<h2>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.newAds_prefix)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</h2>\n	<div class=\"swiper-containerAds\">	\n		<div class=\"swiper-wrapper\">\n			";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.whatsNewItems), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</div>\n	</div>\n</section>\n\n<section id=\"categories\">\n	<h2>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.categories_title)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h2>\n	<div class=\"swiper-containerCats\">	\n		<div class=\"swiper-wrapper\">\n			";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.categories)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(7, program7, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</div>\n	</div>\n</section>\n\n<section id=\"location\">\n	"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "location/select", options) : helperMissing.call(depth0, "view", "location/select", options)))
    + "\n</section>\n\n<section id=\"languages\">\n	";
  stack1 = (helper = helpers.layout || (depth0 && depth0.layout),options={hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data},helper ? helper.call(depth0, (depth0 && depth0.template), "/partials/languages", options) : helperMissing.call(depth0, "layout", (depth0 && depth0.template), "/partials/languages", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</section>\n";
  return buffer;
  });

templates["enhanced/items/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n	<section>	\n		<a href=\"/items/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.thumbnail), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			\n			<p>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.date)),stack1 == null || stack1 === false ? stack1 : stack1.since)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " in ";
  if (helper = helpers.displayLocation) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.displayLocation); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</p>\n			<div class=\"title\"><h2><span><span>";
  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span></span></h2></div>\n			";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n		</a>\n	</section>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		        <div class=\"image filled\" style=\"background-image:url(";
  if (helper = helpers.thumbnail) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.thumbnail); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "); ?>);\"></div>\n			";
  return buffer;
  }

function program4(depth0,data) {
  
  
  return "\n				<div class=\"image\"></div>\n			";
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				<h3>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h3>\n			";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n";
  return buffer;
  });

templates["enhanced/items/search"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<h3>Results for: ";
  if (helper = helpers.searchTerm) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.searchTerm); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n\n"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{
    'items': ((depth0 && depth0.items))
  },data:data},helper ? helper.call(depth0, "items/index", options) : helperMissing.call(depth0, "view", "items/index", options)))
    + "\n";
  return buffer;
  });

templates["enhanced/items/show"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n		";
  stack1 = (helper = helpers.ifC || (depth0 && depth0.ifC),options={hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data},helper ? helper.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images)),stack1 == null || stack1 === false ? stack1 : stack1.length), "==", 1, options) : helperMissing.call(depth0, "ifC", ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images)),stack1 == null || stack1 === false ? stack1 : stack1.length), "==", 1, options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			<div class=\"onePicture\">\n				<div class=\"slide\">\n		          <div style=\"background-image: url('"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images)),stack1 == null || stack1 === false ? stack1 : stack1[0])),stack1 == null || stack1 === false ? stack1 : stack1.url)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "');\"></div>\n		        </div>\n			</div>\n		";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<div class=\"swiper-containerItem\">\n			<div class=\"swiper-wrapper\">\n				";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			</div>\n			<div class=\"slidePagination\"></div>\n		</div>\n		";
  return buffer;
  }
function program5(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				  <div class=\"swiper-slide\"> \n						<div class=\"slide\">\n				          <div style=\"background-image: url('";
  if (helper = helpers.url) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.url); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "');\"></div>\n				        </div>\n					</div>\n				";
  return buffer;
  }

function program7(depth0,data) {
  
  
  return "\n		<div class=\"noPicture\">\n			<span></span>\n			<p>No hay fotitos!!</p>\n			<div class=\"clear\"></div>\n		</div>\n	";
  }

function program9(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n			<li>";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ": <strong>";
  if (helper = helpers.value) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.value); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</strong></li>\n		";
  return buffer;
  }

function program11(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<img style=\"width:100%\" src=\"http://maps.googleapis.com/maps/api/staticmap?center="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.latitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ","
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.longitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " ?>&zoom=14&size=320x100&markers="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.latitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ","
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.longitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "&sensor=false\">\n	";
  return buffer;
  }

function program13(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.phone), {hash:{},inverse:self.program(16, program16, data),fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		";
  return buffer;
  }
function program14(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.user)),stack1 == null || stack1 === false ? stack1 : stack1.username)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " : ";
  if (helper = helpers.phone) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.phone); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\n			";
  return buffer;
  }

function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.user)),stack1 == null || stack1 === false ? stack1 : stack1.username)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n			";
  return buffer;
  }

function program18(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		";
  return buffer;
  }
function program19(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n			";
  return buffer;
  }

function program21(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<div class=\"action call trackMe\" data-tracking=\"itemPage-clickCall\">\n			<a href=\"tel:"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" >\n				<span>Call</span>\n			</a>\n		</div>\n		<div class=\"action sms trackMe\" data-tracking=\"itemPage-clickSms\">\n			<a href=\"sms:"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" >\n				<span>SMS</span>\n			</a>\n		</div>\n	";
  return buffer;
  }

function program23(depth0,data) {
  
  
  return "fullWidth";
  }

  buffer += "<section id=\"itemPage\">\n	";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images), {hash:{},inverse:self.program(7, program7, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	<span>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.location)),stack1 == null || stack1 === false ? stack1 : stack1.cityName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n	<h1>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1>\n	<p class=\"desc\">";
  stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n	\n	<ul id=\"optionals\">\n		";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.optionals), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</ul>\n	";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n	<div class=\"clear\"></div>\n</section>\n\n<section id=\"actions\">\n	<div class=\"background\"></div>\n	<span>\n		";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.user)),stack1 == null || stack1 === false ? stack1 : stack1.username), {hash:{},inverse:self.program(18, program18, data),fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</span>\n	";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone), {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	<div class=\"action email ";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone), {hash:{},inverse:self.noop,fn:self.program(23, program23, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " trackMe\" data-tracking=\"itemPage-clickEmail\">\n		<div>\n			<span>EMAIL</span>\n		</div>\n	</div>\n	<div class=\"clear\"></div>\n</section>\n\n\n<!--a href=\"/items?categoryId="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.category)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "&location=";
  if (helper = helpers.location) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.location); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&relatedAds="
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">Related Ads</a-->\n";
  return buffer;
  });

templates["enhanced/left-panel/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  
  return "\n				<li class=\"myAds\"><a href=\"/\">Mis Avisos</a></li>\n				<li class=\"myFav\"><a href=\"/\">Favoritos</a></li>\n				<li class=\"login\"><a href=\"/login\">Login</a></li>\n			";
  }

function program3(depth0,data) {
  
  
  return "\n				<li class=\"login\"><a href=\"/registration\">Registration</a></li>\n			";
  }

function program5(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				<li><a href=\"/categories/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "?location="
    + escapeExpression(((stack1 = (depth1 && depth1.siteLocation)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" class=\"home-";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a></li>\n			";
  return buffer;
  }

  buffer += "<div id=\"overlay\"></div>\n<nav id=\"leftPanel\">\n	<div>\n		<ul class=\"menu\">\n			<li class=\"start\"><a href=\"/\">Inicio</a></li>\n			<li class=\"post\"><a href=\"/\">Publicá un aviso gratis</a></li>\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.user), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			<li class=\"settings\"><a href=\"/\">Settings</a></li>\n		</ul>\n		<ul class=\"categories\">\n			<li class=\"title\">CATEGORIAS</li>\n			";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.categories)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(5, program5, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</ul>\n	</div>\n</nav>";
  return buffer;
  });

templates["enhanced/location/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += " > "
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  return buffer;
  }

function program3(depth0,data) {
  
  
  return "Results";
  }

function program5(depth0,data) {
  
  
  return "Popular Cities";
  }

function program7(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n 						<li>\n							<a href=\"/?cityId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"city\" style=\"color:black;\">";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a>\n						</li>\n					";
  return buffer;
  }

  buffer += "<h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</h1>\n\n<form action=\"/location\">\n	<input type=\"text\" name=\"search\"><button type=\"submit\">Search</button>\n	<small>Type a city</small>\n</form>\n\n<h3>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.search), {hash:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</h3>\n\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n			<div id='cities.models'>\n			  	<ul>\n					";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.cities), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				</ul>\n			</div>\n		</section>\n	</div>\n</div>";
  return buffer;
  });

templates["enhanced/location/select"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program3(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program5(depth0,data) {
  
  
  return "Change city";
  }

function program7(depth0,data) {
  
  
  return "Select a city";
  }

  buffer += "<strong>";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</strong>\n<a href=\"location\">";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</a>";
  return buffer;
  });

templates["enhanced/pages/terms"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<section>\n  	    	<div class=\"breadcrumbs\">\n    <p style=\"border:none;\" class=\"searchResultsTerm\">Terms Of Use</p>\n	</div>\n<div class=\"disclamer\">   \n    <p><br>PLEASE CAREFULLY READ THESE TERMS OF USE. BY USING THIS \nWEBSITE YOU INDICATE YOUR UNDERSTANDING AND ACCEPTANCE OF THESE TERMS. \nIF YOU DO NOT AGREE TO THESE TERMS YOU MAY NOT USE THIS WEBSITE.</p>\n    <p>\n</p><li>\n<h3>ACCEPTANCE</h3>\n<p>OLX, Inc. and its affiliates (OLX) provide a collection of online \nresources which include classified advertisements, forums, and certain \ne-mail services (collectively, the \"Service\") on the website <a target=\"_blank\" href=\"http://www.olx.com/\">www.olx.com</a> and its affiliated sites (including without limitation <a target=\"_blank\" href=\"http://www.mundoanuncio.com/\">www.mundoanuncio.com</a> and <a target=\"_blank\" href=\"http://www.edeng.cn/\">www.edeng.cn</a>)\n (collectively, the \"Website\") subject to these Terms of Use (these \n\"Terms\").  By using the Service, you agree to comply with these Terms.  \nAdditionally, when using a portion of the Service, you agree to conform \nto any applicable posted guidelines for such Service, which may change \nfrom time to time. You understand and agree that you are solely \nresponsible for reviewing these Terms from time to time. Should you \nobject to any term or condition of these Terms, any guideline, or any \nsubsequent changes thereto or become unhappy with OLX in any way, your \nonly choice is to immediately discontinue use of OLX. These Terms may be\n updated by OLX at any time at its sole discretion. OLX may send you \nnotices of changes to the Website or the Terms pursuant to Section 21(I)\n herein. OLX may provide a translation of the English version of the \nTerms into other languages. You understand and agree that any \ntranslation of the Terms into other languages is for your convenience \nonly and that the English version governs the terms of your relationship\n with OLX. Furthermore, if there are any inconsistencies between the \nEnglish version of the Terms and any translation, the English version of\n the Terms shall govern. You understand and agree that to the extent you\n are located in the United States, you will utilize the Service in \ncompliance with any laws, regulations, and guidelines that may be under \nthe jurisdiction of the Office of Foreign Asset Control, U.S. Department\n of Treasury.</p>\n</li>\n<li>\n<h3>DESCRIPTION OF SERVICE AND CONTENT POLICY</h3>\n<p>A.  OLX is the next generation of free online classifieds.  We act as\n a venue to allow our users who comply with these Terms to offer, sell, \nand buy products and services listed on the Website.  Although you may \nbe able to conduct payment and other transactions through the Website, \nusing third-party vendors such as PayPal, OLX is not in any way in \ninvolved in such transactions.  As a result, and as discussed in more \ndetail in these Terms, you hereby acknowledge and agree that OLX is not a\n party to such transactions, has no control over any element of such \ntransactions, and shall have no liability to any party in connection \nwith such transactions. You use the Service and the Website at your own \nrisk.</p>\n<p>B.  You understand that OLX does not control, and is not responsible \nfor ads, directory information, business listings/information, messages \nbetween users, including without limitation e-mails outside OLX’s e-mail\n system or other means of electronic communication, whether through the \nWebsite or another Third Party Website (defined below) or offerings, \ncomments, user postings, files, images, photos, video, sounds, business \nlistings/information and directory information or any other material \nmade available through the Website and the Service (\"Content\"), and that\n by using the Website and the Service, you may be exposed to Content \nthat is offensive, indecent, inaccurate, misleading, or otherwise \nobjectionable.  You acknowledge and agree that you are responsible for \nand must evaluate, and bear all risks associated with, the use of any \nContent, that you may not rely on said Content, and that under no \ncircumstances will OLX be liable in any way for the Content or for any \nloss or damage of any kind incurred as a result of the use of any \nContent listed, e-mailed or otherwise made available via the Service.  \nYou acknowledge and agree that OLX does not pre-screen or approve any \nContent, but that OLX has the right, in its sole and absolute \ndiscretion, to refuse, delete or move any Content that is or may be \navailable through the Service, for violating these Terms or for any \nother reason or no reason at all.  Furthermore, the Website and Content \navailable through the Website may contain links to other third party \nwebsites (“Third Party Websites”), which are completely unrelated to \nOLX. If you link to Third Party Websites, you may be subject to those \nThird Party Websites’ terms and conditions and other policies. OLX makes\n no representation or guarantee as to the accuracy or authenticity of \nthe information contained in any such Third Party Website, and your \nlinking to any other websites is completely at your own risk and OLX \ndisclaims all liability thereto.</p>\n<p>C.  You acknowledge and agree that you are solely responsible for \nyour own Content posted on, transmitted through, or linked from the \nService and the consequences of posting, transmitting, linking or \npublishing it.  More specifically, you are solely responsible for all \nContent that you upload, email or otherwise make available via the \nService. In connection with such Content posted on, transmitted through,\n or linked from the Service by you, you affirm, acknowledge, represent, \nand warrant that: (i) you own or have the necessary licenses, rights, \nconsents, and permissions to use such Content on the Service and Website\n (including without limitation all patent, trademark, trade secret, \ncopyright or other proprietary rights in and to any and all such \nContent) and authorize OLX to use such Content to enable inclusion and \nuse of the Content in the manner contemplated by the Service, the \nWebsite and these Terms; and (ii) you have the written consent, release,\n and/or permission of each and every identifiable individual person or \nbusiness in the Content to use the name or likeness of each and every \nsuch identifiable individual person or business to enable inclusion and \nuse of the Content in the manner contemplated by the Service, the \nWebsite and these Terms.  For clarity, you retain all of your ownership \nrights in your Content; however, by submitting the Content to OLX, you \nhereby grant to OLX an irrevocable, non-cancellable, perpetual, \nworldwide, non-exclusive, royalty-free, sub-licenseable, transferable \nlicense to use, reproduce, distribute, prepare derivative works of, \ndisplay, and perform the Content in connection with the Website and \nOLX's (and its successors') business, including without limitation for \nthe purpose of promoting and redistributing part or all of the Website \nand Content therein (and derivative works thereof) in any media formats \nand through any media channels now or hereafter known.  These rights are\n required by OLX in order to host and display your Content. Furthermore,\n by you posting Content to any public area of the Service, you agree to \nand do hereby grant to OLX all rights necessary to prohibit or allow any\n subsequent aggregation, display, copying, duplication, reproduction, or\n exploitation of the Content on the Service or Website by any party for \nany purpose. You also hereby grant each user of the Website a \nnon-exclusive license to access your Content through the Website. The \nforegoing license to each user granted by you terminates once you remove\n or delete such Content from the Website.</p>\n<p>D.  OLX does not endorse any Content or any opinion, statement, \nrecommendation, or advice expressed therein, and OLX expressly disclaims\n any and all liability in connection with user Content. OLX does not \npermit copyright infringing activities and infringement of intellectual \nproperty rights on the Website, and OLX may, at its sole discretion, \nremove any infringing Content if properly notified that such Content \ninfringes on another's intellectual property rights. OLX reserves the \nright to remove any Content without prior notice. <b>OLX may also \nterminate a user's access to the Website, if they are determined to be a\n repeat infringer. A repeat infringer is a user who has been notified of\n infringing activity more than twice and/or has had a user submission \nremoved from the Website more than twice.</b> Further, at its sole \ndiscretion, OLX reserves the right to decide whether any Content is \nappropriate and complies with these Terms for violations other than \ncopyright infringement and violations of intellectual property law, such\n as, but not limited to, pornography, obscene, libelous, or defamatory \nmaterial, or excessive length. OLX may remove such Content and/or \nterminate a user's access for uploading such material in violation of \nthese Terms at any time, without prior notice and at its sole \ndiscretion.</p>\n<p>E.  OLX may provide a video service to you if you upload photographs \nfor your ad.  By uploading your photographs, you irrevocably consent to \nthe use of your photographs for this service and represent and warrant \nthat you have all right, title and interest necessary to upload and use \nthe photographs on this service.  Under this service, using a third \nparty application or service, OLX may, at its discretion, create a video\n of your photographs, upload the video via <a href=\"http://www.youtube.com/\" target=\"_blank\">www.youtube.com</a> or another third party service provider, as determined by OLX at its discretion, and embed the video into your ad on OLX.</p>\n</li>\n<li>\n<h3>FEATURED ADS</h3>\n<p>OLX offers a service known as \"Featured Ads\" where users may pay a \nnon-refundable fee to have their ads posted in selected locations on the\n Website, thus potentially increasing an ads' visibility. In order to \npurchase a Featured Ad, you may be required to transmit certain \ninformation through a third party service provider, Click &amp; Buy, a \nThird Party Website, which may be governed by its own terms of use and \nother policies. OLX makes no representation or guarantee as to the \nsafety or security of the information transmitted to any Third Party \nWebsite, and your linking to any Third Party Website is completely at \nyour own risk, and OLX disclaims all liability related thereto.</p>\n<p><b>Featured Ads are subject to the Terms listed herein, as well as additional terms of service, which can be viewed</b> <a href=\"http://www.olx.com/featured_listings.php\">here</a></p>\n</li>\n<li>\n<h3>CONDUCT</h3>\n<p>You agree not to post, email, or otherwise make available Content:</p>\n<ul>\n	<li>that violates any law;</li>\n	<li>that is copyrighted or patented, protected by trade secret or \ntrademark, or otherwise subject to third party proprietary rights, \nincluding privacy and publicity rights, unless you are the owner of such\n rights or have\npermission or a license from their rightful owner to post the material \nand to grant OLX all of the license rights granted herein;</li>\n	<li>that infringes any of the foregoing intellectual property rights of\n any party, or is Content that you do not have a right to make available\n under any law or under contractual or fiduciary relationships;</li>\n	<li>that violates the Fair Housing Act, as amended, including its \nimplementing regulations and any Presidential Executive Order related \nthereto, by stating, in any notice or advertisements for the sale or \nrental of any dwelling not excluded by such Act, a discriminatory \npreference based sex, familial status or handicap, race, color, national\n origin, religion, (or violates any applicable state or local law \nprohibiting discrimination on the basis of aforementioned \ncharacteristics or any other characteristics);</li>\n	<li>that is harmful, abusive, unlawful, threatening, harassing, \ndefamatory, pornographic, libelous, invasive of another's privacy or \nother rights, or harms or could harm minors in any way;</li>\n	<li>that harasses, degrades, intimidates or is hateful toward an \nindividual or group of individuals on the basis of religion, gender, \nsexual orientation, race, ethnicity, age, or disability;</li>\n	<li>that violates any federal, state, or local equal employment laws, \nincluding but not limited to those prohibiting the stating, in any \nadvertisement for employment, a preference or requirement based on race,\n color, religion, sex, national origin, age, or disability of the \napplicant.</li>\n	<li>that includes personal or identifying information about another person without that person's explicit consent;</li>\n	<li>that impersonates any person or entity, including, but not limited \nto, an OLX employee, or falsely states or otherwise misrepresents an \naffiliation with a person or entity;</li>\n	<li>with respect to employers that employ four or more employees, that \nviolates any applicable provision of the Immigration and Nationality \nAct, including without limitation requiring U.S. citizenship or lawful \npermanent residency (green card status) as a condition for employment, \nunless otherwise required in order to comply with law, regulation, \nexecutive order, or federal, state, or local government contract.</li>\n	<li>that is false, deceptive, misleading, deceitful, misinformative, or constitutes \"bait and switch\" offer;</li>\n	<li>that constitutes or contains \"pyramid schemes,\" \"affiliate \nmarketing,\" \"link referral code,\" \"junk mail,\" \"spam,\" \"chain letters,\" \nor unsolicited advertisements of a commercial nature;</li>\n	<li>that constitutes or contains any form of advertising or \nsolicitation if (1) posted in areas or categories of the Website which \nare not designated for such purposes; or (2) e-mailed to OLX users who \nhave requested not to be contacted about other services, products or \ncommercial interests;</li>\n	<li>that includes links to commercial services or Third Party Websites, except as specifically allowed by OLX;</li>\n	<li>that advertises any illegal services or the sale of any items the \nsale of which is prohibited or restricted by applicable law, including \nwithout limitation items the sale of which is prohibited or regulated by\n New York law;</li>\n	<li>that contains software viruses or any other computer code, files or\n programs designed to interrupt, destroy or limit the functionality of \nany computer software or hardware or telecommunications equipment;</li>\n	<li>that disrupts the normal flow of dialogue with an excessive number \nof messages (flooding attack) to the Service, or that otherwise \nnegatively affects other users' ability to use the Service; or</li>\n	<li>that employs misleading email addresses, or forged headers or \notherwise manipulated identifiers in order to disguise the origin of \nContent transmitted through the Service.</li>\n</ul>\n<p>Additionally, you agree not to:</p>\n<ul>\n	<li>contact anyone who has asked not to be contacted, or make \nunsolicited contact with anyone for any commercial purpose; or to \n\"stalk\" or otherwise harass anyone;</li>\n	<li>make any libelous or defamatory comments or postings to or against anyone;</li>\n	<li>collect personal data about other users or entities for commercial or unlawful purposes;</li>\n	<li>use automated means, including spiders, robots, crawlers, data \nmining tools, or the like to download or scrape data from the Service, \nexcept for internet search engines (e.g,. Google) and non-commercial \npublic archives (e.g. archive.org) that comply with our robots.txt file;</li>\n	<li>post Content that is outside the local area or not relevant to the \nlocal area, repeatedly post the same or similar Content, or otherwise \nimpose unreasonable or disproportionately large loads on our servers and\n other infrastructure;</li>\n	<li>post the same item or service in multiple classified categories or forums, or in multiple metropolitan areas;</li>\n	<li>attempt to gain unauthorized access to computer systems owned or \ncontrolled by OLX or engage in any activity that disrupts, diminishes \nthe quality of, interferes with the performance of, or impairs the \nfunctionality of, the Service or the Website.</li>\n	<li>use any form of automated device or computer program (sometimes \nreferred to as \"flagging tools\") that enables the use of OLX's \"flagging\n system\" or other community control systems without each flag being \nmanually entered by a human that initiates the flag (an \"automated \nflagging device\"), or use any such flagging tool to remove posts of \ncompetitors, other third parties or to remove posts without a reasonable\n good faith belief that the post being flagged violates these Terms or \nany applicable law or regulation.</li>\n	<li>use any automated device or software that enables the submission of\n automatic postings on OLX without human intervention or authorship (an \n\"automated posting device\"), including without limitation, the use of \nany such automated posting device in connection with bulk postings, or \nfor automatic submission of postings at certain times or intervals; or</li>\n</ul>\n</li>\n<li>\n<h3>PAID POSTINGS</h3>\n<p>OLX may charge a fee to post Content in some areas of the Service. \nThe fee permits certain Content to be posted in a designated area of the\n Website. Each party posting Content to the Service is responsible for \nsaid Content and compliance with the Terms. Any such fees paid hereunder\n are non-refundable in the event any Content is removed from the Service\n for violating these Terms</p>\n</li>\n<li>\n<h3>POSTING AGENTS</h3>\n<p>As used herein, the term \"Posting Agent\" refers to a third-party \nagent, service, or intermediary that offers to post Content to the \nService on behalf of others. OLX prohibits the use of Posting Agents, \ndirectly or indirectly, without the express written permission of OLX  \nIn addition, Posting Agents are not permitted to post Content on behalf \nof others, directly or indirectly, or otherwise access the Service to in\n order to post Content on behalf of others, except with express written \npermission or license from OLX.</p>\n</li>\n<li>\n<h3>ACCESS TO THE SERVICE</h3>\n<p>OLX grants you a limited, revocable, non-exclusive license to access \nand use the Service for personal use.  This license granted herein does \nnot include any of the following: (a) access to or use of the Service by\n Posting Agents; or (b) any collection, aggregation, copying, \nduplication, display or derivative use of the Service nor any use of \ndata mining, robots, spiders, or similar data gathering and extraction \ntools for any purpose unless expressly permitted by OLX or as otherwise \nset forth in these Terms. Notwithstanding the foregoing, general purpose\n internet search engines and non-commercial public archives that gather \ninformation for the sole purpose of displaying hyperlinks to the \nService, provided they each do so from a stable IP address or range of \nIP addresses using an easily identifiable agent and comply with our \nrobots.txt file, may engage in the activities set forth in (b). For \npurposes of this exception, a \"general purpose internet search engine\" \ndoes not include a website or search engine or other service that \nspecializes in classified listings including any subset of classifieds \nlistings such as housing, for sale, jobs, services, or personals, or \nwhich otherwise provides classified ad listing services. The license set\n forth in this Section permits you to display on your website, or create\n a hyperlink thereto, individual postings on the Service so long as such\n use is for noncommercial and/or news reporting purposes only (e.g., for\n use in personal blogs or other personal online media). If the total \nnumber of such postings displayed on or linked to your website exceeds \nninety nine (99) postings, your use will be considered to be in \nviolation of these Terms, unless OLX expressly grants you permission \notherwise. You are also permitted to create a hyperlink to the home page\n of the Website so long as the link does not portray OLX, its employees,\n affiliates or agents in a false, confusing, misleading, derogatory, or \notherwise offensive matter. OLX may offer parts of the Service in RSS \nformat for the purpose of embedding individual RSS feeds into a personal\n website or blog, or view postings through third party software news \naggregators. OLX permits you to display, excerpt from, and link to any \nsuch RSS feeds on your personal website or personal blow, provided that \n(a) your use of the RSS feed is for personal, non-commercial purposes \nonly, (b) each title within an RSS feed is correctly linked back to the \noriginal post on the Service and redirects the user to the post when the\n user clicks on it, (c) you provide, in a conspicuous manner, proper \nattribution to 'OLX' as the source of the RSS feed, (d) your use or \ndisplay of the RSS feed does not suggest that OLX promotes or endorses \nany third party causes, opinions, ideas, web sites, products or \nservices, (e) you do not redistribute the RSS feed, and (f) your use \ndoes not overburden or otherwise slow the performance of OLX's systems. \nOLX reserves all rights in and to the content of any RSS feeds provided \nthrough the Service and may terminate any RSS feed at any time without \nnotice. Use of the Service beyond the scope of authorized access as set \nforth in these Terms immediately terminates any permission or license \ngranted herein. In order to collect, aggregate, copy, duplicate, display\n or make derivative use of the Service or any Content made available via\n the Service for other purposes (including commercial\npurposes) not stated herein, you must first obtain a license from OLX.\n</p>\n</li>\n<li>\n<h3>NOTIFICATION OF CLAIMS OF INFRINGEMENTS</h3>\n<p>If you are a copyright owner or an agent thereof and believe that any\n user Content or other content infringes upon your copyrights, you may \nsubmit a notification pursuant to the Digital Millennium Copyright Act \n(\"DMCA\") by providing our Copyright Agent with the following information\n in writing (see 17 U.S.C 512(c)(3) for further detail):</p>\n<p>1.A physical or electronic signature of a person authorized to act on\n behalf of the owner of an exclusive right that is allegedly infringed;</p>\n<p>2.Identification of the copyrighted work claimed to have been \ninfringed, or, if multiple copyrighted works at a single online site are\n covered by a single notification, a representative list of such works \nat that site;</p>\n<p>3.Identification of the material that is claimed to be infringing or \nto be the subject of infringing activity and that is to be removed or \naccess to which is to be disabled and information reasonably sufficient \nto permit OLX to locate the material;</p>\n<p>4.Information reasonably sufficient to permit OLX to contact you, \nsuch as an address, telephone number, and, if available, an electronic \nmail address;</p>\n<p>5.A statement that you have a good faith belief that use of the \nmaterial in the manner complained of is not authorized by the copyright \nowner, its agent, or the law; and</p>\n<p>6.A statement that the information in the notification is accurate, \nand under penalty of perjury, that you are authorized to act on behalf \nof the owner of an exclusive right that is allegedly infringed.</p>\n<p>OLX's designated Copyright Agent to receive notifications of claimed infringement is: <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Legal Issues report form</a>\n or OLX, S.A., Uriarte 2489 - 3rd Floor, Buenos Aires, Argentina, \nAttention: DMCA Complaint . For clarity, only DMCA notices should go to \nthe Copyright Agent; any other feedback, comments, requests for \ntechnical support, and other communications should be directed to OLX's \ncustomer service by clicking on the Contact Us link on the OLX website. \nYou acknowledge that if you fail to comply with all of the requirements \nof this Section 8, your DMCA notice may not be valid.</p>\n</li>\n<li>\n<h3>INTELLECTUAL PROPERTY RIGHTS</h3>\n<p>You acknowledge and agree that the materials on the Website, other \nthan the user Content that you licensed under Section 2(C) of the Terms,\n including without limitation, the text, software, scripts, graphics, \nphotos, sounds, music, videos, interactive features and the like \n(\"Materials\") and the trademarks, service marks and logos contained \ntherein (\"Marks\"), are owned by or licensed to OLX, and are subject to \ncopyright and other intellectual property rights under United States and\n foreign laws and international conventions. Materials on the Website \nare provided to you AS IS for your information and personal use only and\n may not be used, copied, reproduced, distributed, transmitted, \nbroadcast, displayed, sold, licensed, or otherwise exploited for any \nother purposes whatsoever without the prior written consent of the \nrespective owners. OLX reserves all rights not expressly granted herein \nto the Website and the Materials. You agree to not engage in the use, \ncopying, or distribution of any of the Materials other than as expressly\n permitted herein, including any use, copying, or distribution of \nMaterials of third parties obtained through the Website for any \ncommercial purposes. If you download or print a copy of the Materials \nfor personal use, you must retain all copyright and other proprietary \nnotices contained therein. You agree not to circumvent, disable or \notherwise interfere with security related features of the Website or \nfeatures that prevent or restrict use or copying of any Materials or \nenforce limitations on use of the Website or the Materials therein. The \nService is protected to the maximum extent permitted by copyright laws, \nother laws, and international treaties. Content displayed on or through \nthe Service is protected by copyright as a collective work and/or \ncompilation,\npursuant to copyrights laws, other laws, and international conventions. \nAny reproduction, modification, creation of derivative works from or \nredistribution of the Website, the Materials, or the collective work or \ncompilation is expressly prohibited. Copying or reproducing the Website,\n the Materials, or any portion thereof to any other server or location \nfor further reproduction or redistribution is expressly prohibited. You \nfurther agree not to reproduce, duplicate or copy Content or Materials \nfrom the Service, and agree to abide by any and all copyright notices \nand other notices displayed on the Service. You may not decompile or \ndisassemble, reverse engineer or otherwise attempt to discover any \nsource code contained in the Service. Without limiting the foregoing, \nyou agree not to reproduce, duplicate, copy, sell, resell or exploit for\n any commercial purposes, any aspect of the Service. OLX is a service \nmark registered with the U.S. Patent and Trademark Office and in various\n other jurisdictions.</p>\n</li>\n<li>\n<h3>USER SUBMISSIONS</h3>\n<p>You understand that when using the Website, you will be exposed to \nContent from a variety of sources, and that OLX is not responsible for \nthe accuracy, usefulness, safety, or intellectual property rights of or \nrelating to such Content, and you agree and assume all liability for \nyour use. You further understand and acknowledge that you may be exposed\n to Content that is inaccurate, offensive, indecent, or objectionable, \ndefamatory or libelous and you agree to waive, and hereby do waive, any \nlegal or equitable rights or remedies you have or may have against OLX \nwith respect thereto.</p>\n</li>\n<li>\n<h3>INDEMNITY</h3>\n<p>You agree to defend, indemnify and hold harmless OLX, its officers, \nsubsidiaries, affiliates, successors, assigns, directors, officers, \nagents, service providers, suppliers and employees, from and against any\n and all claims, damages, obligations, losses, liabilities, costs or \ndebt, and expenses (including but not limited to attorneys' fees) \narising from: (i) your use of and access to the Website and/or the \nService; (ii) your violation of any term of these Terms; (iii) your \nviolation of any third party right, including without limitation any \ncopyright, trademark, trade secret or other property, or privacy right; \nor (iv) any claim that your Content caused damage to a third party. This\n defense and indemnification obligation will survive termination, \nmodification or expiration of these Terms and your use of the Service \nand the Website.</p>\n</li>\n<li>\n<h3>NO SPAM POLICY</h3>\n<p>You understand and agree that sending unsolicited email \nadvertisements or other unsolicited communications to OLX email \naddresses or through OLX computer systems are expressly prohibited by \nthese Terms. You acknowledge and agree that from time to time OLX may \nmonitor email usage using human monitors or automated software to flag \ncertain words associated with spam or scams in emails that are sent \nbetween one user to another in the OLX e mail system. Any communication \nbetween yourself and any other user utilizing the communication features\n available on the Service and the Website may be used only in accordance\n with the Terms. Any unauthorized use of OLX computer systems is a \nviolation of these Terms and certain federal and state laws. Such \nviolations may subject the sender and his or her agents to civil and \ncriminal penalties.</p>\n</li>\n<li>\n<h3>DEALINGS WITH ORGANIZATIONS AND INDIVIDUALS</h3>\n<p>You acknowledge and agree that OLX shall not be liable for your \ninteractions with any organizations and/or individuals on the Website or\n through the Service. This includes, but is not limited to, payment and \ndelivery of goods and services, and any other terms, conditions, \nwarranties or representations associated with any interaction you may \nhave with other organizations and/or individuals. These dealings are \nsolely between you and such organizations and/or individuals. You agree \nand acknowledge that OLX shall not be responsible or liable for any loss\n or damage of any sort incurred as the result of any such dealings or \ninteractions. If there is a dispute between participants on the Website,\n or between users and any third party, you understand and agree that OLX\n is under no obligation to become involved in such dispute. In the event\n that you have a dispute with one or more other users, you hereby \nrelease OLX, its officers, employees, agents and successors from any and\n all claims, demands and damages (actual and consequential) of every \nkind or nature, known or unknown, suspected and unsuspected, disclosed \nand undisclosed, arising out of or in any way related to such disputes \nand/or our Service.</p>\n</li>\n<li>\n<h3>LIMITATION AND TERMINATION OF SERVICE</h3>\n<p>You acknowledge and agree that OLX may establish limits from time to \ntime concerning use of the Service, including among others, the maximum \nnumber of days that Content will be maintained or retained by the \nService, the maximum number and size of postings, e-mail messages, or \nother Content that may be transmitted or stored by the Service, and the \nfrequency with which you may access the Service or the Website. You \nacknowledge and agree that OLX has no responsibility or liability for \nthe deletion or failure to store any Content maintained or transmitted \nby the Website or the Service. You acknowledge and agree that OLX \nreserves the right at any time to modify or discontinue the Service (or \nany part thereof) with or without notice, and that OLX shall not be \nliable to you or to any third party for any such modification, \nsuspension or discontinuance of the Service. You acknowledge and agree \nthat OLX, in its sole and absolute discretion, has the right (but not \nthe obligation) to delete or deactivate your account, block your e-mail \nor IP address, or otherwise terminate your access to or use of the \nService (or any part thereof), immediately and without notice, and \nremove and discard any Content within the Service, for any reason or no \nreason at all, including, without limitation, if OLX believes that you \nhave violated these Terms. Further, you agree that OLX shall not be \nliable to you or any third-party for any termination of your access to \nthe Website or the Service. Further, you agree not to attempt to use the\n Service after any such termination.</p>\n</li>\n<li>\n<h3>DISCLAIMER OF WARRANTIES</h3>\n<p>YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT USE OF THE WEBSITE AND THE \nSERVICE IS ENTIRELY AT YOUR OWN RISK AND THAT THE WEBSITE AND THE \nSERVICE ARE PROVIDED ON AN \"AS IS\" OR \"AS AVAILABLE\" BASIS, WITHOUT ANY \nWARRANTIES OF ANY KIND. ALL EXPRESS AND IMPLIED WARRANTIES, INCLUDING, \nWITHOUT LIMITATION, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE, AND NON-INFRINGEMENT OF PROPRIETARY RIGHTS ARE \nEXPRESSLY DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. TO THE \nFULLEST EXTENT PERMITTED BY LAW OLX, ITS OFFICERS, DIRECTORS, EMPLOYEES,\n AND AGENTS DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, IN CONNECTION \nWITH THE WEBSITE AND YOUR USE THEREOF. OLX MAKES NO WARRANTIES OR \nREPRESENTATIONS ABOUT THE ACCURACY OR COMPLETENESS OF THE WEBSITE'S \nCONTENT OR THE CONTENT OF ANY THIRD PARTY WEBSITES LINKED TO THE WEBSITE\n AND ASSUMES NO LIABILITY OR RESPONSIBILITY FOR ANY (I) ERRORS, \nMISTAKES, OR INACCURACIES OF CONTENT, (II) PERSONAL INJURY OR PROPERTY \nDAMAGE, OF ANY NATURE WHATSOEVER, RESULTING FROM YOUR ACCESS TO AND USE \nOF THE WEBSITE AND SERVICE, (III) ANY UNAUTHORIZED ACCESS TO OR USE OF \nOUR SERVERS AND/OR ANY AND ALL PERSONAL INFORMATION AND/OR FINANCIAL \nINFORMATION STORED THEREIN, (IV) ANY INTERRUPTION OR CESSATION OF \nTRANSMISSION TO OR FROM THE WEBSITE, (IV) ANY BUGS, VIRUSES, TROJAN \nHORSES, OR THE LIKE WHICH MAY BE TRANSMITTED TO OR THROUGH THE WEBSITE \nBY ANY THIRD PARTY, AND/OR (V) ANY ERRORS OR OMISSIONS IN ANY CONTENT OR\n FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF \nANY CONTENT POSTED, EMAILED, COMMUNICATED, TRANSMITTED, OR OTHERWISE \nMADE AVAILABLE VIA THE WEBSITE OR THE SERVICE. OLX DOES NOT WARRANT, \nENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY FOR ANY PRODUCT OR SERVICE \nADVERTISED OR OFFERED BY A THIRD PARTY THROUGH THE WEBSITE OR ANY \nHYPERLINKED WEBSITE OR FEATURED IN ANY BANNER OR OTHER ADVERTISING, AND \nOLX WILL NOT BE A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING \nANY TRANSACTION BETWEEN YOU AND/OR OTHER USERS AND/OR THIRD-PARTY \nPROVIDERS OF PRODUCTS OR SERVICES. AS WITH THE PURCHASE OF A PRODUCT OR \nSERVICE THROUGH ANY MEDIUM OR IN ANY ENVIRONMENT, YOU SHOULD USE YOUR \nBEST JUDGMENT AND EXERCISE CAUTION WHERE APPROPRIATE.\n</p>\n</li>\n<li>\n<h3>LIMITATIONS OF LIABILITY</h3>\n<p>IN NO EVENT SHALL OLX, ITS OFFICERS, DIRECTORS, EMPLOYEES, OR AGENTS,\n BE LIABLE FOR DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR \nEXEMPLARY DAMAGES (EVEN IF OLX HAS BEEN ADVISED OF THE POSSIBILITY OF \nSUCH DAMAGES), RESULTING FROM ANY ASPECT OF YOUR USE OF THE WEBSITE OR \nTHE SERVICE, INCLUDING WITHOUT LIMITATION WHETHER THE DAMAGES ARISE FROM\n USE OR MISUSE OF THE WEBSITE OR THE SERVICE, FROM INABILITY TO USE THE \nWEBSITE OR THE SERVICE, OR THE INTERRUPTION, SUSPENSION, MODIFICATION, \nALTERATION, OR TERMINATION OF THE WEBSITE OR THE SERVICE. SUCH \nLIMITATION OF LIABILITY SHALL ALSO APPLY WITH RESPECT TO DAMAGES \nINCURRED BY REASON OF OTHER SERVICES OR PRODUCTS RECEIVED THROUGH OR \nADVERTISED IN CONNECTION WITH THE WEBSITE OR THE SERVICE OR ANY LINKS ON\n THE WEBSITE, AS WELL AS BY REASON OF ANY INFORMATION, OPINIONS OR \nADVICE RECEIVED THROUGH OR ADVERTISED IN CONNECTION WITH THE WEBSITE OR \nTHE SERVICE OR ANY LINKS ON THE OLX SITE. THESE LIMITATIONS SHALL APPLY \nTO THE FULLEST EXTENT PERMITTED BY LAW. YOU SPECIFICALLY ACKNOWLEDGE AND\n AGREE THAT OLX SHALL NOT BE LIABLE FOR USER SUBMISSIONS OR THE \nDEFAMATORY, OFFENSIVE, OR ILLEGAL CONDUCT OF ANY USER OR THIRD PARTY AND\n THAT THE RISK OF HARM OR DAMAGE FROM THE FOREGOING RESTS ENTIRELY WITH \nYOU. The Website is controlled and offered by OLX from its facilities in\n the United States of America. OLX makes no representations or \nwarranties that the Website is appropriate for use in other locations. \nThose who access or use the Website from other jurisdictions do so at \ntheir own volition and risk and are responsible for compliance with \nlocal law.\n</p>\n</li>\n<li>\n<h3>ASSIGNMENT</h3>\n<p>These Terms, and any rights and licenses granted hereunder, may not \nbe transferred or assigned by you, but may be assigned by OLX without \nrestriction. Any assignment or transfer by you shall be null and void.</p>\n</li>\n<li>\n<h3>ABILITY TO ACCEPT TERMS OF SERVICE</h3>\n<p>This Website is intended only for adults. You affirm that you are \neither more than 18 years of age, or an emancipated minor, or possess \nlegal parental or guardian consent, and are fully able and competent to \nenter into the terms, conditions, obligations, affirmations, \nrepresentations, and warranties set forth in these Terms, and to abide \nby and comply with these Terms. In any case, you affirm that you are \nover the age of 13, as the Website is not intended for children under \n13.</p>\n<p><u><b>NOTICE TO CHILDREN UNDER THE AGE OF 13 AND THEIR PARENTS OR GUARDIANS</b></u></p>\n<p><b>If you are under the age of 13, YOU MUST NOT USE THIS WEBSITE. \nPlease do not send us your personal information, including your email \naddresses, name, and/or contact information. If you want to contact us, \nyou may only do so through your parent or legal guardian.</b></p>\n</li>\n<li>\n<h3>GENERAL INFORMATION</h3>\n<p>These Terms and the other policies posted on the Website constitute \nthe complete and exclusive understanding and agreement between you and \nOLX and govern your use of the Service and the Website superseding all \nprior understandings, proposals, agreements, negotiations, and \ndiscussions between the parties, whether written or oral. The Terms and \nthe relationship between you and OLX shall be governed by the laws of \nthe State of New York without regard to its conflict of law principles. \nYou and OLX agree to submit to the personal and exclusive jurisdiction \nof the courts located within the State of New York. The failure of OLX \nto exercise or enforce any right or provision of the Terms shall not \nconstitute a waiver of such right or provision. If any provision of the \nTerms is found by a court of competent jurisdiction to be invalid \n(including, without limitation, because such provision is inconsistent \nwith the laws of another jurisdiction) or inapplicable, the parties \nnevertheless agree that the court should endeavor to give effect to the \nparties' intentions as reflected in the provision. If any provision or \nprovisions of these Terms is held to be invalid, illegal or \nunenforceable, the validity, legality and enforceability of the \nremaining provisions of the Terms shall not in any way be affected or be\n impaired. YOU AGREE THAT ANY CAUSE OF ACTION BROUGHT BY YOU AND ARISING\n OUT OF OR RELATED TO YOUR USE OF THE SERVICE AND/OR THE WEBSITE MUST \nCOMMENCE WITHIN ONE (1) YEAR AFTER THE CAUSE OF ACTION ACCRUES, EXCEPT \nTHAT OLX MAY COMMENCE ANY SUCH CAUSE OF ACTION IN ACCORDANCE WITH THE \nAPPLICABLE STATUTE OF LIMITATIONS UNDER NEW YORK LAW. OTHERWISE, SUCH \nCAUSE OF ACTION IS PERMANENTLY BARRED. These Terms shall inure to the \nbenefit of and be binding upon each party's successors and assigns.</p>\n</li>\n<li>\n<h3>VIOLATION OF TERMS AND LIQUIDATED DAMAGES</h3>\n<p>Please report any violations of the Terms that you become aware of by\n contacting us using the link at the bottom of the OLX homepage at <a target=\"_blank\" href=\"http://www.olx.com/\">www.olx.com</a>.\n Any failure to act by OLX with respect to a breach by you or others \ndoes not waive our right to act with respect to subsequent or similar \nbreaches by you or others. You understand and agree that, because \ndamages are often difficult or impossible to quantify, if actual damages\n cannot be reasonably calculated then you will be liable to pay OLX the \nfollowing as liquidated damages (and not a penalty):</p>\n<p>a. If OLX establishes any limits on the frequency with which you may \naccess the Service, or terminates your access to or use of the Service, \nyou agree to pay OLX ninety nine dollars ($99) for (i) each message \nposted in excess of such limits or (ii) for each day on which you access\n OLX in excess of such limits, whichever is higher.</p>\n<p>b. If you post a message that (1) impersonates any person or entity; \n(2) falsely states or otherwise misrepresents your affiliation with a \nperson or entity; or (3) that includes personal or identifying \ninformation about another person without that person's explicit consent,\n you agree that OLX in its sole discretion may disclose identifying \ninformation about you to the victim, and that should OLX bring a claim \nagainst you in court, that you will pay OLX one thousand one hundred \ndollars ($1,100) for each such message.</p>\n<p>c. If you are a Posting Agent that uses the Service in violation of \nthese Terms, in addition to any liquidated damages under Section 20(e) \nbelow you agree to pay OLX ninety nine dollars ($99) for each and every \nitem you post in violation of these Terms. A Posting Agent will also be \ndeemed an agent of the party engaging the Posting Agent to access the \nService, and such party (by engaging the Posting Agent in violation of \nthese Terms) agrees to pay OLX an additional ninety nine dollars ($99) \nfor each item posted by the Posting Agent on behalf of such party in \nviolation of these Terms.</p>\n<p>d. If you use OLX e-mail addresses or computer systems to send \nunsolicited e-mail advertisements to OLX e-mail addresses or any other \nparty, you agree to pay OLX thirty dollars ($30) for each such e-mail.</p>\n<p>e. If you post messages in violation of these Terms, other than as \ndescribed above, you agree to pay OLX ninety nine dollars ($99) for each\n such message. Notwithstanding the foregoing, OLX may, in its sole and \nabsolute discretion, issue a warning before assessing damages pursuant \nto this Section 20(e).</p>\n<p>f. If you aggregate, copy, display, mirror, reproduce, or otherwise \nexploit for any purpose any Content (except for your own Content) in \nviolation of these Terms without OLX's express written permission, you \nagree to pay OLX ten thousand dollars ($10,000) for each day on which \nyou engage in such conduct.</p>\n<p>If none of the foregoing clauses (a) – (f) are applicable, you agree \nto pay OLX’s actual damages, to the extent such actual damages can be \nreasonably calculated. Notwithstanding any other provision of these \nTerms, OLX retains the right to seek equitable remedies, including \nwithout limitation, specific performance of any term contained in these \nTerms, or a preliminary or permanent injunction against the breach or \nthreatened breach of any such term or in aid of the exercise of any \npower granted in these Terms, or any combination thereof, without the \nnecessity of posting a bond.</p>\n</li>\n<li>\n<h3>PRIVACY POLICY</h3>\n<p><u>A. Safe Harbor Certification</u></p>\n<p>OLX complies with the U.S.-EU Safe Harbor Framework and the \nU.S.-Swiss Safe Harbor Framework as set forth by the U.S. Department of \nCommerce regarding the collection, use, and retention of personal \ninformation from European Union member countries and Switzerland.  OLX \nhas certified that it adheres to the Safe Harbor Privacy Principles of \nnotice, choice, onward transfer, security, data integrity, access, and \nenforcement.  To learn more about the Safe Harbor program, and to view \nOLX’s certification, please visit http://www.export.gov/safeharbor/</p>\n<p><u>B. Type of Information Collected:</u></p>\n<p>When you visit the Website, we may collect certain non-personal \ninformation such as your Internet Protocol (“IP”) address, operating \nsystem, browser type, and Internet service provider. This type of \ninformation does not identify you personally. When you register with the\n Website, we may also collect personal information that you provide such\n as your name, mailing address, email address, home country, and zip \ncode (“Registration Information”). You have the option of also providing\n to us your phone and fax numbers, gender, age, and/or company name if \nyou choose to register with OLX. If you provide your phone number, it \nwill be displayed in your posting. We may also collect additional \ninformation that our users provide, such as new or deleted postings, new\n or deleted comments, keyword searches, scam reports and new contact \nsellers. We use a third-party credit card processing company for \npurchases, and other third party companies to monitor site traffic, \nwhich may, in some instances, store your information (see Section 21(D) \nbelow). When you visit the Website and/or use the OLX mobile \napplication, OLX may use GPS technology (or other similar technology) to\n determine your current location in order to determine the city you are \nlocated within and display a location map with relevant advertisements. \nOLX will not share your current location with other OLX users or \npartners. If you do not want OLX to use your location for the purposes \nset forth above, you should turn off the location services for the OLX \napplication located in your OLX account settings or in your mobile phone\n settings. <b>By using this Website or the Service, you consent to \ncollection, storage, and use of the personal information you provide for\n any of the Services that we offer, and you consent to our collection of\n any changes or updates that you may provide to any information you \nprovide that is collected by OLX.</b>\n</p>\n<p><u>C. Cookies</u></p>\n<p>We may use cookies to manage our users’ sessions and to store \npreferences, tracking information, and language selection. Cookies may \nbe used whether you register with us or not. “Cookies” are small text \nfiles transferred by a web server to your hard drive and thereafter \nstored on your computer. The types of information a cookie collects \ninclude the date and time you visited, your browsing history, your \npreferences, and your username. In some instances, our third-party \nservice providers may use cookies on the Website. We cannot control or \naccess cookies used by third- party service providers. This Privacy \nPolicy covers only Cookies used by us, and not any cookies used by third\n parties. You have the ability to either accept or decline the use of \ncookies on your computer, whether you are registered with us or not. \nTypically, you can configure your browser to not accept cookies. \nHowever, declining the use of cookies may limit your access to certain \nfeatures of the Website. For example, you may have difficulty logging in\n or using certain interactive features of the Website, such as the OLX \nForum or Comments feature.</p>\n<p><u>D. Third Parties</u></p>\n<p>We use third-party service providers to process purchases you make \nand to monitor our users’ interests. In addition, the Website may \noccasionally contain links to Third-Party Sites. If you click on the \nlinks to Third-Party Websites, you leave the Website. We are not \nresponsible for the content of these Third-Party Websites or for the \nsecurity of your personal information when you use the Third Party \nWebsites. These third-party service providers and Third-Party Sites may \nhave their own privacy policies governing the storage and retention of \nyour personal information that you may be subject to. They may collect \ninformation such as your IP address, browser specification, or operating\n system. This Privacy Policy does not govern personal information \nprovided to, stored on, or used by these third-party providers and \nThird-Party Sites. We recommend that when you enter a Third-Party Site, \nyou review the Third Party Site’s privacy policy as it relates to \nsafeguarding your personal information. We use third-party advertising \ncompanies to serve ads when you visit the Website. These companies may \nuse information (not including your name, address, email address, or \ntelephone number) about your visits to the Website and Third-Party \nWebsites in order to provide advertisements about goods and services of \ninterest to you. On the Website, Google, as a third-party vendor, uses \nCookies to serve ads. Google’s use of the DoubleClick DART Cookie \nenables it to serve ads to the Website’s users based on their visit to \nthe Websites and Third-Party Websites. For more information on the DART \nCookie see: <a target=\"_blank\" href=\"http://www.doubleclick.com/privacy/faq.aspx\">http://www.doubleclick.com/privacy/faq.aspx</a>. You may opt out of the use of the DART Cookie by Google by visiting the Google Ad and Content Network Privacy Policy at: <a target=\"_blank\" href=\"http://www.google.com/privacy_ads.html\">http://www.google.com/privacy_ads.html</a>. You may opt out of targeting advertising for all NAI member ad networks by visiting: <a target=\"_blank\" href=\"http://www.networkadvertising.org/\">http://www.networkadvertising.org/</a>.\n By publishing an ad on the Website, you acknowledge and agree that the \nContent is public and accessible by any third party and that they may \nappear in search engine results (such as Yahoo!, MSN, Google, Altavista,\n and other search engines) and in the cache of those search engines, in \nfeeds and Third-Party Websites pursuant to cobranding agreements, and \nthat it is the sole responsibility of each of those search engines, \nThird-Party Websites or RSS web feed resources to update and/or to \nremove Content from their indexes and their cache. You agree and \nacknowledge that OLX is not be liable for the information published in \nsearch results or by any Third-Party Website that carries OLX postings.\n</p>\n<p><u>E. How Your Information is Used</u></p>\n<p>We may use information provided by you to: (i) enforce our Terms of \nUse, monitor user activity, such as keyword searches or new postings, \nand more effectively manage traffic on the Website; (ii) provide \ncustomer services, create and manage user accounts; and (iii) assist you\n with technical difficulties.  Also, we may share with third-party \nservice providers certain information, such as your browser capabilities\n or operating system, that we have collected in order to better \nunderstand which advertisements and services may interest you. We may \nblock users located in certain countries from using the Website. We may \nretain such information for as long as is required to fulfill our \nbusiness objective, even after your account is terminated.</p>\n<p><u>F. Protecting Your Personal Information</u></p>\n<p>You are a valued customer, and we recognize that protecting your \nprivacy is important to you. For this reason, we are committed to \nprotecting the personal information you provide in a variety of ways. We\n do not directly process any payments and do not store your credit card \ninformation. Secured socket layer (“SSL”) technology is used for \nprocessing payment transactions with third- party service provider \npartners, such as Click &amp; Buy, PayPal, and DineroMail. Your \nRegistration Information may be protected by a unique customer password \nand user ID. You should not disclose your password information to anyone\n and you should always remember to log off if using a shared computer. \nLastly, you may utilize the Website as an anonymous user by not \nregistering.  We have taken certain security protections in safeguarding\n your personal information. However, as with most electronic \ntransactions, no method is 100% safe. While we strive to use a \ncommercially acceptable means to protect the personal information you \nprovide, we cannot guarantee its security. Therefore, you acknowledge \nand agree that we assume no liability regarding the theft, loss, \nalteration or misuse of personal or other information or Content, \nincluding, without limitation, such information that has been provided \nto third parties or other users, or with regards to the failure of a \nthird party to abide by the agreement between us and such third party. \nYou may participate in our Forum or utilize our Comments feature. For \npostings to the Forum, your username will be posted. For postings using \nthe Comments feature, your name and email will only be posted if you \nprovide it in the comment. We strongly discourage posting any \ninformation on these features or in any Content posted by you that you \ndo not want others to see. You agree that you are responsible for \nmaintaining the confidentiality of your username and password, and all \nuses of your account, whether or not you have authorized such use.\n</p>\n<p><u>G. Accessing and Modifying Personal Information and Communication Preferences</u></p>\n<p>You may access, remove, review, and/or make changes to personal information that you have provided to us <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Contact Support form</a>.\n You need not register in order to post or respond to advertisements on \nthe Website. If you register, we may send you certain notifications, \nadvertisements, promotions, and specials. We may also send you any \nlegally required notifications and certain notifications, including but \nnot limited to, service related notices or notices regarding a change to\n any of our policies. For example, we may send you a notice regarding \nserver problems or scheduled maintenance to the Website. In order to \nopt-out of receiving these notices, you may need to deactivate your \naccount. You can opt out of certain e-mail communications from us, \nincluding our newsletters, advice on buying and selling on the Website, \nnotifications that a user has commented on your posting, and \nnotifications that you can refresh your posting. We will not change your\n preferences without your consent.  You cannot opt out of receiving \ntransactional communications from OLX related to your account.</p>\n<p><u>H. Disclosures</u></p>\n<p>On rare occasions, we may be required to disclose your personal \ninformation due to legal or regulatory requirements. In such instances, \nwe reserve the right to disclose your personal information as required \nin order to comply with our legal obligations, including but not limited\n to complying with court orders, warrants, subpoenas, service of process\n requirements, or discovery requests. We may also disclose information \nabout our users to law enforcement officers or others, in the good faith\n belief that such disclosure is reasonably necessary to enforce these \nTerms and/or Privacy Policy; respond to claims that any Content violates\n the rights of third-parties; or protect the rights, property, or \npersonal safety of OLX, our users or the general public.  If \nsubstantially all of our assets are sold or merged into another company,\n we will notify you of the transaction. The acquiring company shall be \ngiven access to your personal information without your consent. If we \nsell only a part of our business, the acquiring entity shall have access\n to your personal information without your consent and we may send you a\n notice regarding this sale.</p>\n<p><u>I. Notification of Changes</u></p>\n<p>We reserve the right to change these Terms from time to time, and at \nour sole discretion. We may send you a notice regarding material changes\n to these Terms, including the Privacy Policy or the Website. You should\n make note of the “last updated date” at the beginning of the Terms. \nWith this information, you should be able to identify if the Terms have \nbeen updated recently.</p>\n<p><u>J. Disputes</u></p>\n<p>Any disputes regarding your privacy are subject to the Terms, \nincluding but not limited to any provisions related to indemnification, \nlimitations on damages, and choice of law.</p>\n<p><u>K. Important Notices to Non-U.S. Residents</u></p>\n<p>OLX abides by the Safe Harbor principles set forth by the U.S. \nDepartment of Commerce regarding the collection, use, and retention of \napplicable data from the European Union.  However, it is important to \nnote that the Website and its servers are operated in the United States.\n  If you are located outside of the United States, please be aware that \nany personal information you provide to us will be transferred to the \nUnited States.  By using the Website and by providing us personal \ninformation when using our services, you consent to this transfer and \nour use of the information and data provided by you in accordance with \nthis Privacy Policy.</p>\n<p>In order to comply with the Safe Harbor framework, OLX commits to the\n resolution of complaints about your privacy and our collection or use \nof your personal information.  We have also committed to resolve any \ncomplaints by European Union citizens relating to this Privacy Policy, \nwhich cannot be resolved directly with our company, through the Council \nof Better Business Bureaus, Inc.’s Safe Harbor Privacy Dispute \nResolution Procedures.</p>\n<p>If you have any questions regarding this Privacy Policy, please \ncontact us as described in the “How to Contact Us” section. We will \ninvestigate your question, respond to your inquiry, and attempt to \nresolve any concerns regarding your privacy question. If you do not \nreceive acknowledgement of your complaint or if your complaint is not \nsatisfactorily addressed by OLX, you should then contact the Council of \nBetter Business Bureaus, Inc. as set forth below.</p>\n<p>In compliance with the US-EU Safe Harbor Principles, OLX commits to \nresolve complaints about your privacy and our collection or use of your \npersonal information. European Union citizens with inquiries or \ncomplaints regarding this privacy policy should first contact OLX as \ndescribed in the “How to Contact Us” section.</p>\n<p>OLX has further committed to refer unresolved privacy complaints \nunder the US-EU Safe Harbor Principles to an independent dispute \nresolution mechanism, the BBB EU SAFE HARBOR, operated by the Council of\n Better Business Bureaus. If you do not receive timely acknowledgment of\n your complaint, or if your complaint is not satisfactorily addressed by\n OLX, please visit the BBB EU SAFE HARBOR web site at \nwww.bbb.org/us/safe-harbor-complaints for more information and to file a\n complaint.</p>\n\n<p><u>L.How to Contact Us</u></p>\n<p>If you have questions about this Privacy Policy, please contact OLX <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Legal Issues report form</a> with “Privacy Policy” in the subject line.</p>\n</li><p></p>\n    </div>\n</section>";
  });

templates["enhanced/partials/head"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<title>OLX Mobile</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n<link href=\"/css/html5/styles.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\" />\n";
  });

templates["enhanced/partials/header"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<header>\n    <a href=\"#\" class=\"navLeft\">\n        <span></span>\n        <span></span>\n        <span></span>\n    </a>\n    <a href=\"/\"><div class=\"olxLogo\"></div></a>\n    <h1></h1>\n    <div class=\"search\"></div>\n</header>";
  });

templates["enhanced/partials/languages"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n	";
  stack1 = (helper = helpers.ifC || (depth0 && depth0.ifC),options={hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data},helper ? helper.call(depth0, (depth0 && depth0.id), "===", (depth1 && depth1.selectedLanguage), options) : helperMissing.call(depth0, "ifC", (depth0 && depth0.id), "===", (depth1 && depth1.selectedLanguage), options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		<li><strong>";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</strong></li>\n	";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		<li><a href=\"?language=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a></li>\n	";
  return buffer;
  }

  buffer += "<ul>\n";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.languages)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>";
  return buffer;
  });

templates["enhanced/partials/layout"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";


  buffer += "<!doctype html>\n<html>\n	<head>\n	    ";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "enhanced/partials/head", options) : helperMissing.call(depth0, "partial", "enhanced/partials/head", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</head>\n	<body>\n		\n		";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "enhanced/partials/header", options) : helperMissing.call(depth0, "partial", "enhanced/partials/header", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		<article>\n	  		"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "left-panel/index", options) : helperMissing.call(depth0, "view", "left-panel/index", options)))
    + "\n			<div id=\"content\">\n				";
  if (helper = helpers.body) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.body); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "footer/index", options) : helperMissing.call(depth0, "view", "footer/index", options)))
    + "\n			</div>\n		</article>\n		\n		<script src=\"/js/mergedAssets.js\"></script>\n		<script>\n			(function() {\n				var App = window.App = new (require('app/app'))("
    + escapeExpression((helper = helpers.json || (depth0 && depth0.json),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.appData), options) : helperMissing.call(depth0, "json", (depth0 && depth0.appData), options)))
    + ");\n				App.bootstrapData("
    + escapeExpression((helper = helpers.json || (depth0 && depth0.json),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.bootstrappedData), options) : helperMissing.call(depth0, "json", (depth0 && depth0.bootstrappedData), options)))
    + ");\n				App.start();\n			})();\n		</script>\n	</body>\n</html>\n";
  return buffer;
  });

templates["enhanced/user/login"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</small>\n                ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    <small style=\"display: block; color: blue;\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailMsg)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</small>\n                ";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailErr)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</small>\n                ";
  return buffer;
  }

  buffer += "<h1>Login</h1>\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n            <form action=\"/login\" method=\"POST\">\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.err), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            	<span style=\"display: block;\">Username or Email</span>\n                <input type=\"text\" name=\"usernameOrEmail\">\n            	<span style=\"display: block;\">Password</span>\n                <input type=\"password\" name=\"password\">\n            	<span style=\"display: block;\"><input type=\"submit\" value=\"Login\"></span>\n            </form>\n		</section>\n	</div>\n</div>\n<h1>Already posted an ad</h1>\n<div class=\"row-fluid font-format\">\n    <div class=\"span6 celd-format\" >\n        <section style=\"padding-bottom:0px;\">\n            <form action=\"/loginAnon\" method=\"POST\">\n                ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailMsg), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailErr), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                <span style=\"display: block;\">\n                    Enter the email that you used to post your ad and receive the link to My OLX by email.\n                </span>\n                <input type=\"text\" name=\"email\">\n                <span style=\"display: block;\"><input type=\"submit\" value=\"Send\"></span>\n            </form>\n        </section>\n    </div>\n</div>";
  return buffer;
  });

templates["enhanced/user/registration"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</small>\n                ";
  return buffer;
  }

  buffer += "<h1>Register</h1>\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n            <form action=\"/registration\" method=\"POST\">\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.err), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            	<span style=\"display: block;\">Username</span>\n                <input type=\"text\" name=\"username\">\n            	<span style=\"display: block;\">Email</span>\n                <input type=\"text\" name=\"email\">\n            	<span style=\"display: block;\">Password</span>\n                <input type=\"password\" name=\"password\">\n                <span style=\"display: block;\">\n                    <input type=\"checkbox\" name=\"agreeTerms\">\n                    I agree to the <a href=\"/terms\">Terms and Conditions</a> of OLX \n                </span>\n            	<span style=\"display: block;\"><input type=\"submit\" value=\"Register\"></span>\n            </form>\n		</section>\n	</div>\n</div>";
  return buffer;
  });

templates["enhanced_ar/categories/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n 						<li>\n							<a href=\"/items?categoryId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&location="
    + escapeExpression(((stack1 = ((stack1 = (depth1 && depth1.params)),stack1 == null || stack1 === false ? stack1 : stack1.location)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a>\n						</li>\n					";
  return buffer;
  }

  buffer += "<h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1>\n\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n			<div id='subcategories.models'>\n			  	<ul>\n					";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.children), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				</ul>\n			</div>\n		</section>\n	</div>\n</div>";
  return buffer;
  });

templates["enhanced_ar/categories/show"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n			<li><a href=\"/items?categoryId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&location="
    + escapeExpression(((stack1 = ((stack1 = (depth1 && depth1.params)),stack1 == null || stack1 === false ? stack1 : stack1.location)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a></li>\n		";
  return buffer;
  }

  buffer += escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "analytics", options) : helperMissing.call(depth0, "partial", "analytics", options)))
    + "\n\n<section>\n  	<ul id=\"subCategory\">\n		";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.children), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</ul>\n</section>\n";
  return buffer;
  });

templates["enhanced_ar/footer/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<section>\n		AR - <a href=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.marketing)),stack1 == null || stack1 === false ? stack1 : stack1.link)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.marketing)),stack1 == null || stack1 === false ? stack1 : stack1.promo)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</a>\n	</section>\n";
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.marketing)),stack1 == null || stack1 === false ? stack1 : stack1.link), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  });

templates["enhanced_ar/home/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program3(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program5(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				\n				<div class=\"swiper-slide\"> \n					<a href=\"items/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" >\n						<div class=\"slide\">\n				        	<div style=\"background-image: url('";
  if (helper = helpers.thumbnail) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.thumbnail); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "');\"></div>\n				        </div>\n				        <div class=\"caption\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.date)),stack1 == null || stack1 === false ? stack1 : stack1.since)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<br><span>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n				    </a>\n				</div>\n				\n			";
  return buffer;
  }

function program7(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				<div class=\"swiper-slide\"> \n					<a href=\"categories/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "?location="
    + escapeExpression(((stack1 = (depth1 && depth1.siteLocation)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" >\n						<div class=\"slide\">\n				          <div class=\"home-";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + " color\">\n				          	<p>";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</p>\n				          </div>\n				        </div>\n			        </a>\n				</div>\n			";
  return buffer;
  }

function program9(depth0,data) {
  
  var buffer = "", helper, options;
  buffer += "\n		"
    + escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.layout), options) : helperMissing.call(depth0, "partial", (depth0 && depth0.layout), options)))
    + "\n	";
  return buffer;
  }

  buffer += escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "analytics", options) : helperMissing.call(depth0, "partial", "analytics", options)))
    + "\n\n<section id=\"newAds\">\n	<h2>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.newAds_prefix)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</h2>\n	<div class=\"swiper-containerAds\">	\n		<div class=\"swiper-wrapper\">\n			";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.whatsNewItems), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</div>\n	</div>\n</section>\n\n<section id=\"postAd\">\n	<div>\n		<h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.postAd_prefix)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<strong>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.postAd_strong)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</strong>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.postAd_suffix)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1>\n		<a href=\"/posting\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.postAd_button)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</a>\n	</div>\n</section>\n\n<section id=\"categories\">\n	<h2>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.categories_title)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h2>\n	<div class=\"swiper-containerCats\">	\n		<div class=\"swiper-wrapper\">\n			";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.categories)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(7, program7, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</div>\n	</div>\n</section>\n\n<section id=\"location\">\n	"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "location/select", options) : helperMissing.call(depth0, "view", "location/select", options)))
    + "\n</section>\n\n<section id=\"languages\">\n	";
  stack1 = (helper = helpers.layout || (depth0 && depth0.layout),options={hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data},helper ? helper.call(depth0, (depth0 && depth0.template), "/partials/languages", options) : helperMissing.call(depth0, "layout", (depth0 && depth0.template), "/partials/languages", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</section>\n";
  return buffer;
  });

templates["enhanced_ar/items/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n	<section>	\n		<a href=\"/items/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.thumbnail), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			\n			<p>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.date)),stack1 == null || stack1 === false ? stack1 : stack1.since)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " in ";
  if (helper = helpers.displayLocation) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.displayLocation); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</p>\n			<div class=\"title\"><h2><span><span>";
  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span></span></h2></div>\n			";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n		</a>\n	</section>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		        <div class=\"image filled\" style=\"background-image:url(";
  if (helper = helpers.thumbnail) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.thumbnail); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "); ?>);\"></div>\n			";
  return buffer;
  }

function program4(depth0,data) {
  
  
  return "\n				<div class=\"image\"></div>\n			";
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				<h3>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h3>\n			";
  return buffer;
  }

  buffer += escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "analytics", options) : helperMissing.call(depth0, "partial", "analytics", options)))
    + "\n\n";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n";
  return buffer;
  });

templates["enhanced_ar/items/search"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<h3>Results for: ";
  if (helper = helpers.searchTerm) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.searchTerm); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n\n"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{
    'items': ((depth0 && depth0.items))
  },data:data},helper ? helper.call(depth0, "items/index", options) : helperMissing.call(depth0, "view", "items/index", options)))
    + "\n";
  return buffer;
  });

templates["enhanced_ar/items/show"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n		";
  stack1 = (helper = helpers.ifC || (depth0 && depth0.ifC),options={hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data},helper ? helper.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images)),stack1 == null || stack1 === false ? stack1 : stack1.length), "==", 1, options) : helperMissing.call(depth0, "ifC", ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images)),stack1 == null || stack1 === false ? stack1 : stack1.length), "==", 1, options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			<div class=\"onePicture\">\n				<div class=\"slide\">\n		          <div style=\"background-image: url('"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images)),stack1 == null || stack1 === false ? stack1 : stack1[0])),stack1 == null || stack1 === false ? stack1 : stack1.url)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "');\"></div>\n		        </div>\n			</div>\n		";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<div class=\"swiper-containerItem\">\n			<div class=\"swiper-wrapper\">\n				";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			</div>\n			<div class=\"slidePagination\"></div>\n		</div>\n		";
  return buffer;
  }
function program5(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				  <div class=\"swiper-slide\"> \n						<div class=\"slide\">\n				          <div style=\"background-image: url('";
  if (helper = helpers.url) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.url); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "');\"></div>\n				        </div>\n					</div>\n				";
  return buffer;
  }

function program7(depth0,data) {
  
  
  return "\n		<div class=\"noPicture\">\n			<span></span>\n			<p>No hay fotitos!!</p>\n			<div class=\"clear\"></div>\n		</div>\n	";
  }

function program9(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n			<li>";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ": <strong>";
  if (helper = helpers.value) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.value); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</strong></li>\n		";
  return buffer;
  }

function program11(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<img style=\"width:100%\" src=\"http://maps.googleapis.com/maps/api/staticmap?center="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.latitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ","
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.longitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " ?>&zoom=14&size=320x100&markers="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.latitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ","
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.longitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "&sensor=false\">\n	";
  return buffer;
  }

function program13(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.phone), {hash:{},inverse:self.program(16, program16, data),fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		";
  return buffer;
  }
function program14(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.user)),stack1 == null || stack1 === false ? stack1 : stack1.username)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " : ";
  if (helper = helpers.phone) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.phone); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\n			";
  return buffer;
  }

function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.user)),stack1 == null || stack1 === false ? stack1 : stack1.username)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n			";
  return buffer;
  }

function program18(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		";
  return buffer;
  }
function program19(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n			";
  return buffer;
  }

function program21(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<div class=\"action call trackMe\" data-tracking=\"itemPage-clickCall\">\n			<a href=\"tel:"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" >\n				<span>Call</span>\n			</a>\n		</div>\n		<div class=\"action sms trackMe\" data-tracking=\"itemPage-clickSms\">\n			<a href=\"sms:"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" >\n				<span>SMS</span>\n			</a>\n		</div>\n	";
  return buffer;
  }

function program23(depth0,data) {
  
  
  return "fullWidth";
  }

  buffer += escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "analytics", options) : helperMissing.call(depth0, "partial", "analytics", options)))
    + "\n\n<section id=\"itemPage\">\n	";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images), {hash:{},inverse:self.program(7, program7, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	<span>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.location)),stack1 == null || stack1 === false ? stack1 : stack1.cityName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n	<h1>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1>\n	<p class=\"desc\">";
  stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n	\n	<ul id=\"optionals\">\n		";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.optionals), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</ul>\n	";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n	<div class=\"clear\"></div>\n</section>\n\n<section id=\"actions\">\n	<div class=\"background\"></div>\n	<span>\n		";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.user)),stack1 == null || stack1 === false ? stack1 : stack1.username), {hash:{},inverse:self.program(18, program18, data),fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</span>\n	";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone), {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	<div class=\"action email ";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone), {hash:{},inverse:self.noop,fn:self.program(23, program23, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " trackMe\" data-tracking=\"itemPage-clickEmail\">\n		<div>\n			<span>EMAIL</span>\n		</div>\n	</div>\n	<div class=\"clear\"></div>\n</section>\n\n\n<!--a href=\"/items?categoryId="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.category)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "&location=";
  if (helper = helpers.location) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.location); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&relatedAds="
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">Related Ads</a-->\n";
  return buffer;
  });

templates["enhanced_ar/left-panel/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  
  return "\n				<li class=\"myAds\"><a href=\"/\">Mis Avisos</a></li>\n				<li class=\"myFav\"><a href=\"/\">Favoritos</a></li>\n				<li class=\"login\"><a href=\"/login\">Login</a></li>\n			";
  }

function program3(depth0,data) {
  
  
  return "\n				<li class=\"login\"><a href=\"/registration\">Registration</a></li>\n			";
  }

function program5(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				<li><a href=\"/categories/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "?location="
    + escapeExpression(((stack1 = (depth1 && depth1.siteLocation)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" class=\"home-";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a></li>\n			";
  return buffer;
  }

  buffer += "<div id=\"overlay\"></div>\n<nav id=\"leftPanel\">\n	<div>\n		<ul class=\"menu\">\n			<li class=\"start\"><a href=\"/\">Inicio</a></li>\n			<li class=\"post\"><a href=\"/\">Publicá un aviso gratis</a></li>\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.user), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			<li class=\"settings\"><a href=\"/\">Settings</a></li>\n		</ul>\n		<ul class=\"categories\">\n			<li class=\"title\">CATEGORIAS</li>\n			";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.categories)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(5, program5, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</ul>\n	</div>\n</nav>";
  return buffer;
  });

templates["enhanced_ar/location/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += " > "
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  return buffer;
  }

function program3(depth0,data) {
  
  
  return "Results";
  }

function program5(depth0,data) {
  
  
  return "Popular Cities";
  }

function program7(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n 						<li>\n							<a href=\"/?cityId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"city\" style=\"color:black;\">";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a>\n						</li>\n					";
  return buffer;
  }

  buffer += "<h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</h1>\n\n<form action=\"/location\">\n	<input type=\"text\" name=\"search\"><button type=\"submit\">Search</button>\n	<small>Type a city</small>\n</form>\n\n<h3>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.search), {hash:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</h3>\n\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n			<div id='cities.models'>\n			  	<ul>\n					";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.cities), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				</ul>\n			</div>\n		</section>\n	</div>\n</div>";
  return buffer;
  });

templates["enhanced_ar/location/select"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program3(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program5(depth0,data) {
  
  
  return "Change city";
  }

function program7(depth0,data) {
  
  
  return "Select a city";
  }

  buffer += "<strong>";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</strong>\n<a href=\"location\" >";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</a>";
  return buffer;
  });

templates["enhanced_ar/pages/terms"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<section>\n  	    	<div class=\"breadcrumbs\">\n    <p style=\"border:none;\" class=\"searchResultsTerm\">Terms Of Use</p>\n	</div>\n<div class=\"disclamer\">   \n    <p><br>PLEASE CAREFULLY READ THESE TERMS OF USE. BY USING THIS \nWEBSITE YOU INDICATE YOUR UNDERSTANDING AND ACCEPTANCE OF THESE TERMS. \nIF YOU DO NOT AGREE TO THESE TERMS YOU MAY NOT USE THIS WEBSITE.</p>\n    <p>\n</p><li>\n<h3>ACCEPTANCE</h3>\n<p>OLX, Inc. and its affiliates (OLX) provide a collection of online \nresources which include classified advertisements, forums, and certain \ne-mail services (collectively, the \"Service\") on the website <a target=\"_blank\" href=\"http://www.olx.com/\">www.olx.com</a> and its affiliated sites (including without limitation <a target=\"_blank\" href=\"http://www.mundoanuncio.com/\">www.mundoanuncio.com</a> and <a target=\"_blank\" href=\"http://www.edeng.cn/\">www.edeng.cn</a>)\n (collectively, the \"Website\") subject to these Terms of Use (these \n\"Terms\").  By using the Service, you agree to comply with these Terms.  \nAdditionally, when using a portion of the Service, you agree to conform \nto any applicable posted guidelines for such Service, which may change \nfrom time to time. You understand and agree that you are solely \nresponsible for reviewing these Terms from time to time. Should you \nobject to any term or condition of these Terms, any guideline, or any \nsubsequent changes thereto or become unhappy with OLX in any way, your \nonly choice is to immediately discontinue use of OLX. These Terms may be\n updated by OLX at any time at its sole discretion. OLX may send you \nnotices of changes to the Website or the Terms pursuant to Section 21(I)\n herein. OLX may provide a translation of the English version of the \nTerms into other languages. You understand and agree that any \ntranslation of the Terms into other languages is for your convenience \nonly and that the English version governs the terms of your relationship\n with OLX. Furthermore, if there are any inconsistencies between the \nEnglish version of the Terms and any translation, the English version of\n the Terms shall govern. You understand and agree that to the extent you\n are located in the United States, you will utilize the Service in \ncompliance with any laws, regulations, and guidelines that may be under \nthe jurisdiction of the Office of Foreign Asset Control, U.S. Department\n of Treasury.</p>\n</li>\n<li>\n<h3>DESCRIPTION OF SERVICE AND CONTENT POLICY</h3>\n<p>A.  OLX is the next generation of free online classifieds.  We act as\n a venue to allow our users who comply with these Terms to offer, sell, \nand buy products and services listed on the Website.  Although you may \nbe able to conduct payment and other transactions through the Website, \nusing third-party vendors such as PayPal, OLX is not in any way in \ninvolved in such transactions.  As a result, and as discussed in more \ndetail in these Terms, you hereby acknowledge and agree that OLX is not a\n party to such transactions, has no control over any element of such \ntransactions, and shall have no liability to any party in connection \nwith such transactions. You use the Service and the Website at your own \nrisk.</p>\n<p>B.  You understand that OLX does not control, and is not responsible \nfor ads, directory information, business listings/information, messages \nbetween users, including without limitation e-mails outside OLX’s e-mail\n system or other means of electronic communication, whether through the \nWebsite or another Third Party Website (defined below) or offerings, \ncomments, user postings, files, images, photos, video, sounds, business \nlistings/information and directory information or any other material \nmade available through the Website and the Service (\"Content\"), and that\n by using the Website and the Service, you may be exposed to Content \nthat is offensive, indecent, inaccurate, misleading, or otherwise \nobjectionable.  You acknowledge and agree that you are responsible for \nand must evaluate, and bear all risks associated with, the use of any \nContent, that you may not rely on said Content, and that under no \ncircumstances will OLX be liable in any way for the Content or for any \nloss or damage of any kind incurred as a result of the use of any \nContent listed, e-mailed or otherwise made available via the Service.  \nYou acknowledge and agree that OLX does not pre-screen or approve any \nContent, but that OLX has the right, in its sole and absolute \ndiscretion, to refuse, delete or move any Content that is or may be \navailable through the Service, for violating these Terms or for any \nother reason or no reason at all.  Furthermore, the Website and Content \navailable through the Website may contain links to other third party \nwebsites (“Third Party Websites”), which are completely unrelated to \nOLX. If you link to Third Party Websites, you may be subject to those \nThird Party Websites’ terms and conditions and other policies. OLX makes\n no representation or guarantee as to the accuracy or authenticity of \nthe information contained in any such Third Party Website, and your \nlinking to any other websites is completely at your own risk and OLX \ndisclaims all liability thereto.</p>\n<p>C.  You acknowledge and agree that you are solely responsible for \nyour own Content posted on, transmitted through, or linked from the \nService and the consequences of posting, transmitting, linking or \npublishing it.  More specifically, you are solely responsible for all \nContent that you upload, email or otherwise make available via the \nService. In connection with such Content posted on, transmitted through,\n or linked from the Service by you, you affirm, acknowledge, represent, \nand warrant that: (i) you own or have the necessary licenses, rights, \nconsents, and permissions to use such Content on the Service and Website\n (including without limitation all patent, trademark, trade secret, \ncopyright or other proprietary rights in and to any and all such \nContent) and authorize OLX to use such Content to enable inclusion and \nuse of the Content in the manner contemplated by the Service, the \nWebsite and these Terms; and (ii) you have the written consent, release,\n and/or permission of each and every identifiable individual person or \nbusiness in the Content to use the name or likeness of each and every \nsuch identifiable individual person or business to enable inclusion and \nuse of the Content in the manner contemplated by the Service, the \nWebsite and these Terms.  For clarity, you retain all of your ownership \nrights in your Content; however, by submitting the Content to OLX, you \nhereby grant to OLX an irrevocable, non-cancellable, perpetual, \nworldwide, non-exclusive, royalty-free, sub-licenseable, transferable \nlicense to use, reproduce, distribute, prepare derivative works of, \ndisplay, and perform the Content in connection with the Website and \nOLX's (and its successors') business, including without limitation for \nthe purpose of promoting and redistributing part or all of the Website \nand Content therein (and derivative works thereof) in any media formats \nand through any media channels now or hereafter known.  These rights are\n required by OLX in order to host and display your Content. Furthermore,\n by you posting Content to any public area of the Service, you agree to \nand do hereby grant to OLX all rights necessary to prohibit or allow any\n subsequent aggregation, display, copying, duplication, reproduction, or\n exploitation of the Content on the Service or Website by any party for \nany purpose. You also hereby grant each user of the Website a \nnon-exclusive license to access your Content through the Website. The \nforegoing license to each user granted by you terminates once you remove\n or delete such Content from the Website.</p>\n<p>D.  OLX does not endorse any Content or any opinion, statement, \nrecommendation, or advice expressed therein, and OLX expressly disclaims\n any and all liability in connection with user Content. OLX does not \npermit copyright infringing activities and infringement of intellectual \nproperty rights on the Website, and OLX may, at its sole discretion, \nremove any infringing Content if properly notified that such Content \ninfringes on another's intellectual property rights. OLX reserves the \nright to remove any Content without prior notice. <b>OLX may also \nterminate a user's access to the Website, if they are determined to be a\n repeat infringer. A repeat infringer is a user who has been notified of\n infringing activity more than twice and/or has had a user submission \nremoved from the Website more than twice.</b> Further, at its sole \ndiscretion, OLX reserves the right to decide whether any Content is \nappropriate and complies with these Terms for violations other than \ncopyright infringement and violations of intellectual property law, such\n as, but not limited to, pornography, obscene, libelous, or defamatory \nmaterial, or excessive length. OLX may remove such Content and/or \nterminate a user's access for uploading such material in violation of \nthese Terms at any time, without prior notice and at its sole \ndiscretion.</p>\n<p>E.  OLX may provide a video service to you if you upload photographs \nfor your ad.  By uploading your photographs, you irrevocably consent to \nthe use of your photographs for this service and represent and warrant \nthat you have all right, title and interest necessary to upload and use \nthe photographs on this service.  Under this service, using a third \nparty application or service, OLX may, at its discretion, create a video\n of your photographs, upload the video via <a href=\"http://www.youtube.com/\" target=\"_blank\">www.youtube.com</a> or another third party service provider, as determined by OLX at its discretion, and embed the video into your ad on OLX.</p>\n</li>\n<li>\n<h3>FEATURED ADS</h3>\n<p>OLX offers a service known as \"Featured Ads\" where users may pay a \nnon-refundable fee to have their ads posted in selected locations on the\n Website, thus potentially increasing an ads' visibility. In order to \npurchase a Featured Ad, you may be required to transmit certain \ninformation through a third party service provider, Click &amp; Buy, a \nThird Party Website, which may be governed by its own terms of use and \nother policies. OLX makes no representation or guarantee as to the \nsafety or security of the information transmitted to any Third Party \nWebsite, and your linking to any Third Party Website is completely at \nyour own risk, and OLX disclaims all liability related thereto.</p>\n<p><b>Featured Ads are subject to the Terms listed herein, as well as additional terms of service, which can be viewed</b> <a href=\"http://www.olx.com/featured_listings.php\">here</a></p>\n</li>\n<li>\n<h3>CONDUCT</h3>\n<p>You agree not to post, email, or otherwise make available Content:</p>\n<ul>\n	<li>that violates any law;</li>\n	<li>that is copyrighted or patented, protected by trade secret or \ntrademark, or otherwise subject to third party proprietary rights, \nincluding privacy and publicity rights, unless you are the owner of such\n rights or have\npermission or a license from their rightful owner to post the material \nand to grant OLX all of the license rights granted herein;</li>\n	<li>that infringes any of the foregoing intellectual property rights of\n any party, or is Content that you do not have a right to make available\n under any law or under contractual or fiduciary relationships;</li>\n	<li>that violates the Fair Housing Act, as amended, including its \nimplementing regulations and any Presidential Executive Order related \nthereto, by stating, in any notice or advertisements for the sale or \nrental of any dwelling not excluded by such Act, a discriminatory \npreference based sex, familial status or handicap, race, color, national\n origin, religion, (or violates any applicable state or local law \nprohibiting discrimination on the basis of aforementioned \ncharacteristics or any other characteristics);</li>\n	<li>that is harmful, abusive, unlawful, threatening, harassing, \ndefamatory, pornographic, libelous, invasive of another's privacy or \nother rights, or harms or could harm minors in any way;</li>\n	<li>that harasses, degrades, intimidates or is hateful toward an \nindividual or group of individuals on the basis of religion, gender, \nsexual orientation, race, ethnicity, age, or disability;</li>\n	<li>that violates any federal, state, or local equal employment laws, \nincluding but not limited to those prohibiting the stating, in any \nadvertisement for employment, a preference or requirement based on race,\n color, religion, sex, national origin, age, or disability of the \napplicant.</li>\n	<li>that includes personal or identifying information about another person without that person's explicit consent;</li>\n	<li>that impersonates any person or entity, including, but not limited \nto, an OLX employee, or falsely states or otherwise misrepresents an \naffiliation with a person or entity;</li>\n	<li>with respect to employers that employ four or more employees, that \nviolates any applicable provision of the Immigration and Nationality \nAct, including without limitation requiring U.S. citizenship or lawful \npermanent residency (green card status) as a condition for employment, \nunless otherwise required in order to comply with law, regulation, \nexecutive order, or federal, state, or local government contract.</li>\n	<li>that is false, deceptive, misleading, deceitful, misinformative, or constitutes \"bait and switch\" offer;</li>\n	<li>that constitutes or contains \"pyramid schemes,\" \"affiliate \nmarketing,\" \"link referral code,\" \"junk mail,\" \"spam,\" \"chain letters,\" \nor unsolicited advertisements of a commercial nature;</li>\n	<li>that constitutes or contains any form of advertising or \nsolicitation if (1) posted in areas or categories of the Website which \nare not designated for such purposes; or (2) e-mailed to OLX users who \nhave requested not to be contacted about other services, products or \ncommercial interests;</li>\n	<li>that includes links to commercial services or Third Party Websites, except as specifically allowed by OLX;</li>\n	<li>that advertises any illegal services or the sale of any items the \nsale of which is prohibited or restricted by applicable law, including \nwithout limitation items the sale of which is prohibited or regulated by\n New York law;</li>\n	<li>that contains software viruses or any other computer code, files or\n programs designed to interrupt, destroy or limit the functionality of \nany computer software or hardware or telecommunications equipment;</li>\n	<li>that disrupts the normal flow of dialogue with an excessive number \nof messages (flooding attack) to the Service, or that otherwise \nnegatively affects other users' ability to use the Service; or</li>\n	<li>that employs misleading email addresses, or forged headers or \notherwise manipulated identifiers in order to disguise the origin of \nContent transmitted through the Service.</li>\n</ul>\n<p>Additionally, you agree not to:</p>\n<ul>\n	<li>contact anyone who has asked not to be contacted, or make \nunsolicited contact with anyone for any commercial purpose; or to \n\"stalk\" or otherwise harass anyone;</li>\n	<li>make any libelous or defamatory comments or postings to or against anyone;</li>\n	<li>collect personal data about other users or entities for commercial or unlawful purposes;</li>\n	<li>use automated means, including spiders, robots, crawlers, data \nmining tools, or the like to download or scrape data from the Service, \nexcept for internet search engines (e.g,. Google) and non-commercial \npublic archives (e.g. archive.org) that comply with our robots.txt file;</li>\n	<li>post Content that is outside the local area or not relevant to the \nlocal area, repeatedly post the same or similar Content, or otherwise \nimpose unreasonable or disproportionately large loads on our servers and\n other infrastructure;</li>\n	<li>post the same item or service in multiple classified categories or forums, or in multiple metropolitan areas;</li>\n	<li>attempt to gain unauthorized access to computer systems owned or \ncontrolled by OLX or engage in any activity that disrupts, diminishes \nthe quality of, interferes with the performance of, or impairs the \nfunctionality of, the Service or the Website.</li>\n	<li>use any form of automated device or computer program (sometimes \nreferred to as \"flagging tools\") that enables the use of OLX's \"flagging\n system\" or other community control systems without each flag being \nmanually entered by a human that initiates the flag (an \"automated \nflagging device\"), or use any such flagging tool to remove posts of \ncompetitors, other third parties or to remove posts without a reasonable\n good faith belief that the post being flagged violates these Terms or \nany applicable law or regulation.</li>\n	<li>use any automated device or software that enables the submission of\n automatic postings on OLX without human intervention or authorship (an \n\"automated posting device\"), including without limitation, the use of \nany such automated posting device in connection with bulk postings, or \nfor automatic submission of postings at certain times or intervals; or</li>\n</ul>\n</li>\n<li>\n<h3>PAID POSTINGS</h3>\n<p>OLX may charge a fee to post Content in some areas of the Service. \nThe fee permits certain Content to be posted in a designated area of the\n Website. Each party posting Content to the Service is responsible for \nsaid Content and compliance with the Terms. Any such fees paid hereunder\n are non-refundable in the event any Content is removed from the Service\n for violating these Terms</p>\n</li>\n<li>\n<h3>POSTING AGENTS</h3>\n<p>As used herein, the term \"Posting Agent\" refers to a third-party \nagent, service, or intermediary that offers to post Content to the \nService on behalf of others. OLX prohibits the use of Posting Agents, \ndirectly or indirectly, without the express written permission of OLX  \nIn addition, Posting Agents are not permitted to post Content on behalf \nof others, directly or indirectly, or otherwise access the Service to in\n order to post Content on behalf of others, except with express written \npermission or license from OLX.</p>\n</li>\n<li>\n<h3>ACCESS TO THE SERVICE</h3>\n<p>OLX grants you a limited, revocable, non-exclusive license to access \nand use the Service for personal use.  This license granted herein does \nnot include any of the following: (a) access to or use of the Service by\n Posting Agents; or (b) any collection, aggregation, copying, \nduplication, display or derivative use of the Service nor any use of \ndata mining, robots, spiders, or similar data gathering and extraction \ntools for any purpose unless expressly permitted by OLX or as otherwise \nset forth in these Terms. Notwithstanding the foregoing, general purpose\n internet search engines and non-commercial public archives that gather \ninformation for the sole purpose of displaying hyperlinks to the \nService, provided they each do so from a stable IP address or range of \nIP addresses using an easily identifiable agent and comply with our \nrobots.txt file, may engage in the activities set forth in (b). For \npurposes of this exception, a \"general purpose internet search engine\" \ndoes not include a website or search engine or other service that \nspecializes in classified listings including any subset of classifieds \nlistings such as housing, for sale, jobs, services, or personals, or \nwhich otherwise provides classified ad listing services. The license set\n forth in this Section permits you to display on your website, or create\n a hyperlink thereto, individual postings on the Service so long as such\n use is for noncommercial and/or news reporting purposes only (e.g., for\n use in personal blogs or other personal online media). If the total \nnumber of such postings displayed on or linked to your website exceeds \nninety nine (99) postings, your use will be considered to be in \nviolation of these Terms, unless OLX expressly grants you permission \notherwise. You are also permitted to create a hyperlink to the home page\n of the Website so long as the link does not portray OLX, its employees,\n affiliates or agents in a false, confusing, misleading, derogatory, or \notherwise offensive matter. OLX may offer parts of the Service in RSS \nformat for the purpose of embedding individual RSS feeds into a personal\n website or blog, or view postings through third party software news \naggregators. OLX permits you to display, excerpt from, and link to any \nsuch RSS feeds on your personal website or personal blow, provided that \n(a) your use of the RSS feed is for personal, non-commercial purposes \nonly, (b) each title within an RSS feed is correctly linked back to the \noriginal post on the Service and redirects the user to the post when the\n user clicks on it, (c) you provide, in a conspicuous manner, proper \nattribution to 'OLX' as the source of the RSS feed, (d) your use or \ndisplay of the RSS feed does not suggest that OLX promotes or endorses \nany third party causes, opinions, ideas, web sites, products or \nservices, (e) you do not redistribute the RSS feed, and (f) your use \ndoes not overburden or otherwise slow the performance of OLX's systems. \nOLX reserves all rights in and to the content of any RSS feeds provided \nthrough the Service and may terminate any RSS feed at any time without \nnotice. Use of the Service beyond the scope of authorized access as set \nforth in these Terms immediately terminates any permission or license \ngranted herein. In order to collect, aggregate, copy, duplicate, display\n or make derivative use of the Service or any Content made available via\n the Service for other purposes (including commercial\npurposes) not stated herein, you must first obtain a license from OLX.\n</p>\n</li>\n<li>\n<h3>NOTIFICATION OF CLAIMS OF INFRINGEMENTS</h3>\n<p>If you are a copyright owner or an agent thereof and believe that any\n user Content or other content infringes upon your copyrights, you may \nsubmit a notification pursuant to the Digital Millennium Copyright Act \n(\"DMCA\") by providing our Copyright Agent with the following information\n in writing (see 17 U.S.C 512(c)(3) for further detail):</p>\n<p>1.A physical or electronic signature of a person authorized to act on\n behalf of the owner of an exclusive right that is allegedly infringed;</p>\n<p>2.Identification of the copyrighted work claimed to have been \ninfringed, or, if multiple copyrighted works at a single online site are\n covered by a single notification, a representative list of such works \nat that site;</p>\n<p>3.Identification of the material that is claimed to be infringing or \nto be the subject of infringing activity and that is to be removed or \naccess to which is to be disabled and information reasonably sufficient \nto permit OLX to locate the material;</p>\n<p>4.Information reasonably sufficient to permit OLX to contact you, \nsuch as an address, telephone number, and, if available, an electronic \nmail address;</p>\n<p>5.A statement that you have a good faith belief that use of the \nmaterial in the manner complained of is not authorized by the copyright \nowner, its agent, or the law; and</p>\n<p>6.A statement that the information in the notification is accurate, \nand under penalty of perjury, that you are authorized to act on behalf \nof the owner of an exclusive right that is allegedly infringed.</p>\n<p>OLX's designated Copyright Agent to receive notifications of claimed infringement is: <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Legal Issues report form</a>\n or OLX, S.A., Uriarte 2489 - 3rd Floor, Buenos Aires, Argentina, \nAttention: DMCA Complaint . For clarity, only DMCA notices should go to \nthe Copyright Agent; any other feedback, comments, requests for \ntechnical support, and other communications should be directed to OLX's \ncustomer service by clicking on the Contact Us link on the OLX website. \nYou acknowledge that if you fail to comply with all of the requirements \nof this Section 8, your DMCA notice may not be valid.</p>\n</li>\n<li>\n<h3>INTELLECTUAL PROPERTY RIGHTS</h3>\n<p>You acknowledge and agree that the materials on the Website, other \nthan the user Content that you licensed under Section 2(C) of the Terms,\n including without limitation, the text, software, scripts, graphics, \nphotos, sounds, music, videos, interactive features and the like \n(\"Materials\") and the trademarks, service marks and logos contained \ntherein (\"Marks\"), are owned by or licensed to OLX, and are subject to \ncopyright and other intellectual property rights under United States and\n foreign laws and international conventions. Materials on the Website \nare provided to you AS IS for your information and personal use only and\n may not be used, copied, reproduced, distributed, transmitted, \nbroadcast, displayed, sold, licensed, or otherwise exploited for any \nother purposes whatsoever without the prior written consent of the \nrespective owners. OLX reserves all rights not expressly granted herein \nto the Website and the Materials. You agree to not engage in the use, \ncopying, or distribution of any of the Materials other than as expressly\n permitted herein, including any use, copying, or distribution of \nMaterials of third parties obtained through the Website for any \ncommercial purposes. If you download or print a copy of the Materials \nfor personal use, you must retain all copyright and other proprietary \nnotices contained therein. You agree not to circumvent, disable or \notherwise interfere with security related features of the Website or \nfeatures that prevent or restrict use or copying of any Materials or \nenforce limitations on use of the Website or the Materials therein. The \nService is protected to the maximum extent permitted by copyright laws, \nother laws, and international treaties. Content displayed on or through \nthe Service is protected by copyright as a collective work and/or \ncompilation,\npursuant to copyrights laws, other laws, and international conventions. \nAny reproduction, modification, creation of derivative works from or \nredistribution of the Website, the Materials, or the collective work or \ncompilation is expressly prohibited. Copying or reproducing the Website,\n the Materials, or any portion thereof to any other server or location \nfor further reproduction or redistribution is expressly prohibited. You \nfurther agree not to reproduce, duplicate or copy Content or Materials \nfrom the Service, and agree to abide by any and all copyright notices \nand other notices displayed on the Service. You may not decompile or \ndisassemble, reverse engineer or otherwise attempt to discover any \nsource code contained in the Service. Without limiting the foregoing, \nyou agree not to reproduce, duplicate, copy, sell, resell or exploit for\n any commercial purposes, any aspect of the Service. OLX is a service \nmark registered with the U.S. Patent and Trademark Office and in various\n other jurisdictions.</p>\n</li>\n<li>\n<h3>USER SUBMISSIONS</h3>\n<p>You understand that when using the Website, you will be exposed to \nContent from a variety of sources, and that OLX is not responsible for \nthe accuracy, usefulness, safety, or intellectual property rights of or \nrelating to such Content, and you agree and assume all liability for \nyour use. You further understand and acknowledge that you may be exposed\n to Content that is inaccurate, offensive, indecent, or objectionable, \ndefamatory or libelous and you agree to waive, and hereby do waive, any \nlegal or equitable rights or remedies you have or may have against OLX \nwith respect thereto.</p>\n</li>\n<li>\n<h3>INDEMNITY</h3>\n<p>You agree to defend, indemnify and hold harmless OLX, its officers, \nsubsidiaries, affiliates, successors, assigns, directors, officers, \nagents, service providers, suppliers and employees, from and against any\n and all claims, damages, obligations, losses, liabilities, costs or \ndebt, and expenses (including but not limited to attorneys' fees) \narising from: (i) your use of and access to the Website and/or the \nService; (ii) your violation of any term of these Terms; (iii) your \nviolation of any third party right, including without limitation any \ncopyright, trademark, trade secret or other property, or privacy right; \nor (iv) any claim that your Content caused damage to a third party. This\n defense and indemnification obligation will survive termination, \nmodification or expiration of these Terms and your use of the Service \nand the Website.</p>\n</li>\n<li>\n<h3>NO SPAM POLICY</h3>\n<p>You understand and agree that sending unsolicited email \nadvertisements or other unsolicited communications to OLX email \naddresses or through OLX computer systems are expressly prohibited by \nthese Terms. You acknowledge and agree that from time to time OLX may \nmonitor email usage using human monitors or automated software to flag \ncertain words associated with spam or scams in emails that are sent \nbetween one user to another in the OLX e mail system. Any communication \nbetween yourself and any other user utilizing the communication features\n available on the Service and the Website may be used only in accordance\n with the Terms. Any unauthorized use of OLX computer systems is a \nviolation of these Terms and certain federal and state laws. Such \nviolations may subject the sender and his or her agents to civil and \ncriminal penalties.</p>\n</li>\n<li>\n<h3>DEALINGS WITH ORGANIZATIONS AND INDIVIDUALS</h3>\n<p>You acknowledge and agree that OLX shall not be liable for your \ninteractions with any organizations and/or individuals on the Website or\n through the Service. This includes, but is not limited to, payment and \ndelivery of goods and services, and any other terms, conditions, \nwarranties or representations associated with any interaction you may \nhave with other organizations and/or individuals. These dealings are \nsolely between you and such organizations and/or individuals. You agree \nand acknowledge that OLX shall not be responsible or liable for any loss\n or damage of any sort incurred as the result of any such dealings or \ninteractions. If there is a dispute between participants on the Website,\n or between users and any third party, you understand and agree that OLX\n is under no obligation to become involved in such dispute. In the event\n that you have a dispute with one or more other users, you hereby \nrelease OLX, its officers, employees, agents and successors from any and\n all claims, demands and damages (actual and consequential) of every \nkind or nature, known or unknown, suspected and unsuspected, disclosed \nand undisclosed, arising out of or in any way related to such disputes \nand/or our Service.</p>\n</li>\n<li>\n<h3>LIMITATION AND TERMINATION OF SERVICE</h3>\n<p>You acknowledge and agree that OLX may establish limits from time to \ntime concerning use of the Service, including among others, the maximum \nnumber of days that Content will be maintained or retained by the \nService, the maximum number and size of postings, e-mail messages, or \nother Content that may be transmitted or stored by the Service, and the \nfrequency with which you may access the Service or the Website. You \nacknowledge and agree that OLX has no responsibility or liability for \nthe deletion or failure to store any Content maintained or transmitted \nby the Website or the Service. You acknowledge and agree that OLX \nreserves the right at any time to modify or discontinue the Service (or \nany part thereof) with or without notice, and that OLX shall not be \nliable to you or to any third party for any such modification, \nsuspension or discontinuance of the Service. You acknowledge and agree \nthat OLX, in its sole and absolute discretion, has the right (but not \nthe obligation) to delete or deactivate your account, block your e-mail \nor IP address, or otherwise terminate your access to or use of the \nService (or any part thereof), immediately and without notice, and \nremove and discard any Content within the Service, for any reason or no \nreason at all, including, without limitation, if OLX believes that you \nhave violated these Terms. Further, you agree that OLX shall not be \nliable to you or any third-party for any termination of your access to \nthe Website or the Service. Further, you agree not to attempt to use the\n Service after any such termination.</p>\n</li>\n<li>\n<h3>DISCLAIMER OF WARRANTIES</h3>\n<p>YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT USE OF THE WEBSITE AND THE \nSERVICE IS ENTIRELY AT YOUR OWN RISK AND THAT THE WEBSITE AND THE \nSERVICE ARE PROVIDED ON AN \"AS IS\" OR \"AS AVAILABLE\" BASIS, WITHOUT ANY \nWARRANTIES OF ANY KIND. ALL EXPRESS AND IMPLIED WARRANTIES, INCLUDING, \nWITHOUT LIMITATION, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE, AND NON-INFRINGEMENT OF PROPRIETARY RIGHTS ARE \nEXPRESSLY DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. TO THE \nFULLEST EXTENT PERMITTED BY LAW OLX, ITS OFFICERS, DIRECTORS, EMPLOYEES,\n AND AGENTS DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, IN CONNECTION \nWITH THE WEBSITE AND YOUR USE THEREOF. OLX MAKES NO WARRANTIES OR \nREPRESENTATIONS ABOUT THE ACCURACY OR COMPLETENESS OF THE WEBSITE'S \nCONTENT OR THE CONTENT OF ANY THIRD PARTY WEBSITES LINKED TO THE WEBSITE\n AND ASSUMES NO LIABILITY OR RESPONSIBILITY FOR ANY (I) ERRORS, \nMISTAKES, OR INACCURACIES OF CONTENT, (II) PERSONAL INJURY OR PROPERTY \nDAMAGE, OF ANY NATURE WHATSOEVER, RESULTING FROM YOUR ACCESS TO AND USE \nOF THE WEBSITE AND SERVICE, (III) ANY UNAUTHORIZED ACCESS TO OR USE OF \nOUR SERVERS AND/OR ANY AND ALL PERSONAL INFORMATION AND/OR FINANCIAL \nINFORMATION STORED THEREIN, (IV) ANY INTERRUPTION OR CESSATION OF \nTRANSMISSION TO OR FROM THE WEBSITE, (IV) ANY BUGS, VIRUSES, TROJAN \nHORSES, OR THE LIKE WHICH MAY BE TRANSMITTED TO OR THROUGH THE WEBSITE \nBY ANY THIRD PARTY, AND/OR (V) ANY ERRORS OR OMISSIONS IN ANY CONTENT OR\n FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF \nANY CONTENT POSTED, EMAILED, COMMUNICATED, TRANSMITTED, OR OTHERWISE \nMADE AVAILABLE VIA THE WEBSITE OR THE SERVICE. OLX DOES NOT WARRANT, \nENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY FOR ANY PRODUCT OR SERVICE \nADVERTISED OR OFFERED BY A THIRD PARTY THROUGH THE WEBSITE OR ANY \nHYPERLINKED WEBSITE OR FEATURED IN ANY BANNER OR OTHER ADVERTISING, AND \nOLX WILL NOT BE A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING \nANY TRANSACTION BETWEEN YOU AND/OR OTHER USERS AND/OR THIRD-PARTY \nPROVIDERS OF PRODUCTS OR SERVICES. AS WITH THE PURCHASE OF A PRODUCT OR \nSERVICE THROUGH ANY MEDIUM OR IN ANY ENVIRONMENT, YOU SHOULD USE YOUR \nBEST JUDGMENT AND EXERCISE CAUTION WHERE APPROPRIATE.\n</p>\n</li>\n<li>\n<h3>LIMITATIONS OF LIABILITY</h3>\n<p>IN NO EVENT SHALL OLX, ITS OFFICERS, DIRECTORS, EMPLOYEES, OR AGENTS,\n BE LIABLE FOR DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR \nEXEMPLARY DAMAGES (EVEN IF OLX HAS BEEN ADVISED OF THE POSSIBILITY OF \nSUCH DAMAGES), RESULTING FROM ANY ASPECT OF YOUR USE OF THE WEBSITE OR \nTHE SERVICE, INCLUDING WITHOUT LIMITATION WHETHER THE DAMAGES ARISE FROM\n USE OR MISUSE OF THE WEBSITE OR THE SERVICE, FROM INABILITY TO USE THE \nWEBSITE OR THE SERVICE, OR THE INTERRUPTION, SUSPENSION, MODIFICATION, \nALTERATION, OR TERMINATION OF THE WEBSITE OR THE SERVICE. SUCH \nLIMITATION OF LIABILITY SHALL ALSO APPLY WITH RESPECT TO DAMAGES \nINCURRED BY REASON OF OTHER SERVICES OR PRODUCTS RECEIVED THROUGH OR \nADVERTISED IN CONNECTION WITH THE WEBSITE OR THE SERVICE OR ANY LINKS ON\n THE WEBSITE, AS WELL AS BY REASON OF ANY INFORMATION, OPINIONS OR \nADVICE RECEIVED THROUGH OR ADVERTISED IN CONNECTION WITH THE WEBSITE OR \nTHE SERVICE OR ANY LINKS ON THE OLX SITE. THESE LIMITATIONS SHALL APPLY \nTO THE FULLEST EXTENT PERMITTED BY LAW. YOU SPECIFICALLY ACKNOWLEDGE AND\n AGREE THAT OLX SHALL NOT BE LIABLE FOR USER SUBMISSIONS OR THE \nDEFAMATORY, OFFENSIVE, OR ILLEGAL CONDUCT OF ANY USER OR THIRD PARTY AND\n THAT THE RISK OF HARM OR DAMAGE FROM THE FOREGOING RESTS ENTIRELY WITH \nYOU. The Website is controlled and offered by OLX from its facilities in\n the United States of America. OLX makes no representations or \nwarranties that the Website is appropriate for use in other locations. \nThose who access or use the Website from other jurisdictions do so at \ntheir own volition and risk and are responsible for compliance with \nlocal law.\n</p>\n</li>\n<li>\n<h3>ASSIGNMENT</h3>\n<p>These Terms, and any rights and licenses granted hereunder, may not \nbe transferred or assigned by you, but may be assigned by OLX without \nrestriction. Any assignment or transfer by you shall be null and void.</p>\n</li>\n<li>\n<h3>ABILITY TO ACCEPT TERMS OF SERVICE</h3>\n<p>This Website is intended only for adults. You affirm that you are \neither more than 18 years of age, or an emancipated minor, or possess \nlegal parental or guardian consent, and are fully able and competent to \nenter into the terms, conditions, obligations, affirmations, \nrepresentations, and warranties set forth in these Terms, and to abide \nby and comply with these Terms. In any case, you affirm that you are \nover the age of 13, as the Website is not intended for children under \n13.</p>\n<p><u><b>NOTICE TO CHILDREN UNDER THE AGE OF 13 AND THEIR PARENTS OR GUARDIANS</b></u></p>\n<p><b>If you are under the age of 13, YOU MUST NOT USE THIS WEBSITE. \nPlease do not send us your personal information, including your email \naddresses, name, and/or contact information. If you want to contact us, \nyou may only do so through your parent or legal guardian.</b></p>\n</li>\n<li>\n<h3>GENERAL INFORMATION</h3>\n<p>These Terms and the other policies posted on the Website constitute \nthe complete and exclusive understanding and agreement between you and \nOLX and govern your use of the Service and the Website superseding all \nprior understandings, proposals, agreements, negotiations, and \ndiscussions between the parties, whether written or oral. The Terms and \nthe relationship between you and OLX shall be governed by the laws of \nthe State of New York without regard to its conflict of law principles. \nYou and OLX agree to submit to the personal and exclusive jurisdiction \nof the courts located within the State of New York. The failure of OLX \nto exercise or enforce any right or provision of the Terms shall not \nconstitute a waiver of such right or provision. If any provision of the \nTerms is found by a court of competent jurisdiction to be invalid \n(including, without limitation, because such provision is inconsistent \nwith the laws of another jurisdiction) or inapplicable, the parties \nnevertheless agree that the court should endeavor to give effect to the \nparties' intentions as reflected in the provision. If any provision or \nprovisions of these Terms is held to be invalid, illegal or \nunenforceable, the validity, legality and enforceability of the \nremaining provisions of the Terms shall not in any way be affected or be\n impaired. YOU AGREE THAT ANY CAUSE OF ACTION BROUGHT BY YOU AND ARISING\n OUT OF OR RELATED TO YOUR USE OF THE SERVICE AND/OR THE WEBSITE MUST \nCOMMENCE WITHIN ONE (1) YEAR AFTER THE CAUSE OF ACTION ACCRUES, EXCEPT \nTHAT OLX MAY COMMENCE ANY SUCH CAUSE OF ACTION IN ACCORDANCE WITH THE \nAPPLICABLE STATUTE OF LIMITATIONS UNDER NEW YORK LAW. OTHERWISE, SUCH \nCAUSE OF ACTION IS PERMANENTLY BARRED. These Terms shall inure to the \nbenefit of and be binding upon each party's successors and assigns.</p>\n</li>\n<li>\n<h3>VIOLATION OF TERMS AND LIQUIDATED DAMAGES</h3>\n<p>Please report any violations of the Terms that you become aware of by\n contacting us using the link at the bottom of the OLX homepage at <a target=\"_blank\" href=\"http://www.olx.com/\">www.olx.com</a>.\n Any failure to act by OLX with respect to a breach by you or others \ndoes not waive our right to act with respect to subsequent or similar \nbreaches by you or others. You understand and agree that, because \ndamages are often difficult or impossible to quantify, if actual damages\n cannot be reasonably calculated then you will be liable to pay OLX the \nfollowing as liquidated damages (and not a penalty):</p>\n<p>a. If OLX establishes any limits on the frequency with which you may \naccess the Service, or terminates your access to or use of the Service, \nyou agree to pay OLX ninety nine dollars ($99) for (i) each message \nposted in excess of such limits or (ii) for each day on which you access\n OLX in excess of such limits, whichever is higher.</p>\n<p>b. If you post a message that (1) impersonates any person or entity; \n(2) falsely states or otherwise misrepresents your affiliation with a \nperson or entity; or (3) that includes personal or identifying \ninformation about another person without that person's explicit consent,\n you agree that OLX in its sole discretion may disclose identifying \ninformation about you to the victim, and that should OLX bring a claim \nagainst you in court, that you will pay OLX one thousand one hundred \ndollars ($1,100) for each such message.</p>\n<p>c. If you are a Posting Agent that uses the Service in violation of \nthese Terms, in addition to any liquidated damages under Section 20(e) \nbelow you agree to pay OLX ninety nine dollars ($99) for each and every \nitem you post in violation of these Terms. A Posting Agent will also be \ndeemed an agent of the party engaging the Posting Agent to access the \nService, and such party (by engaging the Posting Agent in violation of \nthese Terms) agrees to pay OLX an additional ninety nine dollars ($99) \nfor each item posted by the Posting Agent on behalf of such party in \nviolation of these Terms.</p>\n<p>d. If you use OLX e-mail addresses or computer systems to send \nunsolicited e-mail advertisements to OLX e-mail addresses or any other \nparty, you agree to pay OLX thirty dollars ($30) for each such e-mail.</p>\n<p>e. If you post messages in violation of these Terms, other than as \ndescribed above, you agree to pay OLX ninety nine dollars ($99) for each\n such message. Notwithstanding the foregoing, OLX may, in its sole and \nabsolute discretion, issue a warning before assessing damages pursuant \nto this Section 20(e).</p>\n<p>f. If you aggregate, copy, display, mirror, reproduce, or otherwise \nexploit for any purpose any Content (except for your own Content) in \nviolation of these Terms without OLX's express written permission, you \nagree to pay OLX ten thousand dollars ($10,000) for each day on which \nyou engage in such conduct.</p>\n<p>If none of the foregoing clauses (a) – (f) are applicable, you agree \nto pay OLX’s actual damages, to the extent such actual damages can be \nreasonably calculated. Notwithstanding any other provision of these \nTerms, OLX retains the right to seek equitable remedies, including \nwithout limitation, specific performance of any term contained in these \nTerms, or a preliminary or permanent injunction against the breach or \nthreatened breach of any such term or in aid of the exercise of any \npower granted in these Terms, or any combination thereof, without the \nnecessity of posting a bond.</p>\n</li>\n<li>\n<h3>PRIVACY POLICY</h3>\n<p><u>A. Safe Harbor Certification</u></p>\n<p>OLX complies with the U.S.-EU Safe Harbor Framework and the \nU.S.-Swiss Safe Harbor Framework as set forth by the U.S. Department of \nCommerce regarding the collection, use, and retention of personal \ninformation from European Union member countries and Switzerland.  OLX \nhas certified that it adheres to the Safe Harbor Privacy Principles of \nnotice, choice, onward transfer, security, data integrity, access, and \nenforcement.  To learn more about the Safe Harbor program, and to view \nOLX’s certification, please visit http://www.export.gov/safeharbor/</p>\n<p><u>B. Type of Information Collected:</u></p>\n<p>When you visit the Website, we may collect certain non-personal \ninformation such as your Internet Protocol (“IP”) address, operating \nsystem, browser type, and Internet service provider. This type of \ninformation does not identify you personally. When you register with the\n Website, we may also collect personal information that you provide such\n as your name, mailing address, email address, home country, and zip \ncode (“Registration Information”). You have the option of also providing\n to us your phone and fax numbers, gender, age, and/or company name if \nyou choose to register with OLX. If you provide your phone number, it \nwill be displayed in your posting. We may also collect additional \ninformation that our users provide, such as new or deleted postings, new\n or deleted comments, keyword searches, scam reports and new contact \nsellers. We use a third-party credit card processing company for \npurchases, and other third party companies to monitor site traffic, \nwhich may, in some instances, store your information (see Section 21(D) \nbelow). When you visit the Website and/or use the OLX mobile \napplication, OLX may use GPS technology (or other similar technology) to\n determine your current location in order to determine the city you are \nlocated within and display a location map with relevant advertisements. \nOLX will not share your current location with other OLX users or \npartners. If you do not want OLX to use your location for the purposes \nset forth above, you should turn off the location services for the OLX \napplication located in your OLX account settings or in your mobile phone\n settings. <b>By using this Website or the Service, you consent to \ncollection, storage, and use of the personal information you provide for\n any of the Services that we offer, and you consent to our collection of\n any changes or updates that you may provide to any information you \nprovide that is collected by OLX.</b>\n</p>\n<p><u>C. Cookies</u></p>\n<p>We may use cookies to manage our users’ sessions and to store \npreferences, tracking information, and language selection. Cookies may \nbe used whether you register with us or not. “Cookies” are small text \nfiles transferred by a web server to your hard drive and thereafter \nstored on your computer. The types of information a cookie collects \ninclude the date and time you visited, your browsing history, your \npreferences, and your username. In some instances, our third-party \nservice providers may use cookies on the Website. We cannot control or \naccess cookies used by third- party service providers. This Privacy \nPolicy covers only Cookies used by us, and not any cookies used by third\n parties. You have the ability to either accept or decline the use of \ncookies on your computer, whether you are registered with us or not. \nTypically, you can configure your browser to not accept cookies. \nHowever, declining the use of cookies may limit your access to certain \nfeatures of the Website. For example, you may have difficulty logging in\n or using certain interactive features of the Website, such as the OLX \nForum or Comments feature.</p>\n<p><u>D. Third Parties</u></p>\n<p>We use third-party service providers to process purchases you make \nand to monitor our users’ interests. In addition, the Website may \noccasionally contain links to Third-Party Sites. If you click on the \nlinks to Third-Party Websites, you leave the Website. We are not \nresponsible for the content of these Third-Party Websites or for the \nsecurity of your personal information when you use the Third Party \nWebsites. These third-party service providers and Third-Party Sites may \nhave their own privacy policies governing the storage and retention of \nyour personal information that you may be subject to. They may collect \ninformation such as your IP address, browser specification, or operating\n system. This Privacy Policy does not govern personal information \nprovided to, stored on, or used by these third-party providers and \nThird-Party Sites. We recommend that when you enter a Third-Party Site, \nyou review the Third Party Site’s privacy policy as it relates to \nsafeguarding your personal information. We use third-party advertising \ncompanies to serve ads when you visit the Website. These companies may \nuse information (not including your name, address, email address, or \ntelephone number) about your visits to the Website and Third-Party \nWebsites in order to provide advertisements about goods and services of \ninterest to you. On the Website, Google, as a third-party vendor, uses \nCookies to serve ads. Google’s use of the DoubleClick DART Cookie \nenables it to serve ads to the Website’s users based on their visit to \nthe Websites and Third-Party Websites. For more information on the DART \nCookie see: <a target=\"_blank\" href=\"http://www.doubleclick.com/privacy/faq.aspx\">http://www.doubleclick.com/privacy/faq.aspx</a>. You may opt out of the use of the DART Cookie by Google by visiting the Google Ad and Content Network Privacy Policy at: <a target=\"_blank\" href=\"http://www.google.com/privacy_ads.html\">http://www.google.com/privacy_ads.html</a>. You may opt out of targeting advertising for all NAI member ad networks by visiting: <a target=\"_blank\" href=\"http://www.networkadvertising.org/\">http://www.networkadvertising.org/</a>.\n By publishing an ad on the Website, you acknowledge and agree that the \nContent is public and accessible by any third party and that they may \nappear in search engine results (such as Yahoo!, MSN, Google, Altavista,\n and other search engines) and in the cache of those search engines, in \nfeeds and Third-Party Websites pursuant to cobranding agreements, and \nthat it is the sole responsibility of each of those search engines, \nThird-Party Websites or RSS web feed resources to update and/or to \nremove Content from their indexes and their cache. You agree and \nacknowledge that OLX is not be liable for the information published in \nsearch results or by any Third-Party Website that carries OLX postings.\n</p>\n<p><u>E. How Your Information is Used</u></p>\n<p>We may use information provided by you to: (i) enforce our Terms of \nUse, monitor user activity, such as keyword searches or new postings, \nand more effectively manage traffic on the Website; (ii) provide \ncustomer services, create and manage user accounts; and (iii) assist you\n with technical difficulties.  Also, we may share with third-party \nservice providers certain information, such as your browser capabilities\n or operating system, that we have collected in order to better \nunderstand which advertisements and services may interest you. We may \nblock users located in certain countries from using the Website. We may \nretain such information for as long as is required to fulfill our \nbusiness objective, even after your account is terminated.</p>\n<p><u>F. Protecting Your Personal Information</u></p>\n<p>You are a valued customer, and we recognize that protecting your \nprivacy is important to you. For this reason, we are committed to \nprotecting the personal information you provide in a variety of ways. We\n do not directly process any payments and do not store your credit card \ninformation. Secured socket layer (“SSL”) technology is used for \nprocessing payment transactions with third- party service provider \npartners, such as Click &amp; Buy, PayPal, and DineroMail. Your \nRegistration Information may be protected by a unique customer password \nand user ID. You should not disclose your password information to anyone\n and you should always remember to log off if using a shared computer. \nLastly, you may utilize the Website as an anonymous user by not \nregistering.  We have taken certain security protections in safeguarding\n your personal information. However, as with most electronic \ntransactions, no method is 100% safe. While we strive to use a \ncommercially acceptable means to protect the personal information you \nprovide, we cannot guarantee its security. Therefore, you acknowledge \nand agree that we assume no liability regarding the theft, loss, \nalteration or misuse of personal or other information or Content, \nincluding, without limitation, such information that has been provided \nto third parties or other users, or with regards to the failure of a \nthird party to abide by the agreement between us and such third party. \nYou may participate in our Forum or utilize our Comments feature. For \npostings to the Forum, your username will be posted. For postings using \nthe Comments feature, your name and email will only be posted if you \nprovide it in the comment. We strongly discourage posting any \ninformation on these features or in any Content posted by you that you \ndo not want others to see. You agree that you are responsible for \nmaintaining the confidentiality of your username and password, and all \nuses of your account, whether or not you have authorized such use.\n</p>\n<p><u>G. Accessing and Modifying Personal Information and Communication Preferences</u></p>\n<p>You may access, remove, review, and/or make changes to personal information that you have provided to us <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Contact Support form</a>.\n You need not register in order to post or respond to advertisements on \nthe Website. If you register, we may send you certain notifications, \nadvertisements, promotions, and specials. We may also send you any \nlegally required notifications and certain notifications, including but \nnot limited to, service related notices or notices regarding a change to\n any of our policies. For example, we may send you a notice regarding \nserver problems or scheduled maintenance to the Website. In order to \nopt-out of receiving these notices, you may need to deactivate your \naccount. You can opt out of certain e-mail communications from us, \nincluding our newsletters, advice on buying and selling on the Website, \nnotifications that a user has commented on your posting, and \nnotifications that you can refresh your posting. We will not change your\n preferences without your consent.  You cannot opt out of receiving \ntransactional communications from OLX related to your account.</p>\n<p><u>H. Disclosures</u></p>\n<p>On rare occasions, we may be required to disclose your personal \ninformation due to legal or regulatory requirements. In such instances, \nwe reserve the right to disclose your personal information as required \nin order to comply with our legal obligations, including but not limited\n to complying with court orders, warrants, subpoenas, service of process\n requirements, or discovery requests. We may also disclose information \nabout our users to law enforcement officers or others, in the good faith\n belief that such disclosure is reasonably necessary to enforce these \nTerms and/or Privacy Policy; respond to claims that any Content violates\n the rights of third-parties; or protect the rights, property, or \npersonal safety of OLX, our users or the general public.  If \nsubstantially all of our assets are sold or merged into another company,\n we will notify you of the transaction. The acquiring company shall be \ngiven access to your personal information without your consent. If we \nsell only a part of our business, the acquiring entity shall have access\n to your personal information without your consent and we may send you a\n notice regarding this sale.</p>\n<p><u>I. Notification of Changes</u></p>\n<p>We reserve the right to change these Terms from time to time, and at \nour sole discretion. We may send you a notice regarding material changes\n to these Terms, including the Privacy Policy or the Website. You should\n make note of the “last updated date” at the beginning of the Terms. \nWith this information, you should be able to identify if the Terms have \nbeen updated recently.</p>\n<p><u>J. Disputes</u></p>\n<p>Any disputes regarding your privacy are subject to the Terms, \nincluding but not limited to any provisions related to indemnification, \nlimitations on damages, and choice of law.</p>\n<p><u>K. Important Notices to Non-U.S. Residents</u></p>\n<p>OLX abides by the Safe Harbor principles set forth by the U.S. \nDepartment of Commerce regarding the collection, use, and retention of \napplicable data from the European Union.  However, it is important to \nnote that the Website and its servers are operated in the United States.\n  If you are located outside of the United States, please be aware that \nany personal information you provide to us will be transferred to the \nUnited States.  By using the Website and by providing us personal \ninformation when using our services, you consent to this transfer and \nour use of the information and data provided by you in accordance with \nthis Privacy Policy.</p>\n<p>In order to comply with the Safe Harbor framework, OLX commits to the\n resolution of complaints about your privacy and our collection or use \nof your personal information.  We have also committed to resolve any \ncomplaints by European Union citizens relating to this Privacy Policy, \nwhich cannot be resolved directly with our company, through the Council \nof Better Business Bureaus, Inc.’s Safe Harbor Privacy Dispute \nResolution Procedures.</p>\n<p>If you have any questions regarding this Privacy Policy, please \ncontact us as described in the “How to Contact Us” section. We will \ninvestigate your question, respond to your inquiry, and attempt to \nresolve any concerns regarding your privacy question. If you do not \nreceive acknowledgement of your complaint or if your complaint is not \nsatisfactorily addressed by OLX, you should then contact the Council of \nBetter Business Bureaus, Inc. as set forth below.</p>\n<p>In compliance with the US-EU Safe Harbor Principles, OLX commits to \nresolve complaints about your privacy and our collection or use of your \npersonal information. European Union citizens with inquiries or \ncomplaints regarding this privacy policy should first contact OLX as \ndescribed in the “How to Contact Us” section.</p>\n<p>OLX has further committed to refer unresolved privacy complaints \nunder the US-EU Safe Harbor Principles to an independent dispute \nresolution mechanism, the BBB EU SAFE HARBOR, operated by the Council of\n Better Business Bureaus. If you do not receive timely acknowledgment of\n your complaint, or if your complaint is not satisfactorily addressed by\n OLX, please visit the BBB EU SAFE HARBOR web site at \nwww.bbb.org/us/safe-harbor-complaints for more information and to file a\n complaint.</p>\n\n<p><u>L.How to Contact Us</u></p>\n<p>If you have questions about this Privacy Policy, please contact OLX <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Legal Issues report form</a> with “Privacy Policy” in the subject line.</p>\n</li><p></p>\n    </div>\n</section>";
  });

templates["enhanced_ar/partials/head"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<title>OLX Mobile</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n<link href=\"/css/html5/styles.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\" />\n";
  });

templates["enhanced_ar/partials/header"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<header>\n    <a href=\"#\" class=\"navLeft\">\n        <span></span>\n        <span></span>\n        <span></span>\n    </a>\n    <a href=\"/\"><div class=\"olxLogo\"></div></a>\n    <h1></h1>\n    <div class=\"search\"></div>\n</header>";
  });

templates["enhanced_ar/partials/languages"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n	";
  stack1 = (helper = helpers.ifC || (depth0 && depth0.ifC),options={hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data},helper ? helper.call(depth0, (depth0 && depth0.id), "===", (depth1 && depth1.selectedLanguage), options) : helperMissing.call(depth0, "ifC", (depth0 && depth0.id), "===", (depth1 && depth1.selectedLanguage), options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		<li><strong>";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</strong></li>\n	";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		<li><a href=\"?language=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a></li>\n	";
  return buffer;
  }

  buffer += "<ul>\n";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.languages)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>";
  return buffer;
  });

templates["enhanced_ar/partials/layout"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";


  buffer += "<!doctype html>\n<html>\n	<head>\n	    ";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "enhanced/partials/head", options) : helperMissing.call(depth0, "partial", "enhanced/partials/head", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</head>\n	<body>\n		\n		";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "enhanced/partials/header", options) : helperMissing.call(depth0, "partial", "enhanced/partials/header", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		<article>\n	  		"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "left-panel/index", options) : helperMissing.call(depth0, "view", "left-panel/index", options)))
    + "\n			<div id=\"content\">\n				";
  if (helper = helpers.body) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.body); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "footer/index", options) : helperMissing.call(depth0, "view", "footer/index", options)))
    + "\n			</div>\n		</article>\n\n		<script src=\"/js/mergedAssets.js\"></script>\n		<script>\n			(function() {\n				var App = window.App = new (require('app/app'))("
    + escapeExpression((helper = helpers.json || (depth0 && depth0.json),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.appData), options) : helperMissing.call(depth0, "json", (depth0 && depth0.appData), options)))
    + ");\n				App.bootstrapData("
    + escapeExpression((helper = helpers.json || (depth0 && depth0.json),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.bootstrappedData), options) : helperMissing.call(depth0, "json", (depth0 && depth0.bootstrappedData), options)))
    + ");\n				App.start();\n			})();\n		</script>\n	</body>\n</html>\n";
  return buffer;
  });

templates["enhanced_ar/user/login"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</small>\n                ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    <small style=\"display: block; color: blue;\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailMsg)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</small>\n                ";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailErr)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</small>\n                ";
  return buffer;
  }

  buffer += "<h1>Login</h1>\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n            <form action=\"/login\" method=\"POST\">\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.err), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            	<span style=\"display: block;\">Username or Email</span>\n                <input type=\"text\" name=\"usernameOrEmail\">\n            	<span style=\"display: block;\">Password</span>\n                <input type=\"password\" name=\"password\">\n            	<span style=\"display: block;\"><input type=\"submit\" value=\"Login\"></span>\n            </form>\n		</section>\n	</div>\n</div>\n<h1>Already posted an ad</h1>\n<div class=\"row-fluid font-format\">\n    <div class=\"span6 celd-format\" >\n        <section style=\"padding-bottom:0px;\">\n            <form action=\"/loginAnon\" method=\"POST\">\n                ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailMsg), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailErr), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                <span style=\"display: block;\">\n                    Enter the email that you used to post your ad and receive the link to My OLX by email.\n                </span>\n                <input type=\"text\" name=\"email\">\n                <span style=\"display: block;\"><input type=\"submit\" value=\"Send\"></span>\n            </form>\n        </section>\n    </div>\n</div>";
  return buffer;
  });

templates["enhanced_ar/user/registration"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</small>\n                ";
  return buffer;
  }

  buffer += "<h1>Register</h1>\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n            <form action=\"/registration\" method=\"POST\">\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.err), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            	<span style=\"display: block;\">Username</span>\n                <input type=\"text\" name=\"username\">\n            	<span style=\"display: block;\">Email</span>\n                <input type=\"text\" name=\"email\">\n            	<span style=\"display: block;\">Password</span>\n                <input type=\"password\" name=\"password\">\n                <span style=\"display: block;\">\n                    <input type=\"checkbox\" name=\"agreeTerms\">\n                    I agree to the <a href=\"/terms\">Terms and Conditions</a> of OLX \n                </span>\n            	<span style=\"display: block;\"><input type=\"submit\" value=\"Register\"></span>\n            </form>\n		</section>\n	</div>\n</div>";
  return buffer;
  });

templates["enhanced_br/categories/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n 						<li>\n							<a href=\"/items?categoryId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&location="
    + escapeExpression(((stack1 = ((stack1 = (depth1 && depth1.params)),stack1 == null || stack1 === false ? stack1 : stack1.location)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a>\n						</li>\n					";
  return buffer;
  }

  buffer += "<h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1>\n\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n			<div id='subcategories.models'>\n			  	<ul>\n					";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.children), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				</ul>\n			</div>\n		</section>\n	</div>\n</div>";
  return buffer;
  });

templates["enhanced_br/categories/show"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n			<li><a href=\"/items?categoryId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&location="
    + escapeExpression(((stack1 = ((stack1 = (depth1 && depth1.params)),stack1 == null || stack1 === false ? stack1 : stack1.location)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a></li>\n		";
  return buffer;
  }

  buffer += "<!--h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1-->\n\n\n<section>\n  	<ul id=\"subCategory\">\n		";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.category)),stack1 == null || stack1 === false ? stack1 : stack1.children), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</ul>\n</section>\n";
  return buffer;
  });

templates["enhanced_br/footer/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<section>\n		BR - <a href=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.marketing)),stack1 == null || stack1 === false ? stack1 : stack1.link)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.marketing)),stack1 == null || stack1 === false ? stack1 : stack1.promo)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</a>\n	</section>\n";
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.marketing)),stack1 == null || stack1 === false ? stack1 : stack1.link), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  });

templates["enhanced_br/home/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program3(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program5(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				\n				<div class=\"swiper-slide\"> \n					<a href=\"items/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" >\n						<div class=\"slide\">\n				        	<div style=\"background-image: url('";
  if (helper = helpers.thumbnail) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.thumbnail); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "');\"></div>\n				        </div>\n				        <div class=\"caption\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.date)),stack1 == null || stack1 === false ? stack1 : stack1.since)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<br><span>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span></div>\n				    </a>\n				</div>\n				\n			";
  return buffer;
  }

function program7(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				<div class=\"swiper-slide\"> \n					<a href=\"categories/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "?location="
    + escapeExpression(((stack1 = (depth1 && depth1.siteLocation)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" >\n						<div class=\"slide\">\n				          <div class=\"home-";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + " color\">\n				          	<p>";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</p>\n				          </div>\n				        </div>\n			        </a>\n				</div>\n			";
  return buffer;
  }

function program9(depth0,data) {
  
  var buffer = "", helper, options;
  buffer += "\n		"
    + escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.layout), options) : helperMissing.call(depth0, "partial", (depth0 && depth0.layout), options)))
    + "\n	";
  return buffer;
  }

  buffer += "<section id=\"newAds\">\n	<h2>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.newAds_prefix)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</h2>\n	<div class=\"swiper-containerAds\">	\n		<div class=\"swiper-wrapper\">\n			";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.whatsNewItems), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</div>\n	</div>\n</section>\n\n<section id=\"categories\">\n	<h2>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.categories_title)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h2>\n	<div class=\"swiper-containerCats\">	\n		<div class=\"swiper-wrapper\">\n			";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.categories)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(7, program7, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</div>\n	</div>\n</section>\n\n<section id=\"postAd\">\n	<div>\n		<h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.postAd_prefix)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<strong>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.postAd_strong)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</strong>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.postAd_suffix)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1>\n		<a href=\"/posting\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.dictionary)),stack1 == null || stack1 === false ? stack1 : stack1.postAd_button)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</a>\n	</div>\n</section>\n\n<section id=\"adWare\">\n	<div class=\"ad l\">\n		<div class=\"adC\">\n			<img src=\"http://afs.googleusercontent.com/olx/olx_es.png\" class=\"adIcon\">\n\n			<div class=\"adD\">\n				<div class=\"adStd threeLine\">\n					<div>\n						<a target=\"_blank\" class=\"titleLink\" href=\"\" id=\"e7\">\n							<span dir=\"ltr\">Rack y estanterias - rack-estant.com</span>&lrm;\n						</a>\n					</div>\n					<span class=\"descText\">\n						<span dir=\"ltr\">Fabrica - Amplia Financiacion todo el pais - Llamenos hoy !</span>&lrm;\n					</span><br>\n					<a target=\"_blank\" class=\"domainLink\" href=\"\" id=\"e8\">\n						<span dir=\"ltr\">www.rack-estant.com/</span>&lrm;\n					</a>\n				</div>\n			</div>\n		</div>\n	</div>\n</section>\n\n<section id=\"location\">\n	"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "location/select", options) : helperMissing.call(depth0, "view", "location/select", options)))
    + "\n</section>\n\n<section id=\"languages\">\n	";
  stack1 = (helper = helpers.layout || (depth0 && depth0.layout),options={hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data},helper ? helper.call(depth0, (depth0 && depth0.template), "/partials/languages", options) : helperMissing.call(depth0, "layout", (depth0 && depth0.template), "/partials/languages", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</section>\n";
  return buffer;
  });

templates["enhanced_br/items/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n	<section>	\n		<a href=\"/items/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.thumbnail), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			\n			<p>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.date)),stack1 == null || stack1 === false ? stack1 : stack1.since)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " in ";
  if (helper = helpers.displayLocation) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.displayLocation); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</p>\n			<div class=\"title\"><h2><span><span>";
  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span></span></h2></div>\n			";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n		</a>\n	</section>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		        <div class=\"image filled\" style=\"background-image:url(";
  if (helper = helpers.thumbnail) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.thumbnail); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "); ?>);\"></div>\n			";
  return buffer;
  }

function program4(depth0,data) {
  
  
  return "\n				<div class=\"image\"></div>\n			";
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				<h3>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h3>\n			";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n";
  return buffer;
  });

templates["enhanced_br/items/search"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<h3>Results for: ";
  if (helper = helpers.searchTerm) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.searchTerm); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n\n"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{
    'items': ((depth0 && depth0.items))
  },data:data},helper ? helper.call(depth0, "items/index", options) : helperMissing.call(depth0, "view", "items/index", options)))
    + "\n";
  return buffer;
  });

templates["enhanced_br/items/show"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n		";
  stack1 = (helper = helpers.ifC || (depth0 && depth0.ifC),options={hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data},helper ? helper.call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images)),stack1 == null || stack1 === false ? stack1 : stack1.length), "==", 1, options) : helperMissing.call(depth0, "ifC", ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images)),stack1 == null || stack1 === false ? stack1 : stack1.length), "==", 1, options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			<div class=\"onePicture\">\n				<div class=\"slide\">\n		          <div style=\"background-image: url('"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images)),stack1 == null || stack1 === false ? stack1 : stack1[0])),stack1 == null || stack1 === false ? stack1 : stack1.url)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "');\"></div>\n		        </div>\n			</div>\n		";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<div class=\"swiper-containerItem\">\n			<div class=\"swiper-wrapper\">\n				";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			</div>\n			<div class=\"slidePagination\"></div>\n		</div>\n		";
  return buffer;
  }
function program5(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				  <div class=\"swiper-slide\"> \n						<div class=\"slide\">\n				          <div style=\"background-image: url('";
  if (helper = helpers.url) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.url); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "');\"></div>\n				        </div>\n					</div>\n				";
  return buffer;
  }

function program7(depth0,data) {
  
  
  return "\n		<div class=\"noPicture\">\n			<span></span>\n			<p>No hay fotitos!!</p>\n			<div class=\"clear\"></div>\n		</div>\n	";
  }

function program9(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n			<li>";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ": <strong>";
  if (helper = helpers.value) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.value); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</strong></li>\n		";
  return buffer;
  }

function program11(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<img style=\"width:100%\" src=\"http://maps.googleapis.com/maps/api/staticmap?center="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.latitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ","
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.longitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " ?>&zoom=14&size=320x100&markers="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.latitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ","
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates)),stack1 == null || stack1 === false ? stack1 : stack1.longitude)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "&sensor=false\">\n	";
  return buffer;
  }

function program13(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.phone), {hash:{},inverse:self.program(16, program16, data),fn:self.program(14, program14, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		";
  return buffer;
  }
function program14(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.user)),stack1 == null || stack1 === false ? stack1 : stack1.username)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " : ";
  if (helper = helpers.phone) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.phone); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\n			";
  return buffer;
  }

function program16(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.user)),stack1 == null || stack1 === false ? stack1 : stack1.username)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n			";
  return buffer;
  }

function program18(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone), {hash:{},inverse:self.noop,fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		";
  return buffer;
  }
function program19(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n				"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n			";
  return buffer;
  }

function program21(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n		<div class=\"action call trackMe\" data-tracking=\"itemPage-clickCall\">\n			<a href=\"tel:"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" >\n				<span>Call</span>\n			</a>\n		</div>\n		<div class=\"action sms trackMe\" data-tracking=\"itemPage-clickSms\">\n			<a href=\"sms:"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" >\n				<span>SMS</span>\n			</a>\n		</div>\n	";
  return buffer;
  }

function program23(depth0,data) {
  
  
  return "fullWidth";
  }

  buffer += "<section id=\"itemPage\">\n	";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.images), {hash:{},inverse:self.program(7, program7, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	<span>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.location)),stack1 == null || stack1 === false ? stack1 : stack1.cityName)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n	<h1>"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.price)),stack1 == null || stack1 === false ? stack1 : stack1.displayPrice)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</h1>\n	<p class=\"desc\">";
  stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.description)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1);
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n	\n	<ul id=\"optionals\">\n		";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.optionals), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</ul>\n	";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.coordinates), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n	<div class=\"clear\"></div>\n</section>\n\n<section id=\"actions\">\n	<div class=\"background\"></div>\n	<span>\n		";
  stack1 = helpers['if'].call(depth0, ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.user)),stack1 == null || stack1 === false ? stack1 : stack1.username), {hash:{},inverse:self.program(18, program18, data),fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</span>\n	";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone), {hash:{},inverse:self.noop,fn:self.program(21, program21, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	<div class=\"action email ";
  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.phone), {hash:{},inverse:self.noop,fn:self.program(23, program23, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " trackMe\" data-tracking=\"itemPage-clickEmail\">\n		<div>\n			<span>EMAIL</span>\n		</div>\n	</div>\n	<div class=\"clear\"></div>\n</section>\n\n\n<!--a href=\"/items?categoryId="
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.category)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "&location=";
  if (helper = helpers.location) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.location); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "&relatedAds="
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.item)),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">Related Ads</a-->\n";
  return buffer;
  });

templates["enhanced_br/left-panel/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  
  return "\n				<li class=\"myAds\"><a href=\"/\">Mis Avisos</a></li>\n				<li class=\"myFav\"><a href=\"/\">Favoritos</a></li>\n				<li class=\"login\"><a href=\"/login\">Login</a></li>\n			";
  }

function program3(depth0,data) {
  
  
  return "\n				<li class=\"login\"><a href=\"/registration\">Registration</a></li>\n			";
  }

function program5(depth0,data,depth1) {
  
  var buffer = "", stack1, helper;
  buffer += "\n				<li><a href=\"/categories/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "?location="
    + escapeExpression(((stack1 = (depth1 && depth1.siteLocation)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" class=\"home-";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a></li>\n			";
  return buffer;
  }

  buffer += "<div id=\"overlay\"></div>\n<nav id=\"leftPanel\">\n	<div>\n		<ul class=\"menu\">\n			<li class=\"start\"><a href=\"/\">Inicio</a></li>\n			<li class=\"post\"><a href=\"/\">Publicá un aviso gratis</a></li>\n			";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.user), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			<li class=\"settings\"><a href=\"/\">Settings</a></li>\n		</ul>\n		<ul class=\"categories\">\n			<li class=\"title\">CATEGORIAS</li>\n			";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.categories)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(5, program5, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		</ul>\n	</div>\n</nav>";
  return buffer;
  });

templates["enhanced_br/location/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += " > "
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  return buffer;
  }

function program3(depth0,data) {
  
  
  return "Results";
  }

function program5(depth0,data) {
  
  
  return "Popular Cities";
  }

function program7(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n 						<li>\n							<a href=\"/?cityId=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"city\" style=\"color:black;\">";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a>\n						</li>\n					";
  return buffer;
  }

  buffer += "<h1>"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</h1>\n\n<form action=\"/location\">\n	<input type=\"text\" name=\"search\"><button type=\"submit\">Search</button>\n	<small>Type a city</small>\n</form>\n\n<h3>";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.search), {hash:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</h3>\n\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n			<div id='cities.models'>\n			  	<ul>\n					";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.cities), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n				</ul>\n			</div>\n		</section>\n	</div>\n</div>";
  return buffer;
  });

templates["enhanced_br/location/select"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program3(depth0,data) {
  
  var stack1;
  return escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1));
  }

function program5(depth0,data) {
  
  
  return "Change city";
  }

function program7(depth0,data) {
  
  
  return "Select a city";
  }

  buffer += "<strong>";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</strong>\n<a href=\"location\">";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.location)),stack1 == null || stack1 === false ? stack1 : stack1.city), {hash:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</a>";
  return buffer;
  });

templates["enhanced_br/pages/terms"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<section>\n  	    	<div class=\"breadcrumbs\">\n    <p style=\"border:none;\" class=\"searchResultsTerm\">Terms Of Use</p>\n	</div>\n<div class=\"disclamer\">   \n    <p><br>PLEASE CAREFULLY READ THESE TERMS OF USE. BY USING THIS \nWEBSITE YOU INDICATE YOUR UNDERSTANDING AND ACCEPTANCE OF THESE TERMS. \nIF YOU DO NOT AGREE TO THESE TERMS YOU MAY NOT USE THIS WEBSITE.</p>\n    <p>\n</p><li>\n<h3>ACCEPTANCE</h3>\n<p>OLX, Inc. and its affiliates (OLX) provide a collection of online \nresources which include classified advertisements, forums, and certain \ne-mail services (collectively, the \"Service\") on the website <a target=\"_blank\" href=\"http://www.olx.com/\">www.olx.com</a> and its affiliated sites (including without limitation <a target=\"_blank\" href=\"http://www.mundoanuncio.com/\">www.mundoanuncio.com</a> and <a target=\"_blank\" href=\"http://www.edeng.cn/\">www.edeng.cn</a>)\n (collectively, the \"Website\") subject to these Terms of Use (these \n\"Terms\").  By using the Service, you agree to comply with these Terms.  \nAdditionally, when using a portion of the Service, you agree to conform \nto any applicable posted guidelines for such Service, which may change \nfrom time to time. You understand and agree that you are solely \nresponsible for reviewing these Terms from time to time. Should you \nobject to any term or condition of these Terms, any guideline, or any \nsubsequent changes thereto or become unhappy with OLX in any way, your \nonly choice is to immediately discontinue use of OLX. These Terms may be\n updated by OLX at any time at its sole discretion. OLX may send you \nnotices of changes to the Website or the Terms pursuant to Section 21(I)\n herein. OLX may provide a translation of the English version of the \nTerms into other languages. You understand and agree that any \ntranslation of the Terms into other languages is for your convenience \nonly and that the English version governs the terms of your relationship\n with OLX. Furthermore, if there are any inconsistencies between the \nEnglish version of the Terms and any translation, the English version of\n the Terms shall govern. You understand and agree that to the extent you\n are located in the United States, you will utilize the Service in \ncompliance with any laws, regulations, and guidelines that may be under \nthe jurisdiction of the Office of Foreign Asset Control, U.S. Department\n of Treasury.</p>\n</li>\n<li>\n<h3>DESCRIPTION OF SERVICE AND CONTENT POLICY</h3>\n<p>A.  OLX is the next generation of free online classifieds.  We act as\n a venue to allow our users who comply with these Terms to offer, sell, \nand buy products and services listed on the Website.  Although you may \nbe able to conduct payment and other transactions through the Website, \nusing third-party vendors such as PayPal, OLX is not in any way in \ninvolved in such transactions.  As a result, and as discussed in more \ndetail in these Terms, you hereby acknowledge and agree that OLX is not a\n party to such transactions, has no control over any element of such \ntransactions, and shall have no liability to any party in connection \nwith such transactions. You use the Service and the Website at your own \nrisk.</p>\n<p>B.  You understand that OLX does not control, and is not responsible \nfor ads, directory information, business listings/information, messages \nbetween users, including without limitation e-mails outside OLX’s e-mail\n system or other means of electronic communication, whether through the \nWebsite or another Third Party Website (defined below) or offerings, \ncomments, user postings, files, images, photos, video, sounds, business \nlistings/information and directory information or any other material \nmade available through the Website and the Service (\"Content\"), and that\n by using the Website and the Service, you may be exposed to Content \nthat is offensive, indecent, inaccurate, misleading, or otherwise \nobjectionable.  You acknowledge and agree that you are responsible for \nand must evaluate, and bear all risks associated with, the use of any \nContent, that you may not rely on said Content, and that under no \ncircumstances will OLX be liable in any way for the Content or for any \nloss or damage of any kind incurred as a result of the use of any \nContent listed, e-mailed or otherwise made available via the Service.  \nYou acknowledge and agree that OLX does not pre-screen or approve any \nContent, but that OLX has the right, in its sole and absolute \ndiscretion, to refuse, delete or move any Content that is or may be \navailable through the Service, for violating these Terms or for any \nother reason or no reason at all.  Furthermore, the Website and Content \navailable through the Website may contain links to other third party \nwebsites (“Third Party Websites”), which are completely unrelated to \nOLX. If you link to Third Party Websites, you may be subject to those \nThird Party Websites’ terms and conditions and other policies. OLX makes\n no representation or guarantee as to the accuracy or authenticity of \nthe information contained in any such Third Party Website, and your \nlinking to any other websites is completely at your own risk and OLX \ndisclaims all liability thereto.</p>\n<p>C.  You acknowledge and agree that you are solely responsible for \nyour own Content posted on, transmitted through, or linked from the \nService and the consequences of posting, transmitting, linking or \npublishing it.  More specifically, you are solely responsible for all \nContent that you upload, email or otherwise make available via the \nService. In connection with such Content posted on, transmitted through,\n or linked from the Service by you, you affirm, acknowledge, represent, \nand warrant that: (i) you own or have the necessary licenses, rights, \nconsents, and permissions to use such Content on the Service and Website\n (including without limitation all patent, trademark, trade secret, \ncopyright or other proprietary rights in and to any and all such \nContent) and authorize OLX to use such Content to enable inclusion and \nuse of the Content in the manner contemplated by the Service, the \nWebsite and these Terms; and (ii) you have the written consent, release,\n and/or permission of each and every identifiable individual person or \nbusiness in the Content to use the name or likeness of each and every \nsuch identifiable individual person or business to enable inclusion and \nuse of the Content in the manner contemplated by the Service, the \nWebsite and these Terms.  For clarity, you retain all of your ownership \nrights in your Content; however, by submitting the Content to OLX, you \nhereby grant to OLX an irrevocable, non-cancellable, perpetual, \nworldwide, non-exclusive, royalty-free, sub-licenseable, transferable \nlicense to use, reproduce, distribute, prepare derivative works of, \ndisplay, and perform the Content in connection with the Website and \nOLX's (and its successors') business, including without limitation for \nthe purpose of promoting and redistributing part or all of the Website \nand Content therein (and derivative works thereof) in any media formats \nand through any media channels now or hereafter known.  These rights are\n required by OLX in order to host and display your Content. Furthermore,\n by you posting Content to any public area of the Service, you agree to \nand do hereby grant to OLX all rights necessary to prohibit or allow any\n subsequent aggregation, display, copying, duplication, reproduction, or\n exploitation of the Content on the Service or Website by any party for \nany purpose. You also hereby grant each user of the Website a \nnon-exclusive license to access your Content through the Website. The \nforegoing license to each user granted by you terminates once you remove\n or delete such Content from the Website.</p>\n<p>D.  OLX does not endorse any Content or any opinion, statement, \nrecommendation, or advice expressed therein, and OLX expressly disclaims\n any and all liability in connection with user Content. OLX does not \npermit copyright infringing activities and infringement of intellectual \nproperty rights on the Website, and OLX may, at its sole discretion, \nremove any infringing Content if properly notified that such Content \ninfringes on another's intellectual property rights. OLX reserves the \nright to remove any Content without prior notice. <b>OLX may also \nterminate a user's access to the Website, if they are determined to be a\n repeat infringer. A repeat infringer is a user who has been notified of\n infringing activity more than twice and/or has had a user submission \nremoved from the Website more than twice.</b> Further, at its sole \ndiscretion, OLX reserves the right to decide whether any Content is \nappropriate and complies with these Terms for violations other than \ncopyright infringement and violations of intellectual property law, such\n as, but not limited to, pornography, obscene, libelous, or defamatory \nmaterial, or excessive length. OLX may remove such Content and/or \nterminate a user's access for uploading such material in violation of \nthese Terms at any time, without prior notice and at its sole \ndiscretion.</p>\n<p>E.  OLX may provide a video service to you if you upload photographs \nfor your ad.  By uploading your photographs, you irrevocably consent to \nthe use of your photographs for this service and represent and warrant \nthat you have all right, title and interest necessary to upload and use \nthe photographs on this service.  Under this service, using a third \nparty application or service, OLX may, at its discretion, create a video\n of your photographs, upload the video via <a href=\"http://www.youtube.com/\" target=\"_blank\">www.youtube.com</a> or another third party service provider, as determined by OLX at its discretion, and embed the video into your ad on OLX.</p>\n</li>\n<li>\n<h3>FEATURED ADS</h3>\n<p>OLX offers a service known as \"Featured Ads\" where users may pay a \nnon-refundable fee to have their ads posted in selected locations on the\n Website, thus potentially increasing an ads' visibility. In order to \npurchase a Featured Ad, you may be required to transmit certain \ninformation through a third party service provider, Click &amp; Buy, a \nThird Party Website, which may be governed by its own terms of use and \nother policies. OLX makes no representation or guarantee as to the \nsafety or security of the information transmitted to any Third Party \nWebsite, and your linking to any Third Party Website is completely at \nyour own risk, and OLX disclaims all liability related thereto.</p>\n<p><b>Featured Ads are subject to the Terms listed herein, as well as additional terms of service, which can be viewed</b> <a href=\"http://www.olx.com/featured_listings.php\">here</a></p>\n</li>\n<li>\n<h3>CONDUCT</h3>\n<p>You agree not to post, email, or otherwise make available Content:</p>\n<ul>\n	<li>that violates any law;</li>\n	<li>that is copyrighted or patented, protected by trade secret or \ntrademark, or otherwise subject to third party proprietary rights, \nincluding privacy and publicity rights, unless you are the owner of such\n rights or have\npermission or a license from their rightful owner to post the material \nand to grant OLX all of the license rights granted herein;</li>\n	<li>that infringes any of the foregoing intellectual property rights of\n any party, or is Content that you do not have a right to make available\n under any law or under contractual or fiduciary relationships;</li>\n	<li>that violates the Fair Housing Act, as amended, including its \nimplementing regulations and any Presidential Executive Order related \nthereto, by stating, in any notice or advertisements for the sale or \nrental of any dwelling not excluded by such Act, a discriminatory \npreference based sex, familial status or handicap, race, color, national\n origin, religion, (or violates any applicable state or local law \nprohibiting discrimination on the basis of aforementioned \ncharacteristics or any other characteristics);</li>\n	<li>that is harmful, abusive, unlawful, threatening, harassing, \ndefamatory, pornographic, libelous, invasive of another's privacy or \nother rights, or harms or could harm minors in any way;</li>\n	<li>that harasses, degrades, intimidates or is hateful toward an \nindividual or group of individuals on the basis of religion, gender, \nsexual orientation, race, ethnicity, age, or disability;</li>\n	<li>that violates any federal, state, or local equal employment laws, \nincluding but not limited to those prohibiting the stating, in any \nadvertisement for employment, a preference or requirement based on race,\n color, religion, sex, national origin, age, or disability of the \napplicant.</li>\n	<li>that includes personal or identifying information about another person without that person's explicit consent;</li>\n	<li>that impersonates any person or entity, including, but not limited \nto, an OLX employee, or falsely states or otherwise misrepresents an \naffiliation with a person or entity;</li>\n	<li>with respect to employers that employ four or more employees, that \nviolates any applicable provision of the Immigration and Nationality \nAct, including without limitation requiring U.S. citizenship or lawful \npermanent residency (green card status) as a condition for employment, \nunless otherwise required in order to comply with law, regulation, \nexecutive order, or federal, state, or local government contract.</li>\n	<li>that is false, deceptive, misleading, deceitful, misinformative, or constitutes \"bait and switch\" offer;</li>\n	<li>that constitutes or contains \"pyramid schemes,\" \"affiliate \nmarketing,\" \"link referral code,\" \"junk mail,\" \"spam,\" \"chain letters,\" \nor unsolicited advertisements of a commercial nature;</li>\n	<li>that constitutes or contains any form of advertising or \nsolicitation if (1) posted in areas or categories of the Website which \nare not designated for such purposes; or (2) e-mailed to OLX users who \nhave requested not to be contacted about other services, products or \ncommercial interests;</li>\n	<li>that includes links to commercial services or Third Party Websites, except as specifically allowed by OLX;</li>\n	<li>that advertises any illegal services or the sale of any items the \nsale of which is prohibited or restricted by applicable law, including \nwithout limitation items the sale of which is prohibited or regulated by\n New York law;</li>\n	<li>that contains software viruses or any other computer code, files or\n programs designed to interrupt, destroy or limit the functionality of \nany computer software or hardware or telecommunications equipment;</li>\n	<li>that disrupts the normal flow of dialogue with an excessive number \nof messages (flooding attack) to the Service, or that otherwise \nnegatively affects other users' ability to use the Service; or</li>\n	<li>that employs misleading email addresses, or forged headers or \notherwise manipulated identifiers in order to disguise the origin of \nContent transmitted through the Service.</li>\n</ul>\n<p>Additionally, you agree not to:</p>\n<ul>\n	<li>contact anyone who has asked not to be contacted, or make \nunsolicited contact with anyone for any commercial purpose; or to \n\"stalk\" or otherwise harass anyone;</li>\n	<li>make any libelous or defamatory comments or postings to or against anyone;</li>\n	<li>collect personal data about other users or entities for commercial or unlawful purposes;</li>\n	<li>use automated means, including spiders, robots, crawlers, data \nmining tools, or the like to download or scrape data from the Service, \nexcept for internet search engines (e.g,. Google) and non-commercial \npublic archives (e.g. archive.org) that comply with our robots.txt file;</li>\n	<li>post Content that is outside the local area or not relevant to the \nlocal area, repeatedly post the same or similar Content, or otherwise \nimpose unreasonable or disproportionately large loads on our servers and\n other infrastructure;</li>\n	<li>post the same item or service in multiple classified categories or forums, or in multiple metropolitan areas;</li>\n	<li>attempt to gain unauthorized access to computer systems owned or \ncontrolled by OLX or engage in any activity that disrupts, diminishes \nthe quality of, interferes with the performance of, or impairs the \nfunctionality of, the Service or the Website.</li>\n	<li>use any form of automated device or computer program (sometimes \nreferred to as \"flagging tools\") that enables the use of OLX's \"flagging\n system\" or other community control systems without each flag being \nmanually entered by a human that initiates the flag (an \"automated \nflagging device\"), or use any such flagging tool to remove posts of \ncompetitors, other third parties or to remove posts without a reasonable\n good faith belief that the post being flagged violates these Terms or \nany applicable law or regulation.</li>\n	<li>use any automated device or software that enables the submission of\n automatic postings on OLX without human intervention or authorship (an \n\"automated posting device\"), including without limitation, the use of \nany such automated posting device in connection with bulk postings, or \nfor automatic submission of postings at certain times or intervals; or</li>\n</ul>\n</li>\n<li>\n<h3>PAID POSTINGS</h3>\n<p>OLX may charge a fee to post Content in some areas of the Service. \nThe fee permits certain Content to be posted in a designated area of the\n Website. Each party posting Content to the Service is responsible for \nsaid Content and compliance with the Terms. Any such fees paid hereunder\n are non-refundable in the event any Content is removed from the Service\n for violating these Terms</p>\n</li>\n<li>\n<h3>POSTING AGENTS</h3>\n<p>As used herein, the term \"Posting Agent\" refers to a third-party \nagent, service, or intermediary that offers to post Content to the \nService on behalf of others. OLX prohibits the use of Posting Agents, \ndirectly or indirectly, without the express written permission of OLX  \nIn addition, Posting Agents are not permitted to post Content on behalf \nof others, directly or indirectly, or otherwise access the Service to in\n order to post Content on behalf of others, except with express written \npermission or license from OLX.</p>\n</li>\n<li>\n<h3>ACCESS TO THE SERVICE</h3>\n<p>OLX grants you a limited, revocable, non-exclusive license to access \nand use the Service for personal use.  This license granted herein does \nnot include any of the following: (a) access to or use of the Service by\n Posting Agents; or (b) any collection, aggregation, copying, \nduplication, display or derivative use of the Service nor any use of \ndata mining, robots, spiders, or similar data gathering and extraction \ntools for any purpose unless expressly permitted by OLX or as otherwise \nset forth in these Terms. Notwithstanding the foregoing, general purpose\n internet search engines and non-commercial public archives that gather \ninformation for the sole purpose of displaying hyperlinks to the \nService, provided they each do so from a stable IP address or range of \nIP addresses using an easily identifiable agent and comply with our \nrobots.txt file, may engage in the activities set forth in (b). For \npurposes of this exception, a \"general purpose internet search engine\" \ndoes not include a website or search engine or other service that \nspecializes in classified listings including any subset of classifieds \nlistings such as housing, for sale, jobs, services, or personals, or \nwhich otherwise provides classified ad listing services. The license set\n forth in this Section permits you to display on your website, or create\n a hyperlink thereto, individual postings on the Service so long as such\n use is for noncommercial and/or news reporting purposes only (e.g., for\n use in personal blogs or other personal online media). If the total \nnumber of such postings displayed on or linked to your website exceeds \nninety nine (99) postings, your use will be considered to be in \nviolation of these Terms, unless OLX expressly grants you permission \notherwise. You are also permitted to create a hyperlink to the home page\n of the Website so long as the link does not portray OLX, its employees,\n affiliates or agents in a false, confusing, misleading, derogatory, or \notherwise offensive matter. OLX may offer parts of the Service in RSS \nformat for the purpose of embedding individual RSS feeds into a personal\n website or blog, or view postings through third party software news \naggregators. OLX permits you to display, excerpt from, and link to any \nsuch RSS feeds on your personal website or personal blow, provided that \n(a) your use of the RSS feed is for personal, non-commercial purposes \nonly, (b) each title within an RSS feed is correctly linked back to the \noriginal post on the Service and redirects the user to the post when the\n user clicks on it, (c) you provide, in a conspicuous manner, proper \nattribution to 'OLX' as the source of the RSS feed, (d) your use or \ndisplay of the RSS feed does not suggest that OLX promotes or endorses \nany third party causes, opinions, ideas, web sites, products or \nservices, (e) you do not redistribute the RSS feed, and (f) your use \ndoes not overburden or otherwise slow the performance of OLX's systems. \nOLX reserves all rights in and to the content of any RSS feeds provided \nthrough the Service and may terminate any RSS feed at any time without \nnotice. Use of the Service beyond the scope of authorized access as set \nforth in these Terms immediately terminates any permission or license \ngranted herein. In order to collect, aggregate, copy, duplicate, display\n or make derivative use of the Service or any Content made available via\n the Service for other purposes (including commercial\npurposes) not stated herein, you must first obtain a license from OLX.\n</p>\n</li>\n<li>\n<h3>NOTIFICATION OF CLAIMS OF INFRINGEMENTS</h3>\n<p>If you are a copyright owner or an agent thereof and believe that any\n user Content or other content infringes upon your copyrights, you may \nsubmit a notification pursuant to the Digital Millennium Copyright Act \n(\"DMCA\") by providing our Copyright Agent with the following information\n in writing (see 17 U.S.C 512(c)(3) for further detail):</p>\n<p>1.A physical or electronic signature of a person authorized to act on\n behalf of the owner of an exclusive right that is allegedly infringed;</p>\n<p>2.Identification of the copyrighted work claimed to have been \ninfringed, or, if multiple copyrighted works at a single online site are\n covered by a single notification, a representative list of such works \nat that site;</p>\n<p>3.Identification of the material that is claimed to be infringing or \nto be the subject of infringing activity and that is to be removed or \naccess to which is to be disabled and information reasonably sufficient \nto permit OLX to locate the material;</p>\n<p>4.Information reasonably sufficient to permit OLX to contact you, \nsuch as an address, telephone number, and, if available, an electronic \nmail address;</p>\n<p>5.A statement that you have a good faith belief that use of the \nmaterial in the manner complained of is not authorized by the copyright \nowner, its agent, or the law; and</p>\n<p>6.A statement that the information in the notification is accurate, \nand under penalty of perjury, that you are authorized to act on behalf \nof the owner of an exclusive right that is allegedly infringed.</p>\n<p>OLX's designated Copyright Agent to receive notifications of claimed infringement is: <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Legal Issues report form</a>\n or OLX, S.A., Uriarte 2489 - 3rd Floor, Buenos Aires, Argentina, \nAttention: DMCA Complaint . For clarity, only DMCA notices should go to \nthe Copyright Agent; any other feedback, comments, requests for \ntechnical support, and other communications should be directed to OLX's \ncustomer service by clicking on the Contact Us link on the OLX website. \nYou acknowledge that if you fail to comply with all of the requirements \nof this Section 8, your DMCA notice may not be valid.</p>\n</li>\n<li>\n<h3>INTELLECTUAL PROPERTY RIGHTS</h3>\n<p>You acknowledge and agree that the materials on the Website, other \nthan the user Content that you licensed under Section 2(C) of the Terms,\n including without limitation, the text, software, scripts, graphics, \nphotos, sounds, music, videos, interactive features and the like \n(\"Materials\") and the trademarks, service marks and logos contained \ntherein (\"Marks\"), are owned by or licensed to OLX, and are subject to \ncopyright and other intellectual property rights under United States and\n foreign laws and international conventions. Materials on the Website \nare provided to you AS IS for your information and personal use only and\n may not be used, copied, reproduced, distributed, transmitted, \nbroadcast, displayed, sold, licensed, or otherwise exploited for any \nother purposes whatsoever without the prior written consent of the \nrespective owners. OLX reserves all rights not expressly granted herein \nto the Website and the Materials. You agree to not engage in the use, \ncopying, or distribution of any of the Materials other than as expressly\n permitted herein, including any use, copying, or distribution of \nMaterials of third parties obtained through the Website for any \ncommercial purposes. If you download or print a copy of the Materials \nfor personal use, you must retain all copyright and other proprietary \nnotices contained therein. You agree not to circumvent, disable or \notherwise interfere with security related features of the Website or \nfeatures that prevent or restrict use or copying of any Materials or \nenforce limitations on use of the Website or the Materials therein. The \nService is protected to the maximum extent permitted by copyright laws, \nother laws, and international treaties. Content displayed on or through \nthe Service is protected by copyright as a collective work and/or \ncompilation,\npursuant to copyrights laws, other laws, and international conventions. \nAny reproduction, modification, creation of derivative works from or \nredistribution of the Website, the Materials, or the collective work or \ncompilation is expressly prohibited. Copying or reproducing the Website,\n the Materials, or any portion thereof to any other server or location \nfor further reproduction or redistribution is expressly prohibited. You \nfurther agree not to reproduce, duplicate or copy Content or Materials \nfrom the Service, and agree to abide by any and all copyright notices \nand other notices displayed on the Service. You may not decompile or \ndisassemble, reverse engineer or otherwise attempt to discover any \nsource code contained in the Service. Without limiting the foregoing, \nyou agree not to reproduce, duplicate, copy, sell, resell or exploit for\n any commercial purposes, any aspect of the Service. OLX is a service \nmark registered with the U.S. Patent and Trademark Office and in various\n other jurisdictions.</p>\n</li>\n<li>\n<h3>USER SUBMISSIONS</h3>\n<p>You understand that when using the Website, you will be exposed to \nContent from a variety of sources, and that OLX is not responsible for \nthe accuracy, usefulness, safety, or intellectual property rights of or \nrelating to such Content, and you agree and assume all liability for \nyour use. You further understand and acknowledge that you may be exposed\n to Content that is inaccurate, offensive, indecent, or objectionable, \ndefamatory or libelous and you agree to waive, and hereby do waive, any \nlegal or equitable rights or remedies you have or may have against OLX \nwith respect thereto.</p>\n</li>\n<li>\n<h3>INDEMNITY</h3>\n<p>You agree to defend, indemnify and hold harmless OLX, its officers, \nsubsidiaries, affiliates, successors, assigns, directors, officers, \nagents, service providers, suppliers and employees, from and against any\n and all claims, damages, obligations, losses, liabilities, costs or \ndebt, and expenses (including but not limited to attorneys' fees) \narising from: (i) your use of and access to the Website and/or the \nService; (ii) your violation of any term of these Terms; (iii) your \nviolation of any third party right, including without limitation any \ncopyright, trademark, trade secret or other property, or privacy right; \nor (iv) any claim that your Content caused damage to a third party. This\n defense and indemnification obligation will survive termination, \nmodification or expiration of these Terms and your use of the Service \nand the Website.</p>\n</li>\n<li>\n<h3>NO SPAM POLICY</h3>\n<p>You understand and agree that sending unsolicited email \nadvertisements or other unsolicited communications to OLX email \naddresses or through OLX computer systems are expressly prohibited by \nthese Terms. You acknowledge and agree that from time to time OLX may \nmonitor email usage using human monitors or automated software to flag \ncertain words associated with spam or scams in emails that are sent \nbetween one user to another in the OLX e mail system. Any communication \nbetween yourself and any other user utilizing the communication features\n available on the Service and the Website may be used only in accordance\n with the Terms. Any unauthorized use of OLX computer systems is a \nviolation of these Terms and certain federal and state laws. Such \nviolations may subject the sender and his or her agents to civil and \ncriminal penalties.</p>\n</li>\n<li>\n<h3>DEALINGS WITH ORGANIZATIONS AND INDIVIDUALS</h3>\n<p>You acknowledge and agree that OLX shall not be liable for your \ninteractions with any organizations and/or individuals on the Website or\n through the Service. This includes, but is not limited to, payment and \ndelivery of goods and services, and any other terms, conditions, \nwarranties or representations associated with any interaction you may \nhave with other organizations and/or individuals. These dealings are \nsolely between you and such organizations and/or individuals. You agree \nand acknowledge that OLX shall not be responsible or liable for any loss\n or damage of any sort incurred as the result of any such dealings or \ninteractions. If there is a dispute between participants on the Website,\n or between users and any third party, you understand and agree that OLX\n is under no obligation to become involved in such dispute. In the event\n that you have a dispute with one or more other users, you hereby \nrelease OLX, its officers, employees, agents and successors from any and\n all claims, demands and damages (actual and consequential) of every \nkind or nature, known or unknown, suspected and unsuspected, disclosed \nand undisclosed, arising out of or in any way related to such disputes \nand/or our Service.</p>\n</li>\n<li>\n<h3>LIMITATION AND TERMINATION OF SERVICE</h3>\n<p>You acknowledge and agree that OLX may establish limits from time to \ntime concerning use of the Service, including among others, the maximum \nnumber of days that Content will be maintained or retained by the \nService, the maximum number and size of postings, e-mail messages, or \nother Content that may be transmitted or stored by the Service, and the \nfrequency with which you may access the Service or the Website. You \nacknowledge and agree that OLX has no responsibility or liability for \nthe deletion or failure to store any Content maintained or transmitted \nby the Website or the Service. You acknowledge and agree that OLX \nreserves the right at any time to modify or discontinue the Service (or \nany part thereof) with or without notice, and that OLX shall not be \nliable to you or to any third party for any such modification, \nsuspension or discontinuance of the Service. You acknowledge and agree \nthat OLX, in its sole and absolute discretion, has the right (but not \nthe obligation) to delete or deactivate your account, block your e-mail \nor IP address, or otherwise terminate your access to or use of the \nService (or any part thereof), immediately and without notice, and \nremove and discard any Content within the Service, for any reason or no \nreason at all, including, without limitation, if OLX believes that you \nhave violated these Terms. Further, you agree that OLX shall not be \nliable to you or any third-party for any termination of your access to \nthe Website or the Service. Further, you agree not to attempt to use the\n Service after any such termination.</p>\n</li>\n<li>\n<h3>DISCLAIMER OF WARRANTIES</h3>\n<p>YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT USE OF THE WEBSITE AND THE \nSERVICE IS ENTIRELY AT YOUR OWN RISK AND THAT THE WEBSITE AND THE \nSERVICE ARE PROVIDED ON AN \"AS IS\" OR \"AS AVAILABLE\" BASIS, WITHOUT ANY \nWARRANTIES OF ANY KIND. ALL EXPRESS AND IMPLIED WARRANTIES, INCLUDING, \nWITHOUT LIMITATION, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE, AND NON-INFRINGEMENT OF PROPRIETARY RIGHTS ARE \nEXPRESSLY DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. TO THE \nFULLEST EXTENT PERMITTED BY LAW OLX, ITS OFFICERS, DIRECTORS, EMPLOYEES,\n AND AGENTS DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, IN CONNECTION \nWITH THE WEBSITE AND YOUR USE THEREOF. OLX MAKES NO WARRANTIES OR \nREPRESENTATIONS ABOUT THE ACCURACY OR COMPLETENESS OF THE WEBSITE'S \nCONTENT OR THE CONTENT OF ANY THIRD PARTY WEBSITES LINKED TO THE WEBSITE\n AND ASSUMES NO LIABILITY OR RESPONSIBILITY FOR ANY (I) ERRORS, \nMISTAKES, OR INACCURACIES OF CONTENT, (II) PERSONAL INJURY OR PROPERTY \nDAMAGE, OF ANY NATURE WHATSOEVER, RESULTING FROM YOUR ACCESS TO AND USE \nOF THE WEBSITE AND SERVICE, (III) ANY UNAUTHORIZED ACCESS TO OR USE OF \nOUR SERVERS AND/OR ANY AND ALL PERSONAL INFORMATION AND/OR FINANCIAL \nINFORMATION STORED THEREIN, (IV) ANY INTERRUPTION OR CESSATION OF \nTRANSMISSION TO OR FROM THE WEBSITE, (IV) ANY BUGS, VIRUSES, TROJAN \nHORSES, OR THE LIKE WHICH MAY BE TRANSMITTED TO OR THROUGH THE WEBSITE \nBY ANY THIRD PARTY, AND/OR (V) ANY ERRORS OR OMISSIONS IN ANY CONTENT OR\n FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF \nANY CONTENT POSTED, EMAILED, COMMUNICATED, TRANSMITTED, OR OTHERWISE \nMADE AVAILABLE VIA THE WEBSITE OR THE SERVICE. OLX DOES NOT WARRANT, \nENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY FOR ANY PRODUCT OR SERVICE \nADVERTISED OR OFFERED BY A THIRD PARTY THROUGH THE WEBSITE OR ANY \nHYPERLINKED WEBSITE OR FEATURED IN ANY BANNER OR OTHER ADVERTISING, AND \nOLX WILL NOT BE A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING \nANY TRANSACTION BETWEEN YOU AND/OR OTHER USERS AND/OR THIRD-PARTY \nPROVIDERS OF PRODUCTS OR SERVICES. AS WITH THE PURCHASE OF A PRODUCT OR \nSERVICE THROUGH ANY MEDIUM OR IN ANY ENVIRONMENT, YOU SHOULD USE YOUR \nBEST JUDGMENT AND EXERCISE CAUTION WHERE APPROPRIATE.\n</p>\n</li>\n<li>\n<h3>LIMITATIONS OF LIABILITY</h3>\n<p>IN NO EVENT SHALL OLX, ITS OFFICERS, DIRECTORS, EMPLOYEES, OR AGENTS,\n BE LIABLE FOR DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR \nEXEMPLARY DAMAGES (EVEN IF OLX HAS BEEN ADVISED OF THE POSSIBILITY OF \nSUCH DAMAGES), RESULTING FROM ANY ASPECT OF YOUR USE OF THE WEBSITE OR \nTHE SERVICE, INCLUDING WITHOUT LIMITATION WHETHER THE DAMAGES ARISE FROM\n USE OR MISUSE OF THE WEBSITE OR THE SERVICE, FROM INABILITY TO USE THE \nWEBSITE OR THE SERVICE, OR THE INTERRUPTION, SUSPENSION, MODIFICATION, \nALTERATION, OR TERMINATION OF THE WEBSITE OR THE SERVICE. SUCH \nLIMITATION OF LIABILITY SHALL ALSO APPLY WITH RESPECT TO DAMAGES \nINCURRED BY REASON OF OTHER SERVICES OR PRODUCTS RECEIVED THROUGH OR \nADVERTISED IN CONNECTION WITH THE WEBSITE OR THE SERVICE OR ANY LINKS ON\n THE WEBSITE, AS WELL AS BY REASON OF ANY INFORMATION, OPINIONS OR \nADVICE RECEIVED THROUGH OR ADVERTISED IN CONNECTION WITH THE WEBSITE OR \nTHE SERVICE OR ANY LINKS ON THE OLX SITE. THESE LIMITATIONS SHALL APPLY \nTO THE FULLEST EXTENT PERMITTED BY LAW. YOU SPECIFICALLY ACKNOWLEDGE AND\n AGREE THAT OLX SHALL NOT BE LIABLE FOR USER SUBMISSIONS OR THE \nDEFAMATORY, OFFENSIVE, OR ILLEGAL CONDUCT OF ANY USER OR THIRD PARTY AND\n THAT THE RISK OF HARM OR DAMAGE FROM THE FOREGOING RESTS ENTIRELY WITH \nYOU. The Website is controlled and offered by OLX from its facilities in\n the United States of America. OLX makes no representations or \nwarranties that the Website is appropriate for use in other locations. \nThose who access or use the Website from other jurisdictions do so at \ntheir own volition and risk and are responsible for compliance with \nlocal law.\n</p>\n</li>\n<li>\n<h3>ASSIGNMENT</h3>\n<p>These Terms, and any rights and licenses granted hereunder, may not \nbe transferred or assigned by you, but may be assigned by OLX without \nrestriction. Any assignment or transfer by you shall be null and void.</p>\n</li>\n<li>\n<h3>ABILITY TO ACCEPT TERMS OF SERVICE</h3>\n<p>This Website is intended only for adults. You affirm that you are \neither more than 18 years of age, or an emancipated minor, or possess \nlegal parental or guardian consent, and are fully able and competent to \nenter into the terms, conditions, obligations, affirmations, \nrepresentations, and warranties set forth in these Terms, and to abide \nby and comply with these Terms. In any case, you affirm that you are \nover the age of 13, as the Website is not intended for children under \n13.</p>\n<p><u><b>NOTICE TO CHILDREN UNDER THE AGE OF 13 AND THEIR PARENTS OR GUARDIANS</b></u></p>\n<p><b>If you are under the age of 13, YOU MUST NOT USE THIS WEBSITE. \nPlease do not send us your personal information, including your email \naddresses, name, and/or contact information. If you want to contact us, \nyou may only do so through your parent or legal guardian.</b></p>\n</li>\n<li>\n<h3>GENERAL INFORMATION</h3>\n<p>These Terms and the other policies posted on the Website constitute \nthe complete and exclusive understanding and agreement between you and \nOLX and govern your use of the Service and the Website superseding all \nprior understandings, proposals, agreements, negotiations, and \ndiscussions between the parties, whether written or oral. The Terms and \nthe relationship between you and OLX shall be governed by the laws of \nthe State of New York without regard to its conflict of law principles. \nYou and OLX agree to submit to the personal and exclusive jurisdiction \nof the courts located within the State of New York. The failure of OLX \nto exercise or enforce any right or provision of the Terms shall not \nconstitute a waiver of such right or provision. If any provision of the \nTerms is found by a court of competent jurisdiction to be invalid \n(including, without limitation, because such provision is inconsistent \nwith the laws of another jurisdiction) or inapplicable, the parties \nnevertheless agree that the court should endeavor to give effect to the \nparties' intentions as reflected in the provision. If any provision or \nprovisions of these Terms is held to be invalid, illegal or \nunenforceable, the validity, legality and enforceability of the \nremaining provisions of the Terms shall not in any way be affected or be\n impaired. YOU AGREE THAT ANY CAUSE OF ACTION BROUGHT BY YOU AND ARISING\n OUT OF OR RELATED TO YOUR USE OF THE SERVICE AND/OR THE WEBSITE MUST \nCOMMENCE WITHIN ONE (1) YEAR AFTER THE CAUSE OF ACTION ACCRUES, EXCEPT \nTHAT OLX MAY COMMENCE ANY SUCH CAUSE OF ACTION IN ACCORDANCE WITH THE \nAPPLICABLE STATUTE OF LIMITATIONS UNDER NEW YORK LAW. OTHERWISE, SUCH \nCAUSE OF ACTION IS PERMANENTLY BARRED. These Terms shall inure to the \nbenefit of and be binding upon each party's successors and assigns.</p>\n</li>\n<li>\n<h3>VIOLATION OF TERMS AND LIQUIDATED DAMAGES</h3>\n<p>Please report any violations of the Terms that you become aware of by\n contacting us using the link at the bottom of the OLX homepage at <a target=\"_blank\" href=\"http://www.olx.com/\">www.olx.com</a>.\n Any failure to act by OLX with respect to a breach by you or others \ndoes not waive our right to act with respect to subsequent or similar \nbreaches by you or others. You understand and agree that, because \ndamages are often difficult or impossible to quantify, if actual damages\n cannot be reasonably calculated then you will be liable to pay OLX the \nfollowing as liquidated damages (and not a penalty):</p>\n<p>a. If OLX establishes any limits on the frequency with which you may \naccess the Service, or terminates your access to or use of the Service, \nyou agree to pay OLX ninety nine dollars ($99) for (i) each message \nposted in excess of such limits or (ii) for each day on which you access\n OLX in excess of such limits, whichever is higher.</p>\n<p>b. If you post a message that (1) impersonates any person or entity; \n(2) falsely states or otherwise misrepresents your affiliation with a \nperson or entity; or (3) that includes personal or identifying \ninformation about another person without that person's explicit consent,\n you agree that OLX in its sole discretion may disclose identifying \ninformation about you to the victim, and that should OLX bring a claim \nagainst you in court, that you will pay OLX one thousand one hundred \ndollars ($1,100) for each such message.</p>\n<p>c. If you are a Posting Agent that uses the Service in violation of \nthese Terms, in addition to any liquidated damages under Section 20(e) \nbelow you agree to pay OLX ninety nine dollars ($99) for each and every \nitem you post in violation of these Terms. A Posting Agent will also be \ndeemed an agent of the party engaging the Posting Agent to access the \nService, and such party (by engaging the Posting Agent in violation of \nthese Terms) agrees to pay OLX an additional ninety nine dollars ($99) \nfor each item posted by the Posting Agent on behalf of such party in \nviolation of these Terms.</p>\n<p>d. If you use OLX e-mail addresses or computer systems to send \nunsolicited e-mail advertisements to OLX e-mail addresses or any other \nparty, you agree to pay OLX thirty dollars ($30) for each such e-mail.</p>\n<p>e. If you post messages in violation of these Terms, other than as \ndescribed above, you agree to pay OLX ninety nine dollars ($99) for each\n such message. Notwithstanding the foregoing, OLX may, in its sole and \nabsolute discretion, issue a warning before assessing damages pursuant \nto this Section 20(e).</p>\n<p>f. If you aggregate, copy, display, mirror, reproduce, or otherwise \nexploit for any purpose any Content (except for your own Content) in \nviolation of these Terms without OLX's express written permission, you \nagree to pay OLX ten thousand dollars ($10,000) for each day on which \nyou engage in such conduct.</p>\n<p>If none of the foregoing clauses (a) – (f) are applicable, you agree \nto pay OLX’s actual damages, to the extent such actual damages can be \nreasonably calculated. Notwithstanding any other provision of these \nTerms, OLX retains the right to seek equitable remedies, including \nwithout limitation, specific performance of any term contained in these \nTerms, or a preliminary or permanent injunction against the breach or \nthreatened breach of any such term or in aid of the exercise of any \npower granted in these Terms, or any combination thereof, without the \nnecessity of posting a bond.</p>\n</li>\n<li>\n<h3>PRIVACY POLICY</h3>\n<p><u>A. Safe Harbor Certification</u></p>\n<p>OLX complies with the U.S.-EU Safe Harbor Framework and the \nU.S.-Swiss Safe Harbor Framework as set forth by the U.S. Department of \nCommerce regarding the collection, use, and retention of personal \ninformation from European Union member countries and Switzerland.  OLX \nhas certified that it adheres to the Safe Harbor Privacy Principles of \nnotice, choice, onward transfer, security, data integrity, access, and \nenforcement.  To learn more about the Safe Harbor program, and to view \nOLX’s certification, please visit http://www.export.gov/safeharbor/</p>\n<p><u>B. Type of Information Collected:</u></p>\n<p>When you visit the Website, we may collect certain non-personal \ninformation such as your Internet Protocol (“IP”) address, operating \nsystem, browser type, and Internet service provider. This type of \ninformation does not identify you personally. When you register with the\n Website, we may also collect personal information that you provide such\n as your name, mailing address, email address, home country, and zip \ncode (“Registration Information”). You have the option of also providing\n to us your phone and fax numbers, gender, age, and/or company name if \nyou choose to register with OLX. If you provide your phone number, it \nwill be displayed in your posting. We may also collect additional \ninformation that our users provide, such as new or deleted postings, new\n or deleted comments, keyword searches, scam reports and new contact \nsellers. We use a third-party credit card processing company for \npurchases, and other third party companies to monitor site traffic, \nwhich may, in some instances, store your information (see Section 21(D) \nbelow). When you visit the Website and/or use the OLX mobile \napplication, OLX may use GPS technology (or other similar technology) to\n determine your current location in order to determine the city you are \nlocated within and display a location map with relevant advertisements. \nOLX will not share your current location with other OLX users or \npartners. If you do not want OLX to use your location for the purposes \nset forth above, you should turn off the location services for the OLX \napplication located in your OLX account settings or in your mobile phone\n settings. <b>By using this Website or the Service, you consent to \ncollection, storage, and use of the personal information you provide for\n any of the Services that we offer, and you consent to our collection of\n any changes or updates that you may provide to any information you \nprovide that is collected by OLX.</b>\n</p>\n<p><u>C. Cookies</u></p>\n<p>We may use cookies to manage our users’ sessions and to store \npreferences, tracking information, and language selection. Cookies may \nbe used whether you register with us or not. “Cookies” are small text \nfiles transferred by a web server to your hard drive and thereafter \nstored on your computer. The types of information a cookie collects \ninclude the date and time you visited, your browsing history, your \npreferences, and your username. In some instances, our third-party \nservice providers may use cookies on the Website. We cannot control or \naccess cookies used by third- party service providers. This Privacy \nPolicy covers only Cookies used by us, and not any cookies used by third\n parties. You have the ability to either accept or decline the use of \ncookies on your computer, whether you are registered with us or not. \nTypically, you can configure your browser to not accept cookies. \nHowever, declining the use of cookies may limit your access to certain \nfeatures of the Website. For example, you may have difficulty logging in\n or using certain interactive features of the Website, such as the OLX \nForum or Comments feature.</p>\n<p><u>D. Third Parties</u></p>\n<p>We use third-party service providers to process purchases you make \nand to monitor our users’ interests. In addition, the Website may \noccasionally contain links to Third-Party Sites. If you click on the \nlinks to Third-Party Websites, you leave the Website. We are not \nresponsible for the content of these Third-Party Websites or for the \nsecurity of your personal information when you use the Third Party \nWebsites. These third-party service providers and Third-Party Sites may \nhave their own privacy policies governing the storage and retention of \nyour personal information that you may be subject to. They may collect \ninformation such as your IP address, browser specification, or operating\n system. This Privacy Policy does not govern personal information \nprovided to, stored on, or used by these third-party providers and \nThird-Party Sites. We recommend that when you enter a Third-Party Site, \nyou review the Third Party Site’s privacy policy as it relates to \nsafeguarding your personal information. We use third-party advertising \ncompanies to serve ads when you visit the Website. These companies may \nuse information (not including your name, address, email address, or \ntelephone number) about your visits to the Website and Third-Party \nWebsites in order to provide advertisements about goods and services of \ninterest to you. On the Website, Google, as a third-party vendor, uses \nCookies to serve ads. Google’s use of the DoubleClick DART Cookie \nenables it to serve ads to the Website’s users based on their visit to \nthe Websites and Third-Party Websites. For more information on the DART \nCookie see: <a target=\"_blank\" href=\"http://www.doubleclick.com/privacy/faq.aspx\">http://www.doubleclick.com/privacy/faq.aspx</a>. You may opt out of the use of the DART Cookie by Google by visiting the Google Ad and Content Network Privacy Policy at: <a target=\"_blank\" href=\"http://www.google.com/privacy_ads.html\">http://www.google.com/privacy_ads.html</a>. You may opt out of targeting advertising for all NAI member ad networks by visiting: <a target=\"_blank\" href=\"http://www.networkadvertising.org/\">http://www.networkadvertising.org/</a>.\n By publishing an ad on the Website, you acknowledge and agree that the \nContent is public and accessible by any third party and that they may \nappear in search engine results (such as Yahoo!, MSN, Google, Altavista,\n and other search engines) and in the cache of those search engines, in \nfeeds and Third-Party Websites pursuant to cobranding agreements, and \nthat it is the sole responsibility of each of those search engines, \nThird-Party Websites or RSS web feed resources to update and/or to \nremove Content from their indexes and their cache. You agree and \nacknowledge that OLX is not be liable for the information published in \nsearch results or by any Third-Party Website that carries OLX postings.\n</p>\n<p><u>E. How Your Information is Used</u></p>\n<p>We may use information provided by you to: (i) enforce our Terms of \nUse, monitor user activity, such as keyword searches or new postings, \nand more effectively manage traffic on the Website; (ii) provide \ncustomer services, create and manage user accounts; and (iii) assist you\n with technical difficulties.  Also, we may share with third-party \nservice providers certain information, such as your browser capabilities\n or operating system, that we have collected in order to better \nunderstand which advertisements and services may interest you. We may \nblock users located in certain countries from using the Website. We may \nretain such information for as long as is required to fulfill our \nbusiness objective, even after your account is terminated.</p>\n<p><u>F. Protecting Your Personal Information</u></p>\n<p>You are a valued customer, and we recognize that protecting your \nprivacy is important to you. For this reason, we are committed to \nprotecting the personal information you provide in a variety of ways. We\n do not directly process any payments and do not store your credit card \ninformation. Secured socket layer (“SSL”) technology is used for \nprocessing payment transactions with third- party service provider \npartners, such as Click &amp; Buy, PayPal, and DineroMail. Your \nRegistration Information may be protected by a unique customer password \nand user ID. You should not disclose your password information to anyone\n and you should always remember to log off if using a shared computer. \nLastly, you may utilize the Website as an anonymous user by not \nregistering.  We have taken certain security protections in safeguarding\n your personal information. However, as with most electronic \ntransactions, no method is 100% safe. While we strive to use a \ncommercially acceptable means to protect the personal information you \nprovide, we cannot guarantee its security. Therefore, you acknowledge \nand agree that we assume no liability regarding the theft, loss, \nalteration or misuse of personal or other information or Content, \nincluding, without limitation, such information that has been provided \nto third parties or other users, or with regards to the failure of a \nthird party to abide by the agreement between us and such third party. \nYou may participate in our Forum or utilize our Comments feature. For \npostings to the Forum, your username will be posted. For postings using \nthe Comments feature, your name and email will only be posted if you \nprovide it in the comment. We strongly discourage posting any \ninformation on these features or in any Content posted by you that you \ndo not want others to see. You agree that you are responsible for \nmaintaining the confidentiality of your username and password, and all \nuses of your account, whether or not you have authorized such use.\n</p>\n<p><u>G. Accessing and Modifying Personal Information and Communication Preferences</u></p>\n<p>You may access, remove, review, and/or make changes to personal information that you have provided to us <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Contact Support form</a>.\n You need not register in order to post or respond to advertisements on \nthe Website. If you register, we may send you certain notifications, \nadvertisements, promotions, and specials. We may also send you any \nlegally required notifications and certain notifications, including but \nnot limited to, service related notices or notices regarding a change to\n any of our policies. For example, we may send you a notice regarding \nserver problems or scheduled maintenance to the Website. In order to \nopt-out of receiving these notices, you may need to deactivate your \naccount. You can opt out of certain e-mail communications from us, \nincluding our newsletters, advice on buying and selling on the Website, \nnotifications that a user has commented on your posting, and \nnotifications that you can refresh your posting. We will not change your\n preferences without your consent.  You cannot opt out of receiving \ntransactional communications from OLX related to your account.</p>\n<p><u>H. Disclosures</u></p>\n<p>On rare occasions, we may be required to disclose your personal \ninformation due to legal or regulatory requirements. In such instances, \nwe reserve the right to disclose your personal information as required \nin order to comply with our legal obligations, including but not limited\n to complying with court orders, warrants, subpoenas, service of process\n requirements, or discovery requests. We may also disclose information \nabout our users to law enforcement officers or others, in the good faith\n belief that such disclosure is reasonably necessary to enforce these \nTerms and/or Privacy Policy; respond to claims that any Content violates\n the rights of third-parties; or protect the rights, property, or \npersonal safety of OLX, our users or the general public.  If \nsubstantially all of our assets are sold or merged into another company,\n we will notify you of the transaction. The acquiring company shall be \ngiven access to your personal information without your consent. If we \nsell only a part of our business, the acquiring entity shall have access\n to your personal information without your consent and we may send you a\n notice regarding this sale.</p>\n<p><u>I. Notification of Changes</u></p>\n<p>We reserve the right to change these Terms from time to time, and at \nour sole discretion. We may send you a notice regarding material changes\n to these Terms, including the Privacy Policy or the Website. You should\n make note of the “last updated date” at the beginning of the Terms. \nWith this information, you should be able to identify if the Terms have \nbeen updated recently.</p>\n<p><u>J. Disputes</u></p>\n<p>Any disputes regarding your privacy are subject to the Terms, \nincluding but not limited to any provisions related to indemnification, \nlimitations on damages, and choice of law.</p>\n<p><u>K. Important Notices to Non-U.S. Residents</u></p>\n<p>OLX abides by the Safe Harbor principles set forth by the U.S. \nDepartment of Commerce regarding the collection, use, and retention of \napplicable data from the European Union.  However, it is important to \nnote that the Website and its servers are operated in the United States.\n  If you are located outside of the United States, please be aware that \nany personal information you provide to us will be transferred to the \nUnited States.  By using the Website and by providing us personal \ninformation when using our services, you consent to this transfer and \nour use of the information and data provided by you in accordance with \nthis Privacy Policy.</p>\n<p>In order to comply with the Safe Harbor framework, OLX commits to the\n resolution of complaints about your privacy and our collection or use \nof your personal information.  We have also committed to resolve any \ncomplaints by European Union citizens relating to this Privacy Policy, \nwhich cannot be resolved directly with our company, through the Council \nof Better Business Bureaus, Inc.’s Safe Harbor Privacy Dispute \nResolution Procedures.</p>\n<p>If you have any questions regarding this Privacy Policy, please \ncontact us as described in the “How to Contact Us” section. We will \ninvestigate your question, respond to your inquiry, and attempt to \nresolve any concerns regarding your privacy question. If you do not \nreceive acknowledgement of your complaint or if your complaint is not \nsatisfactorily addressed by OLX, you should then contact the Council of \nBetter Business Bureaus, Inc. as set forth below.</p>\n<p>In compliance with the US-EU Safe Harbor Principles, OLX commits to \nresolve complaints about your privacy and our collection or use of your \npersonal information. European Union citizens with inquiries or \ncomplaints regarding this privacy policy should first contact OLX as \ndescribed in the “How to Contact Us” section.</p>\n<p>OLX has further committed to refer unresolved privacy complaints \nunder the US-EU Safe Harbor Principles to an independent dispute \nresolution mechanism, the BBB EU SAFE HARBOR, operated by the Council of\n Better Business Bureaus. If you do not receive timely acknowledgment of\n your complaint, or if your complaint is not satisfactorily addressed by\n OLX, please visit the BBB EU SAFE HARBOR web site at \nwww.bbb.org/us/safe-harbor-complaints for more information and to file a\n complaint.</p>\n\n<p><u>L.How to Contact Us</u></p>\n<p>If you have questions about this Privacy Policy, please contact OLX <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Legal Issues report form</a> with “Privacy Policy” in the subject line.</p>\n</li><p></p>\n    </div>\n</section>";
  });

templates["enhanced_br/partials/head"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<title>OLX Mobile</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n<link href=\"/css/html5/styles.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\" />\n";
  });

templates["enhanced_br/partials/header"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<header>\n    <a href=\"#\" class=\"navLeft\">\n        <span></span>\n        <span></span>\n        <span></span>\n    </a>\n    <a href=\"/\"><div class=\"olxLogo\"></div></a>\n    <h1></h1>\n    <div class=\"search\"></div>\n</header>";
  });

templates["enhanced_br/partials/languages"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n	";
  stack1 = (helper = helpers.ifC || (depth0 && depth0.ifC),options={hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data},helper ? helper.call(depth0, (depth0 && depth0.id), "===", (depth1 && depth1.selectedLanguage), options) : helperMissing.call(depth0, "ifC", (depth0 && depth0.id), "===", (depth1 && depth1.selectedLanguage), options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		<li><strong>";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</strong></li>\n	";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n		<li><a href=\"?language=";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a></li>\n	";
  return buffer;
  }

  buffer += "<ul>\n";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.languages)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>";
  return buffer;
  });

templates["enhanced_br/partials/layout"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";


  buffer += "<!doctype html>\n<html>\n	<head>\n	    ";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "enhanced/partials/head", options) : helperMissing.call(depth0, "partial", "enhanced/partials/head", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</head>\n	<body>\n		\n		";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "enhanced/partials/header", options) : helperMissing.call(depth0, "partial", "enhanced/partials/header", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		<article>\n	  		"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "left-panel/index", options) : helperMissing.call(depth0, "view", "left-panel/index", options)))
    + "\n			<div id=\"content\">\n				"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "footer/index", options) : helperMissing.call(depth0, "view", "footer/index", options)))
    + "\n				";
  if (helper = helpers.body) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.body); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n			</div>\n		</article>\n\n		<script src=\"/js/mergedAssets.js\"></script>\n		<script>\n			(function() {\n				var App = window.App = new (require('app/app'))("
    + escapeExpression((helper = helpers.json || (depth0 && depth0.json),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.appData), options) : helperMissing.call(depth0, "json", (depth0 && depth0.appData), options)))
    + ");\n				App.bootstrapData("
    + escapeExpression((helper = helpers.json || (depth0 && depth0.json),options={hash:{},data:data},helper ? helper.call(depth0, (depth0 && depth0.bootstrappedData), options) : helperMissing.call(depth0, "json", (depth0 && depth0.bootstrappedData), options)))
    + ");\n				App.start();\n			})();\n		</script>\n	</body>\n</html>\n";
  return buffer;
  });

templates["enhanced_br/user/login"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</small>\n                ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    <small style=\"display: block; color: blue;\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailMsg)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</small>\n                ";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailErr)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</small>\n                ";
  return buffer;
  }

  buffer += "<h1>Login</h1>\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n            <form action=\"/login\" method=\"POST\">\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.err), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            	<span style=\"display: block;\">Username or Email</span>\n                <input type=\"text\" name=\"usernameOrEmail\">\n            	<span style=\"display: block;\">Password</span>\n                <input type=\"password\" name=\"password\">\n            	<span style=\"display: block;\"><input type=\"submit\" value=\"Login\"></span>\n            </form>\n		</section>\n	</div>\n</div>\n<h1>Already posted an ad</h1>\n<div class=\"row-fluid font-format\">\n    <div class=\"span6 celd-format\" >\n        <section style=\"padding-bottom:0px;\">\n            <form action=\"/loginAnon\" method=\"POST\">\n                ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailMsg), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.emailErr), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                <span style=\"display: block;\">\n                    Enter the email that you used to post your ad and receive the link to My OLX by email.\n                </span>\n                <input type=\"text\" name=\"email\">\n                <span style=\"display: block;\"><input type=\"submit\" value=\"Send\"></span>\n            </form>\n        </section>\n    </div>\n</div>";
  return buffer;
  });

templates["enhanced_br/user/registration"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n                    <small style=\"display: block; color: red;\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</small>\n                ";
  return buffer;
  }

  buffer += "<h1>Register</h1>\n<div class=\"row-fluid font-format\">\n	<div class=\"span6 celd-format\" >\n		<section style=\"padding-bottom:0px;\">\n            <form action=\"/registration\" method=\"POST\">\n                ";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.params)),stack1 == null || stack1 === false ? stack1 : stack1.err), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            	<span style=\"display: block;\">Username</span>\n                <input type=\"text\" name=\"username\">\n            	<span style=\"display: block;\">Email</span>\n                <input type=\"text\" name=\"email\">\n            	<span style=\"display: block;\">Password</span>\n                <input type=\"password\" name=\"password\">\n                <span style=\"display: block;\">\n                    <input type=\"checkbox\" name=\"agreeTerms\">\n                    I agree to the <a href=\"/terms\">Terms and Conditions</a> of OLX \n                </span>\n            	<span style=\"display: block;\"><input type=\"submit\" value=\"Register\"></span>\n            </form>\n		</section>\n	</div>\n</div>";
  return buffer;
  });

templates["standard/footer/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n	<div class=\"two\" id=\"footer\">\n		<a href=\""
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.marketing)),stack1 == null || stack1 === false ? stack1 : stack1.link)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.marketing)),stack1 == null || stack1 === false ? stack1 : stack1.promo)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</a>\n	</div>\n";
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.marketing)),stack1 == null || stack1 === false ? stack1 : stack1.link), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n<div class=\"two\" id=\"footer\">\n	<div class=\"language\">    \n	    <ul>\n	        <li class=\"f\">Espa&ntilde;</li>\n	        <li><a href=\"?language=1\" rel=\"nofollow\">English</a></li>\n	    </ul>\n	</div>\n    <ul id=\"redirect\">\n    	<li class=\"first\"><a target=\"_blank\" href=\"/terms\"> Condiciones de Uso</a></li>			\n		<li><a href=\"/redirectmainsite\" rel=\"external\">Ver sitio completo</a></li>\n	</ul>\n    <p class=\"copyright\">Copyright &copy; 2006-2014 OLX Inc.</p>\n</div>";
  return buffer;
  });

templates["standard/home/index"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, self=this, helperMissing=helpers.helperMissing, functionType="function", escapeExpression=this.escapeExpression;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n			<li";
  stack1 = (helper = helpers.eq || (depth0 && depth0.eq),options={hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data},helper ? helper.call(depth0, (data == null || data === false ? data : data.index), 0, options) : helperMissing.call(depth0, "eq", (data == null || data === false ? data : data.index), 0, options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n				<a href=\"categories/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "?location="
    + escapeExpression(((stack1 = (depth1 && depth1.siteLocation)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n					<img src=\"/images/icons/html4/";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ".png\">\n					<span>";
  if (helper = helpers.trName) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.trName); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span> \n				</a>\n			</li>\n		";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return " class=\"border-none\"";
  }

  buffer += "<div class=\"home\" id=\"content\">\n    <ul class=\"categories parent-cat\">\n    	";
  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 && depth0.categories)),stack1 == null || stack1 === false ? stack1 : stack1.models), {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</ul>\n</div>\n";
  return buffer;
  });

templates["standard/pages/terms"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<section>\n  	    	<div class=\"breadcrumbs\">\n    <p style=\"border:none;\" class=\"searchResultsTerm\">Terms Of Use</p>\n	</div>\n<div class=\"disclamer\">   \n    <p><br>PLEASE CAREFULLY READ THESE TERMS OF USE. BY USING THIS \nWEBSITE YOU INDICATE YOUR UNDERSTANDING AND ACCEPTANCE OF THESE TERMS. \nIF YOU DO NOT AGREE TO THESE TERMS YOU MAY NOT USE THIS WEBSITE.</p>\n    <p>\n</p><li>\n<h3>ACCEPTANCE</h3>\n<p>OLX, Inc. and its affiliates (OLX) provide a collection of online \nresources which include classified advertisements, forums, and certain \ne-mail services (collectively, the \"Service\") on the website <a target=\"_blank\" href=\"http://www.olx.com/\">www.olx.com</a> and its affiliated sites (including without limitation <a target=\"_blank\" href=\"http://www.mundoanuncio.com/\">www.mundoanuncio.com</a> and <a target=\"_blank\" href=\"http://www.edeng.cn/\">www.edeng.cn</a>)\n (collectively, the \"Website\") subject to these Terms of Use (these \n\"Terms\").  By using the Service, you agree to comply with these Terms.  \nAdditionally, when using a portion of the Service, you agree to conform \nto any applicable posted guidelines for such Service, which may change \nfrom time to time. You understand and agree that you are solely \nresponsible for reviewing these Terms from time to time. Should you \nobject to any term or condition of these Terms, any guideline, or any \nsubsequent changes thereto or become unhappy with OLX in any way, your \nonly choice is to immediately discontinue use of OLX. These Terms may be\n updated by OLX at any time at its sole discretion. OLX may send you \nnotices of changes to the Website or the Terms pursuant to Section 21(I)\n herein. OLX may provide a translation of the English version of the \nTerms into other languages. You understand and agree that any \ntranslation of the Terms into other languages is for your convenience \nonly and that the English version governs the terms of your relationship\n with OLX. Furthermore, if there are any inconsistencies between the \nEnglish version of the Terms and any translation, the English version of\n the Terms shall govern. You understand and agree that to the extent you\n are located in the United States, you will utilize the Service in \ncompliance with any laws, regulations, and guidelines that may be under \nthe jurisdiction of the Office of Foreign Asset Control, U.S. Department\n of Treasury.</p>\n</li>\n<li>\n<h3>DESCRIPTION OF SERVICE AND CONTENT POLICY</h3>\n<p>A.  OLX is the next generation of free online classifieds.  We act as\n a venue to allow our users who comply with these Terms to offer, sell, \nand buy products and services listed on the Website.  Although you may \nbe able to conduct payment and other transactions through the Website, \nusing third-party vendors such as PayPal, OLX is not in any way in \ninvolved in such transactions.  As a result, and as discussed in more \ndetail in these Terms, you hereby acknowledge and agree that OLX is not a\n party to such transactions, has no control over any element of such \ntransactions, and shall have no liability to any party in connection \nwith such transactions. You use the Service and the Website at your own \nrisk.</p>\n<p>B.  You understand that OLX does not control, and is not responsible \nfor ads, directory information, business listings/information, messages \nbetween users, including without limitation e-mails outside OLX’s e-mail\n system or other means of electronic communication, whether through the \nWebsite or another Third Party Website (defined below) or offerings, \ncomments, user postings, files, images, photos, video, sounds, business \nlistings/information and directory information or any other material \nmade available through the Website and the Service (\"Content\"), and that\n by using the Website and the Service, you may be exposed to Content \nthat is offensive, indecent, inaccurate, misleading, or otherwise \nobjectionable.  You acknowledge and agree that you are responsible for \nand must evaluate, and bear all risks associated with, the use of any \nContent, that you may not rely on said Content, and that under no \ncircumstances will OLX be liable in any way for the Content or for any \nloss or damage of any kind incurred as a result of the use of any \nContent listed, e-mailed or otherwise made available via the Service.  \nYou acknowledge and agree that OLX does not pre-screen or approve any \nContent, but that OLX has the right, in its sole and absolute \ndiscretion, to refuse, delete or move any Content that is or may be \navailable through the Service, for violating these Terms or for any \nother reason or no reason at all.  Furthermore, the Website and Content \navailable through the Website may contain links to other third party \nwebsites (“Third Party Websites”), which are completely unrelated to \nOLX. If you link to Third Party Websites, you may be subject to those \nThird Party Websites’ terms and conditions and other policies. OLX makes\n no representation or guarantee as to the accuracy or authenticity of \nthe information contained in any such Third Party Website, and your \nlinking to any other websites is completely at your own risk and OLX \ndisclaims all liability thereto.</p>\n<p>C.  You acknowledge and agree that you are solely responsible for \nyour own Content posted on, transmitted through, or linked from the \nService and the consequences of posting, transmitting, linking or \npublishing it.  More specifically, you are solely responsible for all \nContent that you upload, email or otherwise make available via the \nService. In connection with such Content posted on, transmitted through,\n or linked from the Service by you, you affirm, acknowledge, represent, \nand warrant that: (i) you own or have the necessary licenses, rights, \nconsents, and permissions to use such Content on the Service and Website\n (including without limitation all patent, trademark, trade secret, \ncopyright or other proprietary rights in and to any and all such \nContent) and authorize OLX to use such Content to enable inclusion and \nuse of the Content in the manner contemplated by the Service, the \nWebsite and these Terms; and (ii) you have the written consent, release,\n and/or permission of each and every identifiable individual person or \nbusiness in the Content to use the name or likeness of each and every \nsuch identifiable individual person or business to enable inclusion and \nuse of the Content in the manner contemplated by the Service, the \nWebsite and these Terms.  For clarity, you retain all of your ownership \nrights in your Content; however, by submitting the Content to OLX, you \nhereby grant to OLX an irrevocable, non-cancellable, perpetual, \nworldwide, non-exclusive, royalty-free, sub-licenseable, transferable \nlicense to use, reproduce, distribute, prepare derivative works of, \ndisplay, and perform the Content in connection with the Website and \nOLX's (and its successors') business, including without limitation for \nthe purpose of promoting and redistributing part or all of the Website \nand Content therein (and derivative works thereof) in any media formats \nand through any media channels now or hereafter known.  These rights are\n required by OLX in order to host and display your Content. Furthermore,\n by you posting Content to any public area of the Service, you agree to \nand do hereby grant to OLX all rights necessary to prohibit or allow any\n subsequent aggregation, display, copying, duplication, reproduction, or\n exploitation of the Content on the Service or Website by any party for \nany purpose. You also hereby grant each user of the Website a \nnon-exclusive license to access your Content through the Website. The \nforegoing license to each user granted by you terminates once you remove\n or delete such Content from the Website.</p>\n<p>D.  OLX does not endorse any Content or any opinion, statement, \nrecommendation, or advice expressed therein, and OLX expressly disclaims\n any and all liability in connection with user Content. OLX does not \npermit copyright infringing activities and infringement of intellectual \nproperty rights on the Website, and OLX may, at its sole discretion, \nremove any infringing Content if properly notified that such Content \ninfringes on another's intellectual property rights. OLX reserves the \nright to remove any Content without prior notice. <b>OLX may also \nterminate a user's access to the Website, if they are determined to be a\n repeat infringer. A repeat infringer is a user who has been notified of\n infringing activity more than twice and/or has had a user submission \nremoved from the Website more than twice.</b> Further, at its sole \ndiscretion, OLX reserves the right to decide whether any Content is \nappropriate and complies with these Terms for violations other than \ncopyright infringement and violations of intellectual property law, such\n as, but not limited to, pornography, obscene, libelous, or defamatory \nmaterial, or excessive length. OLX may remove such Content and/or \nterminate a user's access for uploading such material in violation of \nthese Terms at any time, without prior notice and at its sole \ndiscretion.</p>\n<p>E.  OLX may provide a video service to you if you upload photographs \nfor your ad.  By uploading your photographs, you irrevocably consent to \nthe use of your photographs for this service and represent and warrant \nthat you have all right, title and interest necessary to upload and use \nthe photographs on this service.  Under this service, using a third \nparty application or service, OLX may, at its discretion, create a video\n of your photographs, upload the video via <a href=\"http://www.youtube.com/\" target=\"_blank\">www.youtube.com</a> or another third party service provider, as determined by OLX at its discretion, and embed the video into your ad on OLX.</p>\n</li>\n<li>\n<h3>FEATURED ADS</h3>\n<p>OLX offers a service known as \"Featured Ads\" where users may pay a \nnon-refundable fee to have their ads posted in selected locations on the\n Website, thus potentially increasing an ads' visibility. In order to \npurchase a Featured Ad, you may be required to transmit certain \ninformation through a third party service provider, Click &amp; Buy, a \nThird Party Website, which may be governed by its own terms of use and \nother policies. OLX makes no representation or guarantee as to the \nsafety or security of the information transmitted to any Third Party \nWebsite, and your linking to any Third Party Website is completely at \nyour own risk, and OLX disclaims all liability related thereto.</p>\n<p><b>Featured Ads are subject to the Terms listed herein, as well as additional terms of service, which can be viewed</b> <a href=\"http://www.olx.com/featured_listings.php\">here</a></p>\n</li>\n<li>\n<h3>CONDUCT</h3>\n<p>You agree not to post, email, or otherwise make available Content:</p>\n<ul>\n	<li>that violates any law;</li>\n	<li>that is copyrighted or patented, protected by trade secret or \ntrademark, or otherwise subject to third party proprietary rights, \nincluding privacy and publicity rights, unless you are the owner of such\n rights or have\npermission or a license from their rightful owner to post the material \nand to grant OLX all of the license rights granted herein;</li>\n	<li>that infringes any of the foregoing intellectual property rights of\n any party, or is Content that you do not have a right to make available\n under any law or under contractual or fiduciary relationships;</li>\n	<li>that violates the Fair Housing Act, as amended, including its \nimplementing regulations and any Presidential Executive Order related \nthereto, by stating, in any notice or advertisements for the sale or \nrental of any dwelling not excluded by such Act, a discriminatory \npreference based sex, familial status or handicap, race, color, national\n origin, religion, (or violates any applicable state or local law \nprohibiting discrimination on the basis of aforementioned \ncharacteristics or any other characteristics);</li>\n	<li>that is harmful, abusive, unlawful, threatening, harassing, \ndefamatory, pornographic, libelous, invasive of another's privacy or \nother rights, or harms or could harm minors in any way;</li>\n	<li>that harasses, degrades, intimidates or is hateful toward an \nindividual or group of individuals on the basis of religion, gender, \nsexual orientation, race, ethnicity, age, or disability;</li>\n	<li>that violates any federal, state, or local equal employment laws, \nincluding but not limited to those prohibiting the stating, in any \nadvertisement for employment, a preference or requirement based on race,\n color, religion, sex, national origin, age, or disability of the \napplicant.</li>\n	<li>that includes personal or identifying information about another person without that person's explicit consent;</li>\n	<li>that impersonates any person or entity, including, but not limited \nto, an OLX employee, or falsely states or otherwise misrepresents an \naffiliation with a person or entity;</li>\n	<li>with respect to employers that employ four or more employees, that \nviolates any applicable provision of the Immigration and Nationality \nAct, including without limitation requiring U.S. citizenship or lawful \npermanent residency (green card status) as a condition for employment, \nunless otherwise required in order to comply with law, regulation, \nexecutive order, or federal, state, or local government contract.</li>\n	<li>that is false, deceptive, misleading, deceitful, misinformative, or constitutes \"bait and switch\" offer;</li>\n	<li>that constitutes or contains \"pyramid schemes,\" \"affiliate \nmarketing,\" \"link referral code,\" \"junk mail,\" \"spam,\" \"chain letters,\" \nor unsolicited advertisements of a commercial nature;</li>\n	<li>that constitutes or contains any form of advertising or \nsolicitation if (1) posted in areas or categories of the Website which \nare not designated for such purposes; or (2) e-mailed to OLX users who \nhave requested not to be contacted about other services, products or \ncommercial interests;</li>\n	<li>that includes links to commercial services or Third Party Websites, except as specifically allowed by OLX;</li>\n	<li>that advertises any illegal services or the sale of any items the \nsale of which is prohibited or restricted by applicable law, including \nwithout limitation items the sale of which is prohibited or regulated by\n New York law;</li>\n	<li>that contains software viruses or any other computer code, files or\n programs designed to interrupt, destroy or limit the functionality of \nany computer software or hardware or telecommunications equipment;</li>\n	<li>that disrupts the normal flow of dialogue with an excessive number \nof messages (flooding attack) to the Service, or that otherwise \nnegatively affects other users' ability to use the Service; or</li>\n	<li>that employs misleading email addresses, or forged headers or \notherwise manipulated identifiers in order to disguise the origin of \nContent transmitted through the Service.</li>\n</ul>\n<p>Additionally, you agree not to:</p>\n<ul>\n	<li>contact anyone who has asked not to be contacted, or make \nunsolicited contact with anyone for any commercial purpose; or to \n\"stalk\" or otherwise harass anyone;</li>\n	<li>make any libelous or defamatory comments or postings to or against anyone;</li>\n	<li>collect personal data about other users or entities for commercial or unlawful purposes;</li>\n	<li>use automated means, including spiders, robots, crawlers, data \nmining tools, or the like to download or scrape data from the Service, \nexcept for internet search engines (e.g,. Google) and non-commercial \npublic archives (e.g. archive.org) that comply with our robots.txt file;</li>\n	<li>post Content that is outside the local area or not relevant to the \nlocal area, repeatedly post the same or similar Content, or otherwise \nimpose unreasonable or disproportionately large loads on our servers and\n other infrastructure;</li>\n	<li>post the same item or service in multiple classified categories or forums, or in multiple metropolitan areas;</li>\n	<li>attempt to gain unauthorized access to computer systems owned or \ncontrolled by OLX or engage in any activity that disrupts, diminishes \nthe quality of, interferes with the performance of, or impairs the \nfunctionality of, the Service or the Website.</li>\n	<li>use any form of automated device or computer program (sometimes \nreferred to as \"flagging tools\") that enables the use of OLX's \"flagging\n system\" or other community control systems without each flag being \nmanually entered by a human that initiates the flag (an \"automated \nflagging device\"), or use any such flagging tool to remove posts of \ncompetitors, other third parties or to remove posts without a reasonable\n good faith belief that the post being flagged violates these Terms or \nany applicable law or regulation.</li>\n	<li>use any automated device or software that enables the submission of\n automatic postings on OLX without human intervention or authorship (an \n\"automated posting device\"), including without limitation, the use of \nany such automated posting device in connection with bulk postings, or \nfor automatic submission of postings at certain times or intervals; or</li>\n</ul>\n</li>\n<li>\n<h3>PAID POSTINGS</h3>\n<p>OLX may charge a fee to post Content in some areas of the Service. \nThe fee permits certain Content to be posted in a designated area of the\n Website. Each party posting Content to the Service is responsible for \nsaid Content and compliance with the Terms. Any such fees paid hereunder\n are non-refundable in the event any Content is removed from the Service\n for violating these Terms</p>\n</li>\n<li>\n<h3>POSTING AGENTS</h3>\n<p>As used herein, the term \"Posting Agent\" refers to a third-party \nagent, service, or intermediary that offers to post Content to the \nService on behalf of others. OLX prohibits the use of Posting Agents, \ndirectly or indirectly, without the express written permission of OLX  \nIn addition, Posting Agents are not permitted to post Content on behalf \nof others, directly or indirectly, or otherwise access the Service to in\n order to post Content on behalf of others, except with express written \npermission or license from OLX.</p>\n</li>\n<li>\n<h3>ACCESS TO THE SERVICE</h3>\n<p>OLX grants you a limited, revocable, non-exclusive license to access \nand use the Service for personal use.  This license granted herein does \nnot include any of the following: (a) access to or use of the Service by\n Posting Agents; or (b) any collection, aggregation, copying, \nduplication, display or derivative use of the Service nor any use of \ndata mining, robots, spiders, or similar data gathering and extraction \ntools for any purpose unless expressly permitted by OLX or as otherwise \nset forth in these Terms. Notwithstanding the foregoing, general purpose\n internet search engines and non-commercial public archives that gather \ninformation for the sole purpose of displaying hyperlinks to the \nService, provided they each do so from a stable IP address or range of \nIP addresses using an easily identifiable agent and comply with our \nrobots.txt file, may engage in the activities set forth in (b). For \npurposes of this exception, a \"general purpose internet search engine\" \ndoes not include a website or search engine or other service that \nspecializes in classified listings including any subset of classifieds \nlistings such as housing, for sale, jobs, services, or personals, or \nwhich otherwise provides classified ad listing services. The license set\n forth in this Section permits you to display on your website, or create\n a hyperlink thereto, individual postings on the Service so long as such\n use is for noncommercial and/or news reporting purposes only (e.g., for\n use in personal blogs or other personal online media). If the total \nnumber of such postings displayed on or linked to your website exceeds \nninety nine (99) postings, your use will be considered to be in \nviolation of these Terms, unless OLX expressly grants you permission \notherwise. You are also permitted to create a hyperlink to the home page\n of the Website so long as the link does not portray OLX, its employees,\n affiliates or agents in a false, confusing, misleading, derogatory, or \notherwise offensive matter. OLX may offer parts of the Service in RSS \nformat for the purpose of embedding individual RSS feeds into a personal\n website or blog, or view postings through third party software news \naggregators. OLX permits you to display, excerpt from, and link to any \nsuch RSS feeds on your personal website or personal blow, provided that \n(a) your use of the RSS feed is for personal, non-commercial purposes \nonly, (b) each title within an RSS feed is correctly linked back to the \noriginal post on the Service and redirects the user to the post when the\n user clicks on it, (c) you provide, in a conspicuous manner, proper \nattribution to 'OLX' as the source of the RSS feed, (d) your use or \ndisplay of the RSS feed does not suggest that OLX promotes or endorses \nany third party causes, opinions, ideas, web sites, products or \nservices, (e) you do not redistribute the RSS feed, and (f) your use \ndoes not overburden or otherwise slow the performance of OLX's systems. \nOLX reserves all rights in and to the content of any RSS feeds provided \nthrough the Service and may terminate any RSS feed at any time without \nnotice. Use of the Service beyond the scope of authorized access as set \nforth in these Terms immediately terminates any permission or license \ngranted herein. In order to collect, aggregate, copy, duplicate, display\n or make derivative use of the Service or any Content made available via\n the Service for other purposes (including commercial\npurposes) not stated herein, you must first obtain a license from OLX.\n</p>\n</li>\n<li>\n<h3>NOTIFICATION OF CLAIMS OF INFRINGEMENTS</h3>\n<p>If you are a copyright owner or an agent thereof and believe that any\n user Content or other content infringes upon your copyrights, you may \nsubmit a notification pursuant to the Digital Millennium Copyright Act \n(\"DMCA\") by providing our Copyright Agent with the following information\n in writing (see 17 U.S.C 512(c)(3) for further detail):</p>\n<p>1.A physical or electronic signature of a person authorized to act on\n behalf of the owner of an exclusive right that is allegedly infringed;</p>\n<p>2.Identification of the copyrighted work claimed to have been \ninfringed, or, if multiple copyrighted works at a single online site are\n covered by a single notification, a representative list of such works \nat that site;</p>\n<p>3.Identification of the material that is claimed to be infringing or \nto be the subject of infringing activity and that is to be removed or \naccess to which is to be disabled and information reasonably sufficient \nto permit OLX to locate the material;</p>\n<p>4.Information reasonably sufficient to permit OLX to contact you, \nsuch as an address, telephone number, and, if available, an electronic \nmail address;</p>\n<p>5.A statement that you have a good faith belief that use of the \nmaterial in the manner complained of is not authorized by the copyright \nowner, its agent, or the law; and</p>\n<p>6.A statement that the information in the notification is accurate, \nand under penalty of perjury, that you are authorized to act on behalf \nof the owner of an exclusive right that is allegedly infringed.</p>\n<p>OLX's designated Copyright Agent to receive notifications of claimed infringement is: <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Legal Issues report form</a>\n or OLX, S.A., Uriarte 2489 - 3rd Floor, Buenos Aires, Argentina, \nAttention: DMCA Complaint . For clarity, only DMCA notices should go to \nthe Copyright Agent; any other feedback, comments, requests for \ntechnical support, and other communications should be directed to OLX's \ncustomer service by clicking on the Contact Us link on the OLX website. \nYou acknowledge that if you fail to comply with all of the requirements \nof this Section 8, your DMCA notice may not be valid.</p>\n</li>\n<li>\n<h3>INTELLECTUAL PROPERTY RIGHTS</h3>\n<p>You acknowledge and agree that the materials on the Website, other \nthan the user Content that you licensed under Section 2(C) of the Terms,\n including without limitation, the text, software, scripts, graphics, \nphotos, sounds, music, videos, interactive features and the like \n(\"Materials\") and the trademarks, service marks and logos contained \ntherein (\"Marks\"), are owned by or licensed to OLX, and are subject to \ncopyright and other intellectual property rights under United States and\n foreign laws and international conventions. Materials on the Website \nare provided to you AS IS for your information and personal use only and\n may not be used, copied, reproduced, distributed, transmitted, \nbroadcast, displayed, sold, licensed, or otherwise exploited for any \nother purposes whatsoever without the prior written consent of the \nrespective owners. OLX reserves all rights not expressly granted herein \nto the Website and the Materials. You agree to not engage in the use, \ncopying, or distribution of any of the Materials other than as expressly\n permitted herein, including any use, copying, or distribution of \nMaterials of third parties obtained through the Website for any \ncommercial purposes. If you download or print a copy of the Materials \nfor personal use, you must retain all copyright and other proprietary \nnotices contained therein. You agree not to circumvent, disable or \notherwise interfere with security related features of the Website or \nfeatures that prevent or restrict use or copying of any Materials or \nenforce limitations on use of the Website or the Materials therein. The \nService is protected to the maximum extent permitted by copyright laws, \nother laws, and international treaties. Content displayed on or through \nthe Service is protected by copyright as a collective work and/or \ncompilation,\npursuant to copyrights laws, other laws, and international conventions. \nAny reproduction, modification, creation of derivative works from or \nredistribution of the Website, the Materials, or the collective work or \ncompilation is expressly prohibited. Copying or reproducing the Website,\n the Materials, or any portion thereof to any other server or location \nfor further reproduction or redistribution is expressly prohibited. You \nfurther agree not to reproduce, duplicate or copy Content or Materials \nfrom the Service, and agree to abide by any and all copyright notices \nand other notices displayed on the Service. You may not decompile or \ndisassemble, reverse engineer or otherwise attempt to discover any \nsource code contained in the Service. Without limiting the foregoing, \nyou agree not to reproduce, duplicate, copy, sell, resell or exploit for\n any commercial purposes, any aspect of the Service. OLX is a service \nmark registered with the U.S. Patent and Trademark Office and in various\n other jurisdictions.</p>\n</li>\n<li>\n<h3>USER SUBMISSIONS</h3>\n<p>You understand that when using the Website, you will be exposed to \nContent from a variety of sources, and that OLX is not responsible for \nthe accuracy, usefulness, safety, or intellectual property rights of or \nrelating to such Content, and you agree and assume all liability for \nyour use. You further understand and acknowledge that you may be exposed\n to Content that is inaccurate, offensive, indecent, or objectionable, \ndefamatory or libelous and you agree to waive, and hereby do waive, any \nlegal or equitable rights or remedies you have or may have against OLX \nwith respect thereto.</p>\n</li>\n<li>\n<h3>INDEMNITY</h3>\n<p>You agree to defend, indemnify and hold harmless OLX, its officers, \nsubsidiaries, affiliates, successors, assigns, directors, officers, \nagents, service providers, suppliers and employees, from and against any\n and all claims, damages, obligations, losses, liabilities, costs or \ndebt, and expenses (including but not limited to attorneys' fees) \narising from: (i) your use of and access to the Website and/or the \nService; (ii) your violation of any term of these Terms; (iii) your \nviolation of any third party right, including without limitation any \ncopyright, trademark, trade secret or other property, or privacy right; \nor (iv) any claim that your Content caused damage to a third party. This\n defense and indemnification obligation will survive termination, \nmodification or expiration of these Terms and your use of the Service \nand the Website.</p>\n</li>\n<li>\n<h3>NO SPAM POLICY</h3>\n<p>You understand and agree that sending unsolicited email \nadvertisements or other unsolicited communications to OLX email \naddresses or through OLX computer systems are expressly prohibited by \nthese Terms. You acknowledge and agree that from time to time OLX may \nmonitor email usage using human monitors or automated software to flag \ncertain words associated with spam or scams in emails that are sent \nbetween one user to another in the OLX e mail system. Any communication \nbetween yourself and any other user utilizing the communication features\n available on the Service and the Website may be used only in accordance\n with the Terms. Any unauthorized use of OLX computer systems is a \nviolation of these Terms and certain federal and state laws. Such \nviolations may subject the sender and his or her agents to civil and \ncriminal penalties.</p>\n</li>\n<li>\n<h3>DEALINGS WITH ORGANIZATIONS AND INDIVIDUALS</h3>\n<p>You acknowledge and agree that OLX shall not be liable for your \ninteractions with any organizations and/or individuals on the Website or\n through the Service. This includes, but is not limited to, payment and \ndelivery of goods and services, and any other terms, conditions, \nwarranties or representations associated with any interaction you may \nhave with other organizations and/or individuals. These dealings are \nsolely between you and such organizations and/or individuals. You agree \nand acknowledge that OLX shall not be responsible or liable for any loss\n or damage of any sort incurred as the result of any such dealings or \ninteractions. If there is a dispute between participants on the Website,\n or between users and any third party, you understand and agree that OLX\n is under no obligation to become involved in such dispute. In the event\n that you have a dispute with one or more other users, you hereby \nrelease OLX, its officers, employees, agents and successors from any and\n all claims, demands and damages (actual and consequential) of every \nkind or nature, known or unknown, suspected and unsuspected, disclosed \nand undisclosed, arising out of or in any way related to such disputes \nand/or our Service.</p>\n</li>\n<li>\n<h3>LIMITATION AND TERMINATION OF SERVICE</h3>\n<p>You acknowledge and agree that OLX may establish limits from time to \ntime concerning use of the Service, including among others, the maximum \nnumber of days that Content will be maintained or retained by the \nService, the maximum number and size of postings, e-mail messages, or \nother Content that may be transmitted or stored by the Service, and the \nfrequency with which you may access the Service or the Website. You \nacknowledge and agree that OLX has no responsibility or liability for \nthe deletion or failure to store any Content maintained or transmitted \nby the Website or the Service. You acknowledge and agree that OLX \nreserves the right at any time to modify or discontinue the Service (or \nany part thereof) with or without notice, and that OLX shall not be \nliable to you or to any third party for any such modification, \nsuspension or discontinuance of the Service. You acknowledge and agree \nthat OLX, in its sole and absolute discretion, has the right (but not \nthe obligation) to delete or deactivate your account, block your e-mail \nor IP address, or otherwise terminate your access to or use of the \nService (or any part thereof), immediately and without notice, and \nremove and discard any Content within the Service, for any reason or no \nreason at all, including, without limitation, if OLX believes that you \nhave violated these Terms. Further, you agree that OLX shall not be \nliable to you or any third-party for any termination of your access to \nthe Website or the Service. Further, you agree not to attempt to use the\n Service after any such termination.</p>\n</li>\n<li>\n<h3>DISCLAIMER OF WARRANTIES</h3>\n<p>YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT USE OF THE WEBSITE AND THE \nSERVICE IS ENTIRELY AT YOUR OWN RISK AND THAT THE WEBSITE AND THE \nSERVICE ARE PROVIDED ON AN \"AS IS\" OR \"AS AVAILABLE\" BASIS, WITHOUT ANY \nWARRANTIES OF ANY KIND. ALL EXPRESS AND IMPLIED WARRANTIES, INCLUDING, \nWITHOUT LIMITATION, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE, AND NON-INFRINGEMENT OF PROPRIETARY RIGHTS ARE \nEXPRESSLY DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. TO THE \nFULLEST EXTENT PERMITTED BY LAW OLX, ITS OFFICERS, DIRECTORS, EMPLOYEES,\n AND AGENTS DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, IN CONNECTION \nWITH THE WEBSITE AND YOUR USE THEREOF. OLX MAKES NO WARRANTIES OR \nREPRESENTATIONS ABOUT THE ACCURACY OR COMPLETENESS OF THE WEBSITE'S \nCONTENT OR THE CONTENT OF ANY THIRD PARTY WEBSITES LINKED TO THE WEBSITE\n AND ASSUMES NO LIABILITY OR RESPONSIBILITY FOR ANY (I) ERRORS, \nMISTAKES, OR INACCURACIES OF CONTENT, (II) PERSONAL INJURY OR PROPERTY \nDAMAGE, OF ANY NATURE WHATSOEVER, RESULTING FROM YOUR ACCESS TO AND USE \nOF THE WEBSITE AND SERVICE, (III) ANY UNAUTHORIZED ACCESS TO OR USE OF \nOUR SERVERS AND/OR ANY AND ALL PERSONAL INFORMATION AND/OR FINANCIAL \nINFORMATION STORED THEREIN, (IV) ANY INTERRUPTION OR CESSATION OF \nTRANSMISSION TO OR FROM THE WEBSITE, (IV) ANY BUGS, VIRUSES, TROJAN \nHORSES, OR THE LIKE WHICH MAY BE TRANSMITTED TO OR THROUGH THE WEBSITE \nBY ANY THIRD PARTY, AND/OR (V) ANY ERRORS OR OMISSIONS IN ANY CONTENT OR\n FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF \nANY CONTENT POSTED, EMAILED, COMMUNICATED, TRANSMITTED, OR OTHERWISE \nMADE AVAILABLE VIA THE WEBSITE OR THE SERVICE. OLX DOES NOT WARRANT, \nENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY FOR ANY PRODUCT OR SERVICE \nADVERTISED OR OFFERED BY A THIRD PARTY THROUGH THE WEBSITE OR ANY \nHYPERLINKED WEBSITE OR FEATURED IN ANY BANNER OR OTHER ADVERTISING, AND \nOLX WILL NOT BE A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING \nANY TRANSACTION BETWEEN YOU AND/OR OTHER USERS AND/OR THIRD-PARTY \nPROVIDERS OF PRODUCTS OR SERVICES. AS WITH THE PURCHASE OF A PRODUCT OR \nSERVICE THROUGH ANY MEDIUM OR IN ANY ENVIRONMENT, YOU SHOULD USE YOUR \nBEST JUDGMENT AND EXERCISE CAUTION WHERE APPROPRIATE.\n</p>\n</li>\n<li>\n<h3>LIMITATIONS OF LIABILITY</h3>\n<p>IN NO EVENT SHALL OLX, ITS OFFICERS, DIRECTORS, EMPLOYEES, OR AGENTS,\n BE LIABLE FOR DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR \nEXEMPLARY DAMAGES (EVEN IF OLX HAS BEEN ADVISED OF THE POSSIBILITY OF \nSUCH DAMAGES), RESULTING FROM ANY ASPECT OF YOUR USE OF THE WEBSITE OR \nTHE SERVICE, INCLUDING WITHOUT LIMITATION WHETHER THE DAMAGES ARISE FROM\n USE OR MISUSE OF THE WEBSITE OR THE SERVICE, FROM INABILITY TO USE THE \nWEBSITE OR THE SERVICE, OR THE INTERRUPTION, SUSPENSION, MODIFICATION, \nALTERATION, OR TERMINATION OF THE WEBSITE OR THE SERVICE. SUCH \nLIMITATION OF LIABILITY SHALL ALSO APPLY WITH RESPECT TO DAMAGES \nINCURRED BY REASON OF OTHER SERVICES OR PRODUCTS RECEIVED THROUGH OR \nADVERTISED IN CONNECTION WITH THE WEBSITE OR THE SERVICE OR ANY LINKS ON\n THE WEBSITE, AS WELL AS BY REASON OF ANY INFORMATION, OPINIONS OR \nADVICE RECEIVED THROUGH OR ADVERTISED IN CONNECTION WITH THE WEBSITE OR \nTHE SERVICE OR ANY LINKS ON THE OLX SITE. THESE LIMITATIONS SHALL APPLY \nTO THE FULLEST EXTENT PERMITTED BY LAW. YOU SPECIFICALLY ACKNOWLEDGE AND\n AGREE THAT OLX SHALL NOT BE LIABLE FOR USER SUBMISSIONS OR THE \nDEFAMATORY, OFFENSIVE, OR ILLEGAL CONDUCT OF ANY USER OR THIRD PARTY AND\n THAT THE RISK OF HARM OR DAMAGE FROM THE FOREGOING RESTS ENTIRELY WITH \nYOU. The Website is controlled and offered by OLX from its facilities in\n the United States of America. OLX makes no representations or \nwarranties that the Website is appropriate for use in other locations. \nThose who access or use the Website from other jurisdictions do so at \ntheir own volition and risk and are responsible for compliance with \nlocal law.\n</p>\n</li>\n<li>\n<h3>ASSIGNMENT</h3>\n<p>These Terms, and any rights and licenses granted hereunder, may not \nbe transferred or assigned by you, but may be assigned by OLX without \nrestriction. Any assignment or transfer by you shall be null and void.</p>\n</li>\n<li>\n<h3>ABILITY TO ACCEPT TERMS OF SERVICE</h3>\n<p>This Website is intended only for adults. You affirm that you are \neither more than 18 years of age, or an emancipated minor, or possess \nlegal parental or guardian consent, and are fully able and competent to \nenter into the terms, conditions, obligations, affirmations, \nrepresentations, and warranties set forth in these Terms, and to abide \nby and comply with these Terms. In any case, you affirm that you are \nover the age of 13, as the Website is not intended for children under \n13.</p>\n<p><u><b>NOTICE TO CHILDREN UNDER THE AGE OF 13 AND THEIR PARENTS OR GUARDIANS</b></u></p>\n<p><b>If you are under the age of 13, YOU MUST NOT USE THIS WEBSITE. \nPlease do not send us your personal information, including your email \naddresses, name, and/or contact information. If you want to contact us, \nyou may only do so through your parent or legal guardian.</b></p>\n</li>\n<li>\n<h3>GENERAL INFORMATION</h3>\n<p>These Terms and the other policies posted on the Website constitute \nthe complete and exclusive understanding and agreement between you and \nOLX and govern your use of the Service and the Website superseding all \nprior understandings, proposals, agreements, negotiations, and \ndiscussions between the parties, whether written or oral. The Terms and \nthe relationship between you and OLX shall be governed by the laws of \nthe State of New York without regard to its conflict of law principles. \nYou and OLX agree to submit to the personal and exclusive jurisdiction \nof the courts located within the State of New York. The failure of OLX \nto exercise or enforce any right or provision of the Terms shall not \nconstitute a waiver of such right or provision. If any provision of the \nTerms is found by a court of competent jurisdiction to be invalid \n(including, without limitation, because such provision is inconsistent \nwith the laws of another jurisdiction) or inapplicable, the parties \nnevertheless agree that the court should endeavor to give effect to the \nparties' intentions as reflected in the provision. If any provision or \nprovisions of these Terms is held to be invalid, illegal or \nunenforceable, the validity, legality and enforceability of the \nremaining provisions of the Terms shall not in any way be affected or be\n impaired. YOU AGREE THAT ANY CAUSE OF ACTION BROUGHT BY YOU AND ARISING\n OUT OF OR RELATED TO YOUR USE OF THE SERVICE AND/OR THE WEBSITE MUST \nCOMMENCE WITHIN ONE (1) YEAR AFTER THE CAUSE OF ACTION ACCRUES, EXCEPT \nTHAT OLX MAY COMMENCE ANY SUCH CAUSE OF ACTION IN ACCORDANCE WITH THE \nAPPLICABLE STATUTE OF LIMITATIONS UNDER NEW YORK LAW. OTHERWISE, SUCH \nCAUSE OF ACTION IS PERMANENTLY BARRED. These Terms shall inure to the \nbenefit of and be binding upon each party's successors and assigns.</p>\n</li>\n<li>\n<h3>VIOLATION OF TERMS AND LIQUIDATED DAMAGES</h3>\n<p>Please report any violations of the Terms that you become aware of by\n contacting us using the link at the bottom of the OLX homepage at <a target=\"_blank\" href=\"http://www.olx.com/\">www.olx.com</a>.\n Any failure to act by OLX with respect to a breach by you or others \ndoes not waive our right to act with respect to subsequent or similar \nbreaches by you or others. You understand and agree that, because \ndamages are often difficult or impossible to quantify, if actual damages\n cannot be reasonably calculated then you will be liable to pay OLX the \nfollowing as liquidated damages (and not a penalty):</p>\n<p>a. If OLX establishes any limits on the frequency with which you may \naccess the Service, or terminates your access to or use of the Service, \nyou agree to pay OLX ninety nine dollars ($99) for (i) each message \nposted in excess of such limits or (ii) for each day on which you access\n OLX in excess of such limits, whichever is higher.</p>\n<p>b. If you post a message that (1) impersonates any person or entity; \n(2) falsely states or otherwise misrepresents your affiliation with a \nperson or entity; or (3) that includes personal or identifying \ninformation about another person without that person's explicit consent,\n you agree that OLX in its sole discretion may disclose identifying \ninformation about you to the victim, and that should OLX bring a claim \nagainst you in court, that you will pay OLX one thousand one hundred \ndollars ($1,100) for each such message.</p>\n<p>c. If you are a Posting Agent that uses the Service in violation of \nthese Terms, in addition to any liquidated damages under Section 20(e) \nbelow you agree to pay OLX ninety nine dollars ($99) for each and every \nitem you post in violation of these Terms. A Posting Agent will also be \ndeemed an agent of the party engaging the Posting Agent to access the \nService, and such party (by engaging the Posting Agent in violation of \nthese Terms) agrees to pay OLX an additional ninety nine dollars ($99) \nfor each item posted by the Posting Agent on behalf of such party in \nviolation of these Terms.</p>\n<p>d. If you use OLX e-mail addresses or computer systems to send \nunsolicited e-mail advertisements to OLX e-mail addresses or any other \nparty, you agree to pay OLX thirty dollars ($30) for each such e-mail.</p>\n<p>e. If you post messages in violation of these Terms, other than as \ndescribed above, you agree to pay OLX ninety nine dollars ($99) for each\n such message. Notwithstanding the foregoing, OLX may, in its sole and \nabsolute discretion, issue a warning before assessing damages pursuant \nto this Section 20(e).</p>\n<p>f. If you aggregate, copy, display, mirror, reproduce, or otherwise \nexploit for any purpose any Content (except for your own Content) in \nviolation of these Terms without OLX's express written permission, you \nagree to pay OLX ten thousand dollars ($10,000) for each day on which \nyou engage in such conduct.</p>\n<p>If none of the foregoing clauses (a) – (f) are applicable, you agree \nto pay OLX’s actual damages, to the extent such actual damages can be \nreasonably calculated. Notwithstanding any other provision of these \nTerms, OLX retains the right to seek equitable remedies, including \nwithout limitation, specific performance of any term contained in these \nTerms, or a preliminary or permanent injunction against the breach or \nthreatened breach of any such term or in aid of the exercise of any \npower granted in these Terms, or any combination thereof, without the \nnecessity of posting a bond.</p>\n</li>\n<li>\n<h3>PRIVACY POLICY</h3>\n<p><u>A. Safe Harbor Certification</u></p>\n<p>OLX complies with the U.S.-EU Safe Harbor Framework and the \nU.S.-Swiss Safe Harbor Framework as set forth by the U.S. Department of \nCommerce regarding the collection, use, and retention of personal \ninformation from European Union member countries and Switzerland.  OLX \nhas certified that it adheres to the Safe Harbor Privacy Principles of \nnotice, choice, onward transfer, security, data integrity, access, and \nenforcement.  To learn more about the Safe Harbor program, and to view \nOLX’s certification, please visit http://www.export.gov/safeharbor/</p>\n<p><u>B. Type of Information Collected:</u></p>\n<p>When you visit the Website, we may collect certain non-personal \ninformation such as your Internet Protocol (“IP”) address, operating \nsystem, browser type, and Internet service provider. This type of \ninformation does not identify you personally. When you register with the\n Website, we may also collect personal information that you provide such\n as your name, mailing address, email address, home country, and zip \ncode (“Registration Information”). You have the option of also providing\n to us your phone and fax numbers, gender, age, and/or company name if \nyou choose to register with OLX. If you provide your phone number, it \nwill be displayed in your posting. We may also collect additional \ninformation that our users provide, such as new or deleted postings, new\n or deleted comments, keyword searches, scam reports and new contact \nsellers. We use a third-party credit card processing company for \npurchases, and other third party companies to monitor site traffic, \nwhich may, in some instances, store your information (see Section 21(D) \nbelow). When you visit the Website and/or use the OLX mobile \napplication, OLX may use GPS technology (or other similar technology) to\n determine your current location in order to determine the city you are \nlocated within and display a location map with relevant advertisements. \nOLX will not share your current location with other OLX users or \npartners. If you do not want OLX to use your location for the purposes \nset forth above, you should turn off the location services for the OLX \napplication located in your OLX account settings or in your mobile phone\n settings. <b>By using this Website or the Service, you consent to \ncollection, storage, and use of the personal information you provide for\n any of the Services that we offer, and you consent to our collection of\n any changes or updates that you may provide to any information you \nprovide that is collected by OLX.</b>\n</p>\n<p><u>C. Cookies</u></p>\n<p>We may use cookies to manage our users’ sessions and to store \npreferences, tracking information, and language selection. Cookies may \nbe used whether you register with us or not. “Cookies” are small text \nfiles transferred by a web server to your hard drive and thereafter \nstored on your computer. The types of information a cookie collects \ninclude the date and time you visited, your browsing history, your \npreferences, and your username. In some instances, our third-party \nservice providers may use cookies on the Website. We cannot control or \naccess cookies used by third- party service providers. This Privacy \nPolicy covers only Cookies used by us, and not any cookies used by third\n parties. You have the ability to either accept or decline the use of \ncookies on your computer, whether you are registered with us or not. \nTypically, you can configure your browser to not accept cookies. \nHowever, declining the use of cookies may limit your access to certain \nfeatures of the Website. For example, you may have difficulty logging in\n or using certain interactive features of the Website, such as the OLX \nForum or Comments feature.</p>\n<p><u>D. Third Parties</u></p>\n<p>We use third-party service providers to process purchases you make \nand to monitor our users’ interests. In addition, the Website may \noccasionally contain links to Third-Party Sites. If you click on the \nlinks to Third-Party Websites, you leave the Website. We are not \nresponsible for the content of these Third-Party Websites or for the \nsecurity of your personal information when you use the Third Party \nWebsites. These third-party service providers and Third-Party Sites may \nhave their own privacy policies governing the storage and retention of \nyour personal information that you may be subject to. They may collect \ninformation such as your IP address, browser specification, or operating\n system. This Privacy Policy does not govern personal information \nprovided to, stored on, or used by these third-party providers and \nThird-Party Sites. We recommend that when you enter a Third-Party Site, \nyou review the Third Party Site’s privacy policy as it relates to \nsafeguarding your personal information. We use third-party advertising \ncompanies to serve ads when you visit the Website. These companies may \nuse information (not including your name, address, email address, or \ntelephone number) about your visits to the Website and Third-Party \nWebsites in order to provide advertisements about goods and services of \ninterest to you. On the Website, Google, as a third-party vendor, uses \nCookies to serve ads. Google’s use of the DoubleClick DART Cookie \nenables it to serve ads to the Website’s users based on their visit to \nthe Websites and Third-Party Websites. For more information on the DART \nCookie see: <a target=\"_blank\" href=\"http://www.doubleclick.com/privacy/faq.aspx\">http://www.doubleclick.com/privacy/faq.aspx</a>. You may opt out of the use of the DART Cookie by Google by visiting the Google Ad and Content Network Privacy Policy at: <a target=\"_blank\" href=\"http://www.google.com/privacy_ads.html\">http://www.google.com/privacy_ads.html</a>. You may opt out of targeting advertising for all NAI member ad networks by visiting: <a target=\"_blank\" href=\"http://www.networkadvertising.org/\">http://www.networkadvertising.org/</a>.\n By publishing an ad on the Website, you acknowledge and agree that the \nContent is public and accessible by any third party and that they may \nappear in search engine results (such as Yahoo!, MSN, Google, Altavista,\n and other search engines) and in the cache of those search engines, in \nfeeds and Third-Party Websites pursuant to cobranding agreements, and \nthat it is the sole responsibility of each of those search engines, \nThird-Party Websites or RSS web feed resources to update and/or to \nremove Content from their indexes and their cache. You agree and \nacknowledge that OLX is not be liable for the information published in \nsearch results or by any Third-Party Website that carries OLX postings.\n</p>\n<p><u>E. How Your Information is Used</u></p>\n<p>We may use information provided by you to: (i) enforce our Terms of \nUse, monitor user activity, such as keyword searches or new postings, \nand more effectively manage traffic on the Website; (ii) provide \ncustomer services, create and manage user accounts; and (iii) assist you\n with technical difficulties.  Also, we may share with third-party \nservice providers certain information, such as your browser capabilities\n or operating system, that we have collected in order to better \nunderstand which advertisements and services may interest you. We may \nblock users located in certain countries from using the Website. We may \nretain such information for as long as is required to fulfill our \nbusiness objective, even after your account is terminated.</p>\n<p><u>F. Protecting Your Personal Information</u></p>\n<p>You are a valued customer, and we recognize that protecting your \nprivacy is important to you. For this reason, we are committed to \nprotecting the personal information you provide in a variety of ways. We\n do not directly process any payments and do not store your credit card \ninformation. Secured socket layer (“SSL”) technology is used for \nprocessing payment transactions with third- party service provider \npartners, such as Click &amp; Buy, PayPal, and DineroMail. Your \nRegistration Information may be protected by a unique customer password \nand user ID. You should not disclose your password information to anyone\n and you should always remember to log off if using a shared computer. \nLastly, you may utilize the Website as an anonymous user by not \nregistering.  We have taken certain security protections in safeguarding\n your personal information. However, as with most electronic \ntransactions, no method is 100% safe. While we strive to use a \ncommercially acceptable means to protect the personal information you \nprovide, we cannot guarantee its security. Therefore, you acknowledge \nand agree that we assume no liability regarding the theft, loss, \nalteration or misuse of personal or other information or Content, \nincluding, without limitation, such information that has been provided \nto third parties or other users, or with regards to the failure of a \nthird party to abide by the agreement between us and such third party. \nYou may participate in our Forum or utilize our Comments feature. For \npostings to the Forum, your username will be posted. For postings using \nthe Comments feature, your name and email will only be posted if you \nprovide it in the comment. We strongly discourage posting any \ninformation on these features or in any Content posted by you that you \ndo not want others to see. You agree that you are responsible for \nmaintaining the confidentiality of your username and password, and all \nuses of your account, whether or not you have authorized such use.\n</p>\n<p><u>G. Accessing and Modifying Personal Information and Communication Preferences</u></p>\n<p>You may access, remove, review, and/or make changes to personal information that you have provided to us <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Contact Support form</a>.\n You need not register in order to post or respond to advertisements on \nthe Website. If you register, we may send you certain notifications, \nadvertisements, promotions, and specials. We may also send you any \nlegally required notifications and certain notifications, including but \nnot limited to, service related notices or notices regarding a change to\n any of our policies. For example, we may send you a notice regarding \nserver problems or scheduled maintenance to the Website. In order to \nopt-out of receiving these notices, you may need to deactivate your \naccount. You can opt out of certain e-mail communications from us, \nincluding our newsletters, advice on buying and selling on the Website, \nnotifications that a user has commented on your posting, and \nnotifications that you can refresh your posting. We will not change your\n preferences without your consent.  You cannot opt out of receiving \ntransactional communications from OLX related to your account.</p>\n<p><u>H. Disclosures</u></p>\n<p>On rare occasions, we may be required to disclose your personal \ninformation due to legal or regulatory requirements. In such instances, \nwe reserve the right to disclose your personal information as required \nin order to comply with our legal obligations, including but not limited\n to complying with court orders, warrants, subpoenas, service of process\n requirements, or discovery requests. We may also disclose information \nabout our users to law enforcement officers or others, in the good faith\n belief that such disclosure is reasonably necessary to enforce these \nTerms and/or Privacy Policy; respond to claims that any Content violates\n the rights of third-parties; or protect the rights, property, or \npersonal safety of OLX, our users or the general public.  If \nsubstantially all of our assets are sold or merged into another company,\n we will notify you of the transaction. The acquiring company shall be \ngiven access to your personal information without your consent. If we \nsell only a part of our business, the acquiring entity shall have access\n to your personal information without your consent and we may send you a\n notice regarding this sale.</p>\n<p><u>I. Notification of Changes</u></p>\n<p>We reserve the right to change these Terms from time to time, and at \nour sole discretion. We may send you a notice regarding material changes\n to these Terms, including the Privacy Policy or the Website. You should\n make note of the “last updated date” at the beginning of the Terms. \nWith this information, you should be able to identify if the Terms have \nbeen updated recently.</p>\n<p><u>J. Disputes</u></p>\n<p>Any disputes regarding your privacy are subject to the Terms, \nincluding but not limited to any provisions related to indemnification, \nlimitations on damages, and choice of law.</p>\n<p><u>K. Important Notices to Non-U.S. Residents</u></p>\n<p>OLX abides by the Safe Harbor principles set forth by the U.S. \nDepartment of Commerce regarding the collection, use, and retention of \napplicable data from the European Union.  However, it is important to \nnote that the Website and its servers are operated in the United States.\n  If you are located outside of the United States, please be aware that \nany personal information you provide to us will be transferred to the \nUnited States.  By using the Website and by providing us personal \ninformation when using our services, you consent to this transfer and \nour use of the information and data provided by you in accordance with \nthis Privacy Policy.</p>\n<p>In order to comply with the Safe Harbor framework, OLX commits to the\n resolution of complaints about your privacy and our collection or use \nof your personal information.  We have also committed to resolve any \ncomplaints by European Union citizens relating to this Privacy Policy, \nwhich cannot be resolved directly with our company, through the Council \nof Better Business Bureaus, Inc.’s Safe Harbor Privacy Dispute \nResolution Procedures.</p>\n<p>If you have any questions regarding this Privacy Policy, please \ncontact us as described in the “How to Contact Us” section. We will \ninvestigate your question, respond to your inquiry, and attempt to \nresolve any concerns regarding your privacy question. If you do not \nreceive acknowledgement of your complaint or if your complaint is not \nsatisfactorily addressed by OLX, you should then contact the Council of \nBetter Business Bureaus, Inc. as set forth below.</p>\n<p>In compliance with the US-EU Safe Harbor Principles, OLX commits to \nresolve complaints about your privacy and our collection or use of your \npersonal information. European Union citizens with inquiries or \ncomplaints regarding this privacy policy should first contact OLX as \ndescribed in the “How to Contact Us” section.</p>\n<p>OLX has further committed to refer unresolved privacy complaints \nunder the US-EU Safe Harbor Principles to an independent dispute \nresolution mechanism, the BBB EU SAFE HARBOR, operated by the Council of\n Better Business Bureaus. If you do not receive timely acknowledgment of\n your complaint, or if your complaint is not satisfactorily addressed by\n OLX, please visit the BBB EU SAFE HARBOR web site at \nwww.bbb.org/us/safe-harbor-complaints for more information and to file a\n complaint.</p>\n\n<p><u>L.How to Contact Us</u></p>\n<p>If you have questions about this Privacy Policy, please contact OLX <a href=\"http://www.olx.com/contacts.php?fv[contact]=ContactLegalIssues\">via the Legal Issues report form</a> with “Privacy Policy” in the subject line.</p>\n</li><p></p>\n    </div>\n</section>";
  });

templates["standard/partials/head"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<title>Arwen STANDARD Layout</title>\n<meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable: no\" />\n<link href=\"/css/html4/styles.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\" />\n";
  });

templates["standard/partials/header"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class='logo'>\n    <div id=\"header\">\n        <h1><a href=\"/\">OLX.com</a></h1>\n        <ul>\n		    <li class=\"post\"><a href=\"/item/post/category\" title=\"Sell\">Publicar</a></li>\n		    <li class=\"sign-in no-loged\"><a href=\"/auth/login\" title=\"Mi OLX\">Entrar</a></li>\n		</ul>\n    </div>\n</div>\n";
  });

templates["standard/partials/layout"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, helperMissing=helpers.helperMissing, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n	<head>\n	    ";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "standard/partials/head", options) : helperMissing.call(depth0, "partial", "standard/partials/head", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n	</head>\n	<body>\n		";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "standard/partials/header", options) : helperMissing.call(depth0, "partial", "standard/partials/header", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		";
  stack1 = (helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},data:data},helper ? helper.call(depth0, "standard/partials/search", options) : helperMissing.call(depth0, "partial", "standard/partials/search", options));
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		";
  if (helper = helpers.body) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.body); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n		"
    + escapeExpression((helper = helpers.view || (depth0 && depth0.view),options={hash:{},data:data},helper ? helper.call(depth0, "footer/index", options) : helperMissing.call(depth0, "view", "footer/index", options)))
    + "\n	</body>\n</html>\n";
  return buffer;
  });

templates["standard/partials/search"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div id=\"search\">\n    <form action=\"<?= $searchLink ?>\">\n		<span>\n			<a href=\"/location/page/1\">";
  if (helper = helpers.siteLocation) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.siteLocation); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</a>\n			<a href=\"/location/page/1\" class=\"select-city\">Selecciona una ciudad</a>\n		</span>\n        <fieldset>\n        	<input id=\"searchField\" type=\"text\" class=\"text\" value=\"\" name=\"search\"/>\n        	<input id=\"searchSubmit\" type=\"submit\" class=\"submit\" value=\"Buscar\" name=\"search_button\"/>\n			<div class=\"what-are-you-looking-for\">&iquest;Qu&eacute; est&aacute;s buscando?</div>\n        </fieldset>\n    </form>\n</div>";
  return buffer;
  });

return templates;

};
},{}],"5syn3K":[function(require,module,exports){
'use strict';

var BaseAppView = require('rendr/client/app_view');

var $body = $('body');

module.exports = BaseAppView.extend({
    className: 'app_view_index_view',
    events:{
        'click .navLeft': 'toggleLeftPanel',
        'click #overlay': 'toggleLeftPanel',
        'click #toggle-search': 'toggleSearch',
        'click nav#leftPanel li a': 'toggleLeftPanel'
    },
    initialize: function() {
        this.app.on('change:loading', function onLoading(app, loading) {
            $body.toggleClass('loading', loading);
        }, this);
        $('#search-bar').change(function(){
            window.location = 'search?location=' + this.app.getSession('siteLocation') + '&q=' + $('#search-bar').val();
        });
        $('nav div').css('height' , ($(window).height() - $('header').height()) + 'px');
        $(window).resize(function onResize() {
            $('nav div').css('height', ($(window).height() - $('header').height()) + 'px');
        });
    },
    toggleLeftPanel: function(event) {
        event.preventDefault();
        $('article nav').toggleClass('open');
        $('#overlay').fadeToggle();
        $('body').toggleClass('noscroll');
    },
    toggleSearch: function(event){
        if (event) {
            event.preventDefault();
        }
        $('#search-container').toggle();
        if ($('#search-container').is(':visible')){
            $('#search-bar').focus();

            //$('#toggle-search .ui-btn-text').text('Cancel');
        }
        else {
            $('#search-bar').val('');

            //$('#toggle-search .ui-btn-text').text('Search');
        }
    }
});

module.exports.id = 'app_view/index';

},{"rendr/client/app_view":165}],"app/views/app_view":[function(require,module,exports){
module.exports=require('5syn3K');
},{}],"app/views/base":[function(require,module,exports){
module.exports=require('6kWBjj');
},{}],"6kWBjj":[function(require,module,exports){
'use strict';

var RendrView = require('rendr/shared/base/view');
var _ = require('underscore');
var helpers = require('../helpers');

module.exports = RendrView.extend({
    getTemplate: function(){
        var template = this.app.getSession('template');
        var name = this.name;

        return this.app.templateAdapter.getTemplate(template + '/' + name);
    },
    getTemplateData: function() {
        var data = RendrView.prototype.getTemplateData.call(this);

        return _.extend({}, data, {
            analyticsImgUrls: helpers.analytics.imgUrls(this.app.getSession(), data)
        });
    },
});

},{"../helpers":"xxG+1D","rendr/shared/base/view":174,"underscore":181}],"app/views/categories/index":[function(require,module,exports){
module.exports=require('Zl+PJS');
},{}],"Zl+PJS":[function(require,module,exports){
'use strict';

var BaseView = require('../base');

module.exports = BaseView.extend({
    className: 'categories_index_view'
});

module.exports.id = 'categories/index';

},{"../base":"6kWBjj"}],"QNAum6":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'categories_menu_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        return _.extend({}, data, {
            categories: this.app.getSession('categories'),
            siteLocation: this.app.getSession('siteLocation')
        });
    },
});

module.exports.id = 'categories/menu';

},{"../base":"6kWBjj","underscore":181}],"app/views/categories/menu":[function(require,module,exports){
module.exports=require('QNAum6');
},{}],"app/views/categories/show":[function(require,module,exports){
module.exports=require('9GHdMD');
},{}],"9GHdMD":[function(require,module,exports){
'use strict';

var BaseView = require('../base');

module.exports = BaseView.extend({
    className: 'categories_show_view'
});

module.exports.id = 'categories/show';

},{"../base":"6kWBjj"}],"en/BbC":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');
var helpers = require('../../helpers');

module.exports = BaseView.extend({
    className: 'footer_index_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);
        var app = helpers.environment.init(this.app);
        var marketing = helpers.marketing.getInfo(app.getSession('marketing'),'footer',app.getSession('platform'));

        return _.extend({}, data, {
            marketing: marketing
        });
    }
});

module.exports.id = 'footer/index';
},{"../../helpers":"xxG+1D","../base":"6kWBjj","underscore":181}],"app/views/footer/index":[function(require,module,exports){
module.exports=require('en/BbC');
},{}],"to5G6a":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');
var helpers = require('../../helpers');

module.exports = BaseView.extend({
    className: 'home_index_view',
    processItem: function(item) {
        var year = item.date.year;
        var month = item.date.month - 1;
        var day = item.date.day;
        var hour = item.date.hour;
        var minute = item.date.minute;
        var second = item.date.second;
        var date = new Date(year, month, day, hour, minute, second);

        item.date.since = helpers.timeAgo(date);
    },
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        _.each(data.whatsNewItems, this.processItem);
        return _.extend({}, data, {
            user: this.app.getSession('user'),
            location: this.app.getSession('location'),
            template: this.app.getSession('template'),
            languages: this.app.getSession('languages'),
            selectedLanguage: this.app.getSession('selectedLanguage')
        });
    },
    postRender: function(){
        var swiperAds = $('.swiper-containerAds').swiper({
            mode:'horizontal',
            slidesPerView: 3,
            preventLinks:false
        });
        var swiperCats = $('.swiper-containerCats').swiper({
            mode:'horizontal',
            slidesPerView: 4,
            preventLinks:false
        });
        $(window).on('resize', this.resize).trigger('resize');
    },
    remove: function() {
        $(window).off('resize', this.resize);
        BaseView.prototype.remove.apply(this, arguments);
    },
    resize: function() {
        helpers.fitText($('section#newAds .swiper-containerAds .caption') , 0.9 , {
            minFontSize: '9px',
            maxFontSize: '30px'
        });
        helpers.fitText($('section#categories .swiper-containerCats .slide div p') , 0.7 , {
            minFontSize: '9px',
            maxFontSize: '30px'
        });
    }
});

module.exports.id = 'home/index';

},{"../../helpers":"xxG+1D","../base":"6kWBjj","underscore":181}],"app/views/home/index":[function(require,module,exports){
module.exports=require('to5G6a');
},{}],"app/views/items/index":[function(require,module,exports){
module.exports=require('m04hvl');
},{}],"m04hvl":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');
var helpers = require('../../helpers');

module.exports = BaseView.extend({
    className: 'items_index_view',
    processItem: function(item) {
        var year = item.date.year;
        var month = item.date.month - 1;
        var day = item.date.day;
        var hour = item.date.hour;
        var minute = item.date.minute;
        var second = item.date.second;
        var date = new Date(year, month, day, hour, minute, second);

        item.date.since = helpers.timeAgo(date);
    },
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        _.each(data.items, this.processItem);
        return _.extend({}, data);
    }
});

module.exports.id = 'items/index';

},{"../../helpers":"xxG+1D","../base":"6kWBjj","underscore":181}],"app/views/items/reply":[function(require,module,exports){
module.exports=require('UHE96j');
},{}],"UHE96j":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'items_reply_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        return _.extend({}, data, {});
    }
});

module.exports.id = 'items/reply';

},{"../base":"6kWBjj","underscore":181}],"5FbKVL":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'items_search_view'
});

module.exports.id = 'items/search';

},{"../base":"6kWBjj","underscore":181}],"app/views/items/search":[function(require,module,exports){
module.exports=require('5FbKVL');
},{}],"2M0Ez6":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'items_show_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);
        data.category_name = this.options.category_name;
        data.item.location.cityName = data.item.location.children[0].children[0].name;
        data.item.description = data.item.description.replace(/(<([^>]+)>)/ig,'');
        return data;
    },
    postRender: function() {
        var mySwiper = $('.swiper-containerItem').swiper({
            mode:'horizontal',
            loop: true,
            pagination: '.slidePagination',
            paginationClickable: true,
            initialSlide: 0
        });
        $(window).on('resize', this.resize).trigger('resize');
    },
    remove: function() {
        $(window).off('resize', this.resize);
        BaseView.prototype.remove.apply(this, arguments);
    },
    resize: function() {
        $('section#itemPage').css('margin-bottom' , ($('#actions').height()+20)+'px');
        var paginationCount = $('.slidePagination span').length + 2;
        var windowSize = $(window).width();
        var paginationWidth = windowSize / paginationCount;
        var paginationMargin = paginationWidth / paginationCount;
        paginationWidth = paginationWidth - paginationMargin;
        $('.slidePagination span').css('width' , paginationWidth+'px');
        $('.slidePagination span').css('margin' , '0 '+paginationMargin+'px');
    }
});

module.exports.id = 'items/show';

},{"../base":"6kWBjj","underscore":181}],"app/views/items/show":[function(require,module,exports){
module.exports=require('2M0Ez6');
},{}],"app/views/left-panel/index":[function(require,module,exports){
module.exports=require('dLSvQ1');
},{}],"dLSvQ1":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'left-panel_index_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        return _.extend({}, data, {
            categories: this.app.getSession('categories'),
            siteLocation: this.app.getSession('siteLocation'),
            user: this.app.getSession('user')
        });
    }
});

module.exports.id = 'left-panel/index';

},{"../base":"6kWBjj","underscore":181}],"1FSS45":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'location_index_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        return _.extend({}, data, {
            location: this.app.getSession('location')
        });
    }
});

module.exports.id = 'location/index';

},{"../base":"6kWBjj","underscore":181}],"app/views/location/index":[function(require,module,exports){
module.exports=require('1FSS45');
},{}],"0CtdAT":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'location_select_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        return _.extend({}, data, {
            location: this.app.getSession('location')
        });
    }
});

module.exports.id = 'location/select';

},{"../base":"6kWBjj","underscore":181}],"app/views/location/select":[function(require,module,exports){
module.exports=require('0CtdAT');
},{}],"app/views/pages/terms":[function(require,module,exports){
module.exports=require('NowQlh');
},{}],"NowQlh":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'pages_terms_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        return _.extend({}, data, {});
    }
});

module.exports.id = 'pages/terms';

},{"../base":"6kWBjj","underscore":181}],"app/views/post/form":[function(require,module,exports){
module.exports=require('QdN7bT');
},{}],"QdN7bT":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'post_form_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        return _.extend({}, data, {});
    }
});

module.exports.id = 'post/form';

},{"../base":"6kWBjj","underscore":181}],"Zd0Zi3":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'post_home_select_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        return _.extend({}, data, {
            location: this.app.getSession('location')
        });
    }
});

module.exports.id = 'post/home_select';

},{"../base":"6kWBjj","underscore":181}],"app/views/post/home_select":[function(require,module,exports){
module.exports=require('Zd0Zi3');
},{}],"b4bJNE":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'post_index_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        return _.extend({}, data, {
            'location': this.app.getSession('location'),
            'categories': this.app.getSession('categories'),
        });
    }
});

module.exports.id = 'post/index';

},{"../base":"6kWBjj","underscore":181}],"app/views/post/index":[function(require,module,exports){
module.exports=require('b4bJNE');
},{}],"app/views/post/subcat":[function(require,module,exports){
module.exports=require('P+LSW/');
},{}],"P+LSW/":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'post_subcat_view',
    
});

module.exports.id = 'post/subcat';
},{"../base":"6kWBjj","underscore":181}],"oOQY32":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'user_favorites_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        return _.extend({}, data, {});
    }
});

module.exports.id = 'user/favorites';

},{"../base":"6kWBjj","underscore":181}],"app/views/user/favorites":[function(require,module,exports){
module.exports=require('oOQY32');
},{}],"rQi5xY":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'user_login_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);
        var params = this.options.params;

        if (params.err) {
            params.err = params.err.split(',');
        }
        if (params.errFields) {
            params.errFields = params.errFields.split(',');
        }
        return _.extend({}, data, {
            params: params
        });
    }
});

module.exports.id = 'user/login';

},{"../base":"6kWBjj","underscore":181}],"app/views/user/login":[function(require,module,exports){
module.exports=require('rQi5xY');
},{}],"W8ZCb6":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'user_myads_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);

        return _.extend({}, data, {});
    }
});

module.exports.id = 'user/my-ads';

},{"../base":"6kWBjj","underscore":181}],"app/views/user/my-ads":[function(require,module,exports){
module.exports=require('W8ZCb6');
},{}],"app/views/user/registration":[function(require,module,exports){
module.exports=require('C+oG3G');
},{}],"C+oG3G":[function(require,module,exports){
'use strict';

var BaseView = require('../base');
var _ = require('underscore');

module.exports = BaseView.extend({
    className: 'user_registration_view',
    getTemplateData: function() {
        var data = BaseView.prototype.getTemplateData.call(this);
        var params = this.options.params;

        if (params.err && typeof params.err === 'string') {
            params.err = params.err.split(',');
        }
        if (params.errFields && typeof params.errFields === 'string') {
            params.errFields = params.errFields.split(',');
        }
        return _.extend({}, data, {
            location: this.app.getSession('siteLocation'),
            user: this.app.getSession('user'),
            params: params
        });
    }
});

module.exports.id = 'user/registration';

},{"../base":"6kWBjj","underscore":181}],119:[function(require,module,exports){

},{}],120:[function(require,module,exports){
/**
 * The buffer module from node.js, for the browser.
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install buffer`
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
   // Detect if browser supports Typed Arrays. Supported browsers are IE 10+,
   // Firefox 4+, Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+.
  if (typeof Uint8Array !== 'function' || typeof ArrayBuffer !== 'function')
    return false

  // Does the browser support adding properties to `Uint8Array` instances? If
  // not, then that's the same as no `Uint8Array` support. We need to be able to
  // add all the node Buffer API methods.
  // Bug in Firefox 4-29, now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var arr = new Uint8Array(0)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // Assume object is an array
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof Uint8Array === 'function' &&
      subject instanceof Uint8Array) {
    // Speed optimization -- use set if we're copying from a Uint8Array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  // copy!
  for (var i = 0; i < end - start; i++)
    target[i + target_start] = this[i + start]
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array === 'function') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment the Uint8Array *instance* (not the class!) with Buffer methods
 */
function augment (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

},{"base64-js":121,"ieee754":122}],121:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var ZERO   = '0'.charCodeAt(0)
	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	module.exports.toByteArray = b64ToByteArray
	module.exports.fromByteArray = uint8ToBase64
}())

},{}],122:[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],123:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        throw TypeError('Uncaught, unspecified "error" event.');
      }
      return false;
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      console.trace();
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],124:[function(require,module,exports){
var http = module.exports;
var EventEmitter = require('events').EventEmitter;
var Request = require('./lib/request');
var url = require('url')

http.request = function (params, cb) {
    if (typeof params === 'string') {
        params = url.parse(params)
    }
    if (!params) params = {};
    if (!params.host && !params.port) {
        params.port = parseInt(window.location.port, 10);
    }
    if (!params.host && params.hostname) {
        params.host = params.hostname;
    }
    
    if (!params.scheme) params.scheme = window.location.protocol.split(':')[0];
    if (!params.host) {
        params.host = window.location.hostname || window.location.host;
    }
    if (/:/.test(params.host)) {
        if (!params.port) {
            params.port = params.host.split(':')[1];
        }
        params.host = params.host.split(':')[0];
    }
    if (!params.port) params.port = params.scheme == 'https' ? 443 : 80;
    
    var req = new Request(new xhrHttp, params);
    if (cb) req.on('response', cb);
    return req;
};

http.get = function (params, cb) {
    params.method = 'GET';
    var req = http.request(params, cb);
    req.end();
    return req;
};

http.Agent = function () {};
http.Agent.defaultMaxSockets = 4;

var xhrHttp = (function () {
    if (typeof window === 'undefined') {
        throw new Error('no window object present');
    }
    else if (window.XMLHttpRequest) {
        return window.XMLHttpRequest;
    }
    else if (window.ActiveXObject) {
        var axs = [
            'Msxml2.XMLHTTP.6.0',
            'Msxml2.XMLHTTP.3.0',
            'Microsoft.XMLHTTP'
        ];
        for (var i = 0; i < axs.length; i++) {
            try {
                var ax = new(window.ActiveXObject)(axs[i]);
                return function () {
                    if (ax) {
                        var ax_ = ax;
                        ax = null;
                        return ax_;
                    }
                    else {
                        return new(window.ActiveXObject)(axs[i]);
                    }
                };
            }
            catch (e) {}
        }
        throw new Error('ajax not supported in this browser')
    }
    else {
        throw new Error('ajax not supported in this browser');
    }
})();

http.STATUS_CODES = {
    100 : 'Continue',
    101 : 'Switching Protocols',
    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918
    200 : 'OK',
    201 : 'Created',
    202 : 'Accepted',
    203 : 'Non-Authoritative Information',
    204 : 'No Content',
    205 : 'Reset Content',
    206 : 'Partial Content',
    207 : 'Multi-Status',               // RFC 4918
    300 : 'Multiple Choices',
    301 : 'Moved Permanently',
    302 : 'Moved Temporarily',
    303 : 'See Other',
    304 : 'Not Modified',
    305 : 'Use Proxy',
    307 : 'Temporary Redirect',
    400 : 'Bad Request',
    401 : 'Unauthorized',
    402 : 'Payment Required',
    403 : 'Forbidden',
    404 : 'Not Found',
    405 : 'Method Not Allowed',
    406 : 'Not Acceptable',
    407 : 'Proxy Authentication Required',
    408 : 'Request Time-out',
    409 : 'Conflict',
    410 : 'Gone',
    411 : 'Length Required',
    412 : 'Precondition Failed',
    413 : 'Request Entity Too Large',
    414 : 'Request-URI Too Large',
    415 : 'Unsupported Media Type',
    416 : 'Requested Range Not Satisfiable',
    417 : 'Expectation Failed',
    418 : 'I\'m a teapot',              // RFC 2324
    422 : 'Unprocessable Entity',       // RFC 4918
    423 : 'Locked',                     // RFC 4918
    424 : 'Failed Dependency',          // RFC 4918
    425 : 'Unordered Collection',       // RFC 4918
    426 : 'Upgrade Required',           // RFC 2817
    428 : 'Precondition Required',      // RFC 6585
    429 : 'Too Many Requests',          // RFC 6585
    431 : 'Request Header Fields Too Large',// RFC 6585
    500 : 'Internal Server Error',
    501 : 'Not Implemented',
    502 : 'Bad Gateway',
    503 : 'Service Unavailable',
    504 : 'Gateway Time-out',
    505 : 'HTTP Version Not Supported',
    506 : 'Variant Also Negotiates',    // RFC 2295
    507 : 'Insufficient Storage',       // RFC 4918
    509 : 'Bandwidth Limit Exceeded',
    510 : 'Not Extended',               // RFC 2774
    511 : 'Network Authentication Required' // RFC 6585
};
},{"./lib/request":125,"events":123,"url":142}],125:[function(require,module,exports){
var Stream = require('stream');
var Response = require('./response');
var Base64 = require('Base64');
var inherits = require('inherits');

var Request = module.exports = function (xhr, params) {
    var self = this;
    self.writable = true;
    self.xhr = xhr;
    self.body = [];
    
    self.uri = (params.scheme || 'http') + '://'
        + params.host
        + (params.port ? ':' + params.port : '')
        + (params.path || '/')
    ;
    
    if (typeof params.withCredentials === 'undefined') {
        params.withCredentials = true;
    }

    try { xhr.withCredentials = params.withCredentials }
    catch (e) {}
    
    xhr.open(
        params.method || 'GET',
        self.uri,
        true
    );

    self._headers = {};
    
    if (params.headers) {
        var keys = objectKeys(params.headers);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!self.isSafeRequestHeader(key)) continue;
            var value = params.headers[key];
            self.setHeader(key, value);
        }
    }
    
    if (params.auth) {
        //basic auth
        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));
    }

    var res = new Response;
    res.on('close', function () {
        self.emit('close');
    });
    
    res.on('ready', function () {
        self.emit('response', res);
    });
    
    xhr.onreadystatechange = function () {
        // Fix for IE9 bug
        // SCRIPT575: Could not complete the operation due to error c00c023f
        // It happens when a request is aborted, calling the success callback anyway with readyState === 4
        if (xhr.__aborted) return;
        res.handle(xhr);
    };
};

inherits(Request, Stream);

Request.prototype.setHeader = function (key, value) {
    this._headers[key.toLowerCase()] = value
};

Request.prototype.getHeader = function (key) {
    return this._headers[key.toLowerCase()]
};

Request.prototype.removeHeader = function (key) {
    delete this._headers[key.toLowerCase()]
};

Request.prototype.write = function (s) {
    this.body.push(s);
};

Request.prototype.destroy = function (s) {
    this.xhr.__aborted = true;
    this.xhr.abort();
    this.emit('close');
};

Request.prototype.end = function (s) {
    if (s !== undefined) this.body.push(s);

    var keys = objectKeys(this._headers);
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = this._headers[key];
        if (isArray(value)) {
            for (var j = 0; j < value.length; j++) {
                this.xhr.setRequestHeader(key, value[j]);
            }
        }
        else this.xhr.setRequestHeader(key, value)
    }

    if (this.body.length === 0) {
        this.xhr.send('');
    }
    else if (typeof this.body[0] === 'string') {
        this.xhr.send(this.body.join(''));
    }
    else if (isArray(this.body[0])) {
        var body = [];
        for (var i = 0; i < this.body.length; i++) {
            body.push.apply(body, this.body[i]);
        }
        this.xhr.send(body);
    }
    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
        var len = 0;
        for (var i = 0; i < this.body.length; i++) {
            len += this.body[i].length;
        }
        var body = new(this.body[0].constructor)(len);
        var k = 0;
        
        for (var i = 0; i < this.body.length; i++) {
            var b = this.body[i];
            for (var j = 0; j < b.length; j++) {
                body[k++] = b[j];
            }
        }
        this.xhr.send(body);
    }
    else {
        var body = '';
        for (var i = 0; i < this.body.length; i++) {
            body += this.body[i].toString();
        }
        this.xhr.send(body);
    }
};

// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
Request.unsafeHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "cookie",
    "cookie2",
    "content-transfer-encoding",
    "date",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "user-agent",
    "via"
];

Request.prototype.isSafeRequestHeader = function (headerName) {
    if (!headerName) return false;
    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
};

var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

var indexOf = function (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
};

},{"./response":126,"Base64":127,"inherits":128,"stream":135}],126:[function(require,module,exports){
var Stream = require('stream');
var util = require('util');

var Response = module.exports = function (res) {
    this.offset = 0;
    this.readable = true;
};

util.inherits(Response, Stream);

var capable = {
    streaming : true,
    status2 : true
};

function parseHeaders (res) {
    var lines = res.getAllResponseHeaders().split(/\r?\n/);
    var headers = {};
    for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        if (line === '') continue;
        
        var m = line.match(/^([^:]+):\s*(.*)/);
        if (m) {
            var key = m[1].toLowerCase(), value = m[2];
            
            if (headers[key] !== undefined) {
            
                if (isArray(headers[key])) {
                    headers[key].push(value);
                }
                else {
                    headers[key] = [ headers[key], value ];
                }
            }
            else {
                headers[key] = value;
            }
        }
        else {
            headers[line] = true;
        }
    }
    return headers;
}

Response.prototype.getResponse = function (xhr) {
    var respType = String(xhr.responseType).toLowerCase();
    if (respType === 'blob') return xhr.responseBlob || xhr.response;
    if (respType === 'arraybuffer') return xhr.response;
    return xhr.responseText;
}

Response.prototype.getHeader = function (key) {
    return this.headers[key.toLowerCase()];
};

Response.prototype.handle = function (res) {
    if (res.readyState === 2 && capable.status2) {
        try {
            this.statusCode = res.status;
            this.headers = parseHeaders(res);
        }
        catch (err) {
            capable.status2 = false;
        }
        
        if (capable.status2) {
            this.emit('ready');
        }
    }
    else if (capable.streaming && res.readyState === 3) {
        try {
            if (!this.statusCode) {
                this.statusCode = res.status;
                this.headers = parseHeaders(res);
                this.emit('ready');
            }
        }
        catch (err) {}
        
        try {
            this._emitData(res);
        }
        catch (err) {
            capable.streaming = false;
        }
    }
    else if (res.readyState === 4) {
        if (!this.statusCode) {
            this.statusCode = res.status;
            this.emit('ready');
        }
        this._emitData(res);
        
        if (res.error) {
            this.emit('error', this.getResponse(res));
        }
        else this.emit('end');
        
        this.emit('close');
    }
};

Response.prototype._emitData = function (res) {
    var respBody = this.getResponse(res);
    if (respBody.toString().match(/ArrayBuffer/)) {
        this.emit('data', new Uint8Array(respBody, this.offset));
        this.offset = respBody.byteLength;
        return;
    }
    if (respBody.length > this.offset) {
        this.emit('data', respBody.slice(this.offset));
        this.offset = respBody.length;
    }
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

},{"stream":135,"util":144}],127:[function(require,module,exports){
;(function () {

  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers
  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  function InvalidCharacterError(message) {
    this.message = message;
  }
  InvalidCharacterError.prototype = new Error;
  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

  // encoder
  // [https://gist.github.com/999166] by [https://github.com/nignag]
  object.btoa || (
  object.btoa = function (input) {
    for (
      // initialize result and counter
      var block, charCode, idx = 0, map = chars, output = '';
      // if the next input index does not exist:
      //   change the mapping table to "="
      //   check if d has no fractional digits
      input.charAt(idx | 0) || (map = '=', idx % 1);
      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
    ) {
      charCode = input.charCodeAt(idx += 3/4);
      if (charCode > 0xFF) {
        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
      }
      block = block << 8 | charCode;
    }
    return output;
  });

  // decoder
  // [https://gist.github.com/1020396] by [https://github.com/atk]
  object.atob || (
  object.atob = function (input) {
    input = input.replace(/=+$/, '')
    if (input.length % 4 == 1) {
      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
    }
    for (
      // initialize result and counters
      var bc = 0, bs, buffer, idx = 0, output = '';
      // get next character
      buffer = input.charAt(idx++);
      // character found in table? initialize bit storage and add its ascii value;
      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
        // and if not first of each 4 characters,
        // convert the first 8 bits to one ascii character
        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
    ) {
      // try to find character in table (0-63, not found => -1)
      buffer = chars.indexOf(buffer);
    }
    return output;
  });

}());

},{}],128:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],129:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],130:[function(require,module,exports){
(function (global){
/*! http://mths.be/punycode v1.2.4 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports;
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /\x2E|\u3002|\uFF0E|\uFF61/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		while (length--) {
			array[length] = fn(array[length]);
		}
		return array;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings.
	 * @private
	 * @param {String} domain The domain name.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		return map(string.split(regexSeparators), fn).join('.');
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <http://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols to a Punycode string of ASCII-only
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name to Unicode. Only the
	 * Punycoded parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it on a string that has already been converted to
	 * Unicode.
	 * @memberOf punycode
	 * @param {String} domain The Punycode domain name to convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(domain) {
		return mapDomain(domain, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name to Punycode. Only the
	 * non-ASCII parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it with a domain that's already in ASCII.
	 * @memberOf punycode
	 * @param {String} domain The domain name to convert, as a Unicode string.
	 * @returns {String} The Punycode representation of the given domain name.
	 */
	function toASCII(domain) {
		return mapDomain(domain, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.2.4',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <http://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],131:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],132:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return obj[k].map(function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],133:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":131,"./encode":132}],134:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;
var inherits = require('inherits');
var setImmediate = require('process/browser.js').nextTick;
var Readable = require('./readable.js');
var Writable = require('./writable.js');

inherits(Duplex, Readable);

Duplex.prototype.write = Writable.prototype.write;
Duplex.prototype.end = Writable.prototype.end;
Duplex.prototype._write = Writable.prototype._write;

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  var self = this;
  setImmediate(function () {
    self.end();
  });
}

},{"./readable.js":138,"./writable.js":140,"inherits":128,"process/browser.js":136}],135:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('./readable.js');
Stream.Writable = require('./writable.js');
Stream.Duplex = require('./duplex.js');
Stream.Transform = require('./transform.js');
Stream.PassThrough = require('./passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"./duplex.js":134,"./passthrough.js":137,"./readable.js":138,"./transform.js":139,"./writable.js":140,"events":123,"inherits":128}],136:[function(require,module,exports){
module.exports=require(129)
},{}],137:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./transform.js');
var inherits = require('inherits');
inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./transform.js":139,"inherits":128}],138:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;
Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;
var Stream = require('./index.js');
var Buffer = require('buffer').Buffer;
var setImmediate = require('process/browser.js').nextTick;
var StringDecoder;

var inherits = require('inherits');
inherits(Readable, Stream);

function ReadableState(options, stream) {
  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = false;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // In streams that never have any data, and do push(null) right away,
  // the consumer can miss the 'end' event if they do some I/O before
  // consuming the stream.  So, we don't emit('end') until some reading
  // happens.
  this.calledRead = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (typeof chunk === 'string' && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null || chunk === undefined) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) {
        state.buffer.unshift(chunk);
      } else {
        state.reading = false;
        state.buffer.push(chunk);
      }

      if (state.needReadable)
        emitReadable(stream);

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || n === null) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  var state = this._readableState;
  state.calledRead = true;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;

  // if we currently have less than the highWaterMark, then also read some
  if (state.length - n <= state.highWaterMark)
    doRead = true;

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading)
    doRead = false;

  if (doRead) {
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read called its callback synchronously, then `reading`
  // will be false, and we need to re-evaluate how much data we
  // can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we happened to read() exactly the remaining amount in the
  // buffer, and the EOF has been seen at this point, then make sure
  // that we emit 'end' on the very next tick.
  if (state.ended && !state.endEmitted && state.length === 0)
    endReadable(this);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode &&
      !er) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // if we've ended and we have some data left, then emit
  // 'readable' now to make sure it gets picked up.
  if (state.length > 0)
    emitReadable(stream);
  else
    endReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (state.emittedReadable)
    return;

  state.emittedReadable = true;
  if (state.sync)
    setImmediate(function() {
      emitReadable_(stream);
    });
  else
    emitReadable_(stream);
}

function emitReadable_(stream) {
  stream.emit('readable');
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    setImmediate(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    setImmediate(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    if (readable !== src) return;
    cleanup();
  }

  function onend() {
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (!dest._writableState || dest._writableState.needDrain)
      ondrain();
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  // check for listeners before emit removes one-time listeners.
  var errListeners = EE.listenerCount(dest, 'error');
  function onerror(er) {
    unpipe();
    if (errListeners === 0 && EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  dest.once('error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    // the handler that waits for readable events after all
    // the data gets sucked out in flow.
    // This would be easier to follow with a .once() handler
    // in flow(), but that is too slow.
    this.on('readable', pipeOnReadable);

    state.flowing = true;
    setImmediate(function() {
      flow(src);
    });
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var dest = this;
    var state = src._readableState;
    state.awaitDrain--;
    if (state.awaitDrain === 0)
      flow(src);
  };
}

function flow(src) {
  var state = src._readableState;
  var chunk;
  state.awaitDrain = 0;

  function write(dest, i, list) {
    var written = dest.write(chunk);
    if (false === written) {
      state.awaitDrain++;
    }
  }

  while (state.pipesCount && null !== (chunk = src.read())) {

    if (state.pipesCount === 1)
      write(state.pipes, 0, null);
    else
      forEach(state.pipes, write);

    src.emit('data', chunk);

    // if anyone needs a drain, then we have to wait for that.
    if (state.awaitDrain > 0)
      return;
  }

  // if every destination was unpiped, either before entering this
  // function, or in the while loop, then stop flowing.
  //
  // NB: This is a pretty rare edge case.
  if (state.pipesCount === 0) {
    state.flowing = false;

    // if there were data event listeners added, then switch to old mode.
    if (EE.listenerCount(src, 'data') > 0)
      emitDataEvents(src);
    return;
  }

  // at this point, no one needed a drain, so we just ran out of data
  // on the next readable event, start it over again.
  state.ranOut = true;
}

function pipeOnReadable() {
  if (this._readableState.ranOut) {
    this._readableState.ranOut = false;
    flow(this);
  }
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data' && !this._readableState.flowing)
    emitDataEvents(this);

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        this.read(0);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  emitDataEvents(this);
  this.read(0);
  this.emit('resume');
};

Readable.prototype.pause = function() {
  emitDataEvents(this, true);
  this.emit('pause');
};

function emitDataEvents(stream, startPaused) {
  var state = stream._readableState;

  if (state.flowing) {
    // https://github.com/isaacs/readable-stream/issues/16
    throw new Error('Cannot switch to old mode now.');
  }

  var paused = startPaused || false;
  var readable = false;

  // convert to an old-style stream.
  stream.readable = true;
  stream.pipe = Stream.prototype.pipe;
  stream.on = stream.addListener = Stream.prototype.on;

  stream.on('readable', function() {
    readable = true;

    var c;
    while (!paused && (null !== (c = stream.read())))
      stream.emit('data', c);

    if (c === null) {
      readable = false;
      stream._readableState.needReadable = true;
    }
  });

  stream.pause = function() {
    paused = true;
    this.emit('pause');
  };

  stream.resume = function() {
    paused = false;
    if (readable)
      setImmediate(function() {
        stream.emit('readable');
      });
    else
      this.read(0);
    this.emit('resume');
  };

  // now make it start, just in case it hadn't already.
  stream.emit('readable');
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (typeof stream[i] === 'function' &&
        typeof this[i] === 'undefined') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, function (x) {
      return self.emit.apply(self, ev, x);
    });
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted && state.calledRead) {
    state.ended = true;
    setImmediate(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require("/home/mauricio/src/arwen/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"))
},{"./index.js":135,"/home/mauricio/src/arwen/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":129,"buffer":120,"events":123,"inherits":128,"process/browser.js":136,"string_decoder":141}],139:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./duplex.js');
var inherits = require('inherits');
inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  var ts = this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('finish', function() {
    if ('function' === typeof this._flush)
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var rs = stream._readableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./duplex.js":134,"inherits":128}],140:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;
Writable.WritableState = WritableState;

var isUint8Array = typeof Uint8Array !== 'undefined'
  ? function (x) { return x instanceof Uint8Array }
  : function (x) {
    return x && x.constructor && x.constructor.name === 'Uint8Array'
  }
;
var isArrayBuffer = typeof ArrayBuffer !== 'undefined'
  ? function (x) { return x instanceof ArrayBuffer }
  : function (x) {
    return x && x.constructor && x.constructor.name === 'ArrayBuffer'
  }
;

var inherits = require('inherits');
var Stream = require('./index.js');
var setImmediate = require('process/browser.js').nextTick;
var Buffer = require('buffer').Buffer;

inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];
}

function Writable(options) {
  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Stream.Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  setImmediate(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    setImmediate(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (!Buffer.isBuffer(chunk) && isUint8Array(chunk))
    chunk = new Buffer(chunk);
  if (isArrayBuffer(chunk) && typeof Uint8Array !== 'undefined')
    chunk = new Buffer(new Uint8Array(chunk));
  
  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb))
    ret = writeOrBuffer(this, state, chunk, encoding, cb);

  return ret;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  state.needDrain = !ret;

  if (state.writing)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    setImmediate(function() {
      cb(er);
    });
  else
    cb(er);

  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished && !state.bufferProcessing && state.buffer.length)
      clearBuffer(stream, state);

    if (sync) {
      setImmediate(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  cb();
  if (finished)
    finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  for (var c = 0; c < state.buffer.length; c++) {
    var entry = state.buffer[c];
    var chunk = entry.chunk;
    var encoding = entry.encoding;
    var cb = entry.callback;
    var len = state.objectMode ? 1 : chunk.length;

    doWrite(stream, state, len, chunk, encoding, cb);

    // if we didn't call the onwrite immediately, then
    // it means that we need to wait until it does.
    // also, that means that the chunk and cb are currently
    // being processed, so move the buffer counter past them.
    if (state.writing) {
      c++;
      break;
    }
  }

  state.bufferProcessing = false;
  if (c < state.buffer.length)
    state.buffer = state.buffer.slice(c);
  else
    state.buffer.length = 0;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (typeof chunk !== 'undefined' && chunk !== null)
    this.write(chunk, encoding);

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    state.finished = true;
    stream.emit('finish');
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      setImmediate(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

},{"./index.js":135,"buffer":120,"inherits":128,"process/browser.js":136}],141:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

function assertEncoding(encoding) {
  if (encoding && !Buffer.isEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  this.charBuffer = new Buffer(6);
  this.charReceived = 0;
  this.charLength = 0;
};


StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  var offset = 0;

  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var i = (buffer.length >= this.charLength - this.charReceived) ?
                this.charLength - this.charReceived :
                buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, offset, i);
    this.charReceived += (i - offset);
    offset = i;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (i == buffer.length) return charStr;

    // otherwise cut off the characters end from the beginning of this buffer
    buffer = buffer.slice(i, buffer.length);
    break;
  }

  var lenIncomplete = this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - lenIncomplete, end);
    this.charReceived = lenIncomplete;
    end -= lenIncomplete;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    this.charBuffer.write(charStr.charAt(charStr.length - 1), this.encoding);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }

  return i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  var incomplete = this.charReceived = buffer.length % 2;
  this.charLength = incomplete ? 2 : 0;
  return incomplete;
}

function base64DetectIncompleteChar(buffer) {
  var incomplete = this.charReceived = buffer.length % 3;
  this.charLength = incomplete ? 3 : 0;
  return incomplete;
}

},{"buffer":120}],142:[function(require,module,exports){
/*jshint strict:true node:true es5:true onevar:true laxcomma:true laxbreak:true eqeqeq:true immed:true latedef:true*/
(function () {
  "use strict";

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var punycode = require('punycode');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '~', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(delims),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#']
      .concat(unwise).concat(autoEscape),
    nonAuthChars = ['/', '@', '?', '#'].concat(delims),
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[a-zA-Z0-9][a-z0-9A-Z_-]{0,62}$/,
    hostnamePartStart = /^([a-zA-Z0-9][a-z0-9A-Z_-]{0,62})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always have a path component.
    pathedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && typeof(url) === 'object' && url.href) return url;

  if (typeof url !== 'string') {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  var out = {},
      rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    out.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      out.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    // don't enforce full RFC correctness, just be unstupid about it.

    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the first @ sign, unless some non-auth character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    var atSign = rest.indexOf('@');
    if (atSign !== -1) {
      var auth = rest.slice(0, atSign);

      // there *may be* an auth
      var hasAuth = true;
      for (var i = 0, l = nonAuthChars.length; i < l; i++) {
        if (auth.indexOf(nonAuthChars[i]) !== -1) {
          // not a valid auth.  Something like http://foo.com/bar@baz/
          hasAuth = false;
          break;
        }
      }

      if (hasAuth) {
        // pluck off the auth portion.
        out.auth = decodeURIComponent(auth);
        rest = rest.substr(atSign + 1);
      }
    }

    var firstNonHost = -1;
    for (var i = 0, l = nonHostChars.length; i < l; i++) {
      var index = rest.indexOf(nonHostChars[i]);
      if (index !== -1 &&
          (firstNonHost < 0 || index < firstNonHost)) firstNonHost = index;
    }

    if (firstNonHost !== -1) {
      out.host = rest.substr(0, firstNonHost);
      rest = rest.substr(firstNonHost);
    } else {
      out.host = rest;
      rest = '';
    }

    // pull out port.
    var p = parseHost(out.host);
    var keys = Object.keys(p);
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      out[key] = p[key];
    }

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    out.hostname = out.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = out.hostname[0] === '[' &&
        out.hostname[out.hostname.length - 1] === ']';

    // validate a little.
    if (out.hostname.length > hostnameMaxLen) {
      out.hostname = '';
    } else if (!ipv6Hostname) {
      var hostparts = out.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            out.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    // hostnames are always lower case.
    out.hostname = out.hostname.toLowerCase();

    if (!ipv6Hostname) {
      // IDNA Support: Returns a puny coded representation of "domain".
      // It only converts the part of the domain name that
      // has non ASCII characters. I.e. it dosent matter if
      // you call it with a domain that already is in ASCII.
      var domainArray = out.hostname.split('.');
      var newOut = [];
      for (var i = 0; i < domainArray.length; ++i) {
        var s = domainArray[i];
        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
            'xn--' + punycode.encode(s) : s);
      }
      out.hostname = newOut.join('.');
    }

    out.host = (out.hostname || '') +
        ((out.port) ? ':' + out.port : '');
    out.href += out.host;

    // strip [ and ] from the hostname
    if (ipv6Hostname) {
      out.hostname = out.hostname.substr(1, out.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    out.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    out.search = rest.substr(qm);
    out.query = rest.substr(qm + 1);
    if (parseQueryString) {
      out.query = querystring.parse(out.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    out.search = '';
    out.query = {};
  }
  if (rest) out.pathname = rest;
  if (slashedProtocol[proto] &&
      out.hostname && !out.pathname) {
    out.pathname = '/';
  }

  //to support http.request
  if (out.pathname || out.search) {
    out.path = (out.pathname ? out.pathname : '') +
               (out.search ? out.search : '');
  }

  // finally, reconstruct the href based on what has been validated.
  out.href = urlFormat(out);
  return out;
}

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (typeof(obj) === 'string') obj = urlParse(obj);

  var auth = obj.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = obj.protocol || '',
      pathname = obj.pathname || '',
      hash = obj.hash || '',
      host = false,
      query = '';

  if (obj.host !== undefined) {
    host = auth + obj.host;
  } else if (obj.hostname !== undefined) {
    host = auth + (obj.hostname.indexOf(':') === -1 ?
        obj.hostname :
        '[' + obj.hostname + ']');
    if (obj.port) {
      host += ':' + obj.port;
    }
  }

  if (obj.query && typeof obj.query === 'object' &&
      Object.keys(obj.query).length) {
    query = querystring.stringify(obj.query);
  }

  var search = obj.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (obj.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  return protocol + host + pathname + search + hash;
}

function urlResolve(source, relative) {
  return urlFormat(urlResolveObject(source, relative));
}

function urlResolveObject(source, relative) {
  if (!source) return relative;

  source = urlParse(urlFormat(source), false, true);
  relative = urlParse(urlFormat(relative), false, true);

  // hash is always overridden, no matter what.
  source.hash = relative.hash;

  if (relative.href === '') {
    source.href = urlFormat(source);
    return source;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    relative.protocol = source.protocol;
    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[relative.protocol] &&
        relative.hostname && !relative.pathname) {
      relative.path = relative.pathname = '/';
    }
    relative.href = urlFormat(relative);
    return relative;
  }

  if (relative.protocol && relative.protocol !== source.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      relative.href = urlFormat(relative);
      return relative;
    }
    source.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      relative.pathname = relPath.join('/');
    }
    source.pathname = relative.pathname;
    source.search = relative.search;
    source.query = relative.query;
    source.host = relative.host || '';
    source.auth = relative.auth;
    source.hostname = relative.hostname || relative.host;
    source.port = relative.port;
    //to support http.request
    if (source.pathname !== undefined || source.search !== undefined) {
      source.path = (source.pathname ? source.pathname : '') +
                    (source.search ? source.search : '');
    }
    source.slashes = source.slashes || relative.slashes;
    source.href = urlFormat(source);
    return source;
  }

  var isSourceAbs = (source.pathname && source.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host !== undefined ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (source.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = source.pathname && source.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = source.protocol &&
          !slashedProtocol[source.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // source.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {

    delete source.hostname;
    delete source.port;
    if (source.host) {
      if (srcPath[0] === '') srcPath[0] = source.host;
      else srcPath.unshift(source.host);
    }
    delete source.host;
    if (relative.protocol) {
      delete relative.hostname;
      delete relative.port;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      delete relative.host;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    source.host = (relative.host || relative.host === '') ?
                      relative.host : source.host;
    source.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : source.hostname;
    source.search = relative.search;
    source.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    source.search = relative.search;
    source.query = relative.query;
  } else if ('search' in relative) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      source.hostname = source.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especialy happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = source.host && source.host.indexOf('@') > 0 ?
                       source.host.split('@') : false;
      if (authInHost) {
        source.auth = authInHost.shift();
        source.host = source.hostname = authInHost.shift();
      }
    }
    source.search = relative.search;
    source.query = relative.query;
    //to support http.request
    if (source.pathname !== undefined || source.search !== undefined) {
      source.path = (source.pathname ? source.pathname : '') +
                    (source.search ? source.search : '');
    }
    source.href = urlFormat(source);
    return source;
  }
  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    delete source.pathname;
    //to support http.request
    if (!source.search) {
      source.path = '/' + source.search;
    } else {
      delete source.path;
    }
    source.href = urlFormat(source);
    return source;
  }
  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (source.host || relative.host) && (last === '.' || last === '..') ||
      last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last == '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    source.hostname = source.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especialy happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = source.host && source.host.indexOf('@') > 0 ?
                     source.host.split('@') : false;
    if (authInHost) {
      source.auth = authInHost.shift();
      source.host = source.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (source.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  source.pathname = srcPath.join('/');
  //to support request.http
  if (source.pathname !== undefined || source.search !== undefined) {
    source.path = (source.pathname ? source.pathname : '') +
                  (source.search ? source.search : '');
  }
  source.auth = relative.auth || source.auth;
  source.slashes = source.slashes || relative.slashes;
  source.href = urlFormat(source);
  return source;
}

function parseHost(host) {
  var out = {};
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      out.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) out.hostname = host;
  return out;
}

}());

},{"punycode":130,"querystring":133}],143:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],144:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require("/home/mauricio/src/arwen/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":143,"/home/mauricio/src/arwen/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":129,"inherits":128}],"rendr-handlebars":[function(require,module,exports){
module.exports=require('k+WLb7');
},{}],"k+WLb7":[function(require,module,exports){
var Handlebars = require('handlebars');

module.exports = function(options){
  var localExports = {},
      templateFinder = require('./shared/templateFinder')(Handlebars);

  /**
   * Export the `Handlebars` object, so other modules can add helpers, partials, etc.
   */
  localExports.Handlebars = Handlebars;

  /**
   * `getTemplate` is available on both client and server.
   */
  localExports.getTemplate = templateFinder.getTemplate;

  /**
   * Expose `templatePatterns` for manipulating how `getTemplate` finds templates.
   */
  localExports.templatePatterns = templateFinder.templatePatterns;

  /**
   * The default pattern `/.+/` is very greedy; it matches anything, including nested paths.
   * To add rules that should match before this default rule, `unshift` them from this array.
   */
  localExports.templatePatterns.push({pattern: /.+/, src: options.entryPath + 'app/templates/compiledTemplates'})

  /**
   * `getLayout` should only be used on the server.
   */
  if (typeof window === 'undefined') {
    // server only, "hide" it from r.js compiler
    // by having require statement with variable
    var serverOnlyLayoutFinderPath = './server/layoutFinder';
    localExports.getLayout = require(serverOnlyLayoutFinderPath)(Handlebars).getLayout;
  } else {
    localExports.getLayout = function() {
      throw new Error('getLayout is only available on the server.');
    };
  }

  /**
   * Register helpers, available on both client and server.
   *
   * Export it so other modules can register helpers as well.
   */
  localExports.registerHelpers = function registerHelpers(helpersModule) {
    var helpers = helpersModule(Handlebars, localExports.getTemplate);

    for (var key in helpers) {
      if (!helpers.hasOwnProperty(key)) continue;
      Handlebars.registerHelper(key, helpers[key]);
    }
  };

  /**
   * Register the pre-bundled Rendr helpers.
   */
  var rendrHelpers = require('./shared/helpers');
  localExports.registerHelpers(rendrHelpers);

  return localExports;
}

},{"./shared/helpers":163,"./shared/templateFinder":164,"handlebars":161}],147:[function(require,module,exports){
"use strict";
/*globals Handlebars: true */
var Handlebars = require("./handlebars.runtime")["default"];

// Compiler imports
var AST = require("./handlebars/compiler/ast")["default"];
var Parser = require("./handlebars/compiler/base").parser;
var parse = require("./handlebars/compiler/base").parse;
var Compiler = require("./handlebars/compiler/compiler").Compiler;
var compile = require("./handlebars/compiler/compiler").compile;
var precompile = require("./handlebars/compiler/compiler").precompile;
var JavaScriptCompiler = require("./handlebars/compiler/javascript-compiler")["default"];

var _create = Handlebars.create;
var create = function() {
  var hb = _create();

  hb.compile = function(input, options) {
    return compile(input, options, hb);
  };
  hb.precompile = function (input, options) {
    return precompile(input, options, hb);
  };

  hb.AST = AST;
  hb.Compiler = Compiler;
  hb.JavaScriptCompiler = JavaScriptCompiler;
  hb.Parser = Parser;
  hb.parse = parse;

  return hb;
};

Handlebars = create();
Handlebars.create = create;

exports["default"] = Handlebars;
},{"./handlebars.runtime":148,"./handlebars/compiler/ast":150,"./handlebars/compiler/base":151,"./handlebars/compiler/compiler":152,"./handlebars/compiler/javascript-compiler":153}],148:[function(require,module,exports){
"use strict";
/*globals Handlebars: true */
var base = require("./handlebars/base");

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)
var SafeString = require("./handlebars/safe-string")["default"];
var Exception = require("./handlebars/exception")["default"];
var Utils = require("./handlebars/utils");
var runtime = require("./handlebars/runtime");

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
var create = function() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = SafeString;
  hb.Exception = Exception;
  hb.Utils = Utils;

  hb.VM = runtime;
  hb.template = function(spec) {
    return runtime.template(spec, hb);
  };

  return hb;
};

var Handlebars = create();
Handlebars.create = create;

exports["default"] = Handlebars;
},{"./handlebars/base":149,"./handlebars/exception":157,"./handlebars/runtime":158,"./handlebars/safe-string":159,"./handlebars/utils":160}],149:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];

var VERSION = "1.3.0";
exports.VERSION = VERSION;var COMPILER_REVISION = 4;
exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '>= 1.0.0'
};
exports.REVISION_CHANGES = REVISION_CHANGES;
var isArray = Utils.isArray,
    isFunction = Utils.isFunction,
    toString = Utils.toString,
    objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials) {
  this.helpers = helpers || {};
  this.partials = partials || {};

  registerDefaultHelpers(this);
}

exports.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: logger,
  log: log,

  registerHelper: function(name, fn, inverse) {
    if (toString.call(name) === objectType) {
      if (inverse || fn) { throw new Exception('Arg not supported with multiple helpers'); }
      Utils.extend(this.helpers, name);
    } else {
      if (inverse) { fn.not = inverse; }
      this.helpers[name] = fn;
    }
  },

  registerPartial: function(name, str) {
    if (toString.call(name) === objectType) {
      Utils.extend(this.partials,  name);
    } else {
      this.partials[name] = str;
    }
  }
};

function registerDefaultHelpers(instance) {
  instance.registerHelper('helperMissing', function(arg) {
    if(arguments.length === 2) {
      return undefined;
    } else {
      throw new Exception("Missing helper: '" + arg + "'");
    }
  });

  instance.registerHelper('blockHelperMissing', function(context, options) {
    var inverse = options.inverse || function() {}, fn = options.fn;

    if (isFunction(context)) { context = context.call(this); }

    if(context === true) {
      return fn(this);
    } else if(context === false || context == null) {
      return inverse(this);
    } else if (isArray(context)) {
      if(context.length > 0) {
        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      return fn(context);
    }
  });

  instance.registerHelper('each', function(context, options) {
    var fn = options.fn, inverse = options.inverse;
    var i = 0, ret = "", data;

    if (isFunction(context)) { context = context.call(this); }

    if (options.data) {
      data = createFrame(options.data);
    }

    if(context && typeof context === 'object') {
      if (isArray(context)) {
        for(var j = context.length; i<j; i++) {
          if (data) {
            data.index = i;
            data.first = (i === 0);
            data.last  = (i === (context.length-1));
          }
          ret = ret + fn(context[i], { data: data });
        }
      } else {
        for(var key in context) {
          if(context.hasOwnProperty(key)) {
            if(data) { 
              data.key = key; 
              data.index = i;
              data.first = (i === 0);
            }
            ret = ret + fn(context[key], {data: data});
            i++;
          }
        }
      }
    }

    if(i === 0){
      ret = inverse(this);
    }

    return ret;
  });

  instance.registerHelper('if', function(conditional, options) {
    if (isFunction(conditional)) { conditional = conditional.call(this); }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function(conditional, options) {
    return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});
  });

  instance.registerHelper('with', function(context, options) {
    if (isFunction(context)) { context = context.call(this); }

    if (!Utils.isEmpty(context)) return options.fn(context);
  });

  instance.registerHelper('log', function(context, options) {
    var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
    instance.log(level, context);
  });
}

var logger = {
  methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

  // State enum
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
  level: 3,

  // can be overridden in the host environment
  log: function(level, obj) {
    if (logger.level <= level) {
      var method = logger.methodMap[level];
      if (typeof console !== 'undefined' && console[method]) {
        console[method].call(console, obj);
      }
    }
  }
};
exports.logger = logger;
function log(level, obj) { logger.log(level, obj); }

exports.log = log;var createFrame = function(object) {
  var obj = {};
  Utils.extend(obj, object);
  return obj;
};
exports.createFrame = createFrame;
},{"./exception":157,"./utils":160}],150:[function(require,module,exports){
"use strict";
var Exception = require("../exception")["default"];

function LocationInfo(locInfo){
  locInfo = locInfo || {};
  this.firstLine   = locInfo.first_line;
  this.firstColumn = locInfo.first_column;
  this.lastColumn  = locInfo.last_column;
  this.lastLine    = locInfo.last_line;
}

var AST = {
  ProgramNode: function(statements, inverseStrip, inverse, locInfo) {
    var inverseLocationInfo, firstInverseNode;
    if (arguments.length === 3) {
      locInfo = inverse;
      inverse = null;
    } else if (arguments.length === 2) {
      locInfo = inverseStrip;
      inverseStrip = null;
    }

    LocationInfo.call(this, locInfo);
    this.type = "program";
    this.statements = statements;
    this.strip = {};

    if(inverse) {
      firstInverseNode = inverse[0];
      if (firstInverseNode) {
        inverseLocationInfo = {
          first_line: firstInverseNode.firstLine,
          last_line: firstInverseNode.lastLine,
          last_column: firstInverseNode.lastColumn,
          first_column: firstInverseNode.firstColumn
        };
        this.inverse = new AST.ProgramNode(inverse, inverseStrip, inverseLocationInfo);
      } else {
        this.inverse = new AST.ProgramNode(inverse, inverseStrip);
      }
      this.strip.right = inverseStrip.left;
    } else if (inverseStrip) {
      this.strip.left = inverseStrip.right;
    }
  },

  MustacheNode: function(rawParams, hash, open, strip, locInfo) {
    LocationInfo.call(this, locInfo);
    this.type = "mustache";
    this.strip = strip;

    // Open may be a string parsed from the parser or a passed boolean flag
    if (open != null && open.charAt) {
      // Must use charAt to support IE pre-10
      var escapeFlag = open.charAt(3) || open.charAt(2);
      this.escaped = escapeFlag !== '{' && escapeFlag !== '&';
    } else {
      this.escaped = !!open;
    }

    if (rawParams instanceof AST.SexprNode) {
      this.sexpr = rawParams;
    } else {
      // Support old AST API
      this.sexpr = new AST.SexprNode(rawParams, hash);
    }

    this.sexpr.isRoot = true;

    // Support old AST API that stored this info in MustacheNode
    this.id = this.sexpr.id;
    this.params = this.sexpr.params;
    this.hash = this.sexpr.hash;
    this.eligibleHelper = this.sexpr.eligibleHelper;
    this.isHelper = this.sexpr.isHelper;
  },

  SexprNode: function(rawParams, hash, locInfo) {
    LocationInfo.call(this, locInfo);

    this.type = "sexpr";
    this.hash = hash;

    var id = this.id = rawParams[0];
    var params = this.params = rawParams.slice(1);

    // a mustache is an eligible helper if:
    // * its id is simple (a single part, not `this` or `..`)
    var eligibleHelper = this.eligibleHelper = id.isSimple;

    // a mustache is definitely a helper if:
    // * it is an eligible helper, and
    // * it has at least one parameter or hash segment
    this.isHelper = eligibleHelper && (params.length || hash);

    // if a mustache is an eligible helper but not a definite
    // helper, it is ambiguous, and will be resolved in a later
    // pass or at runtime.
  },

  PartialNode: function(partialName, context, strip, locInfo) {
    LocationInfo.call(this, locInfo);
    this.type         = "partial";
    this.partialName  = partialName;
    this.context      = context;
    this.strip = strip;
  },

  BlockNode: function(mustache, program, inverse, close, locInfo) {
    LocationInfo.call(this, locInfo);

    if(mustache.sexpr.id.original !== close.path.original) {
      throw new Exception(mustache.sexpr.id.original + " doesn't match " + close.path.original, this);
    }

    this.type = 'block';
    this.mustache = mustache;
    this.program  = program;
    this.inverse  = inverse;

    this.strip = {
      left: mustache.strip.left,
      right: close.strip.right
    };

    (program || inverse).strip.left = mustache.strip.right;
    (inverse || program).strip.right = close.strip.left;

    if (inverse && !program) {
      this.isInverse = true;
    }
  },

  ContentNode: function(string, locInfo) {
    LocationInfo.call(this, locInfo);
    this.type = "content";
    this.string = string;
  },

  HashNode: function(pairs, locInfo) {
    LocationInfo.call(this, locInfo);
    this.type = "hash";
    this.pairs = pairs;
  },

  IdNode: function(parts, locInfo) {
    LocationInfo.call(this, locInfo);
    this.type = "ID";

    var original = "",
        dig = [],
        depth = 0;

    for(var i=0,l=parts.length; i<l; i++) {
      var part = parts[i].part;
      original += (parts[i].separator || '') + part;

      if (part === ".." || part === "." || part === "this") {
        if (dig.length > 0) {
          throw new Exception("Invalid path: " + original, this);
        } else if (part === "..") {
          depth++;
        } else {
          this.isScoped = true;
        }
      } else {
        dig.push(part);
      }
    }

    this.original = original;
    this.parts    = dig;
    this.string   = dig.join('.');
    this.depth    = depth;

    // an ID is simple if it only has one part, and that part is not
    // `..` or `this`.
    this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;

    this.stringModeValue = this.string;
  },

  PartialNameNode: function(name, locInfo) {
    LocationInfo.call(this, locInfo);
    this.type = "PARTIAL_NAME";
    this.name = name.original;
  },

  DataNode: function(id, locInfo) {
    LocationInfo.call(this, locInfo);
    this.type = "DATA";
    this.id = id;
  },

  StringNode: function(string, locInfo) {
    LocationInfo.call(this, locInfo);
    this.type = "STRING";
    this.original =
      this.string =
      this.stringModeValue = string;
  },

  IntegerNode: function(integer, locInfo) {
    LocationInfo.call(this, locInfo);
    this.type = "INTEGER";
    this.original =
      this.integer = integer;
    this.stringModeValue = Number(integer);
  },

  BooleanNode: function(bool, locInfo) {
    LocationInfo.call(this, locInfo);
    this.type = "BOOLEAN";
    this.bool = bool;
    this.stringModeValue = bool === "true";
  },

  CommentNode: function(comment, locInfo) {
    LocationInfo.call(this, locInfo);
    this.type = "comment";
    this.comment = comment;
  }
};

// Must be exported as an object rather than the root of the module as the jison lexer
// most modify the object to operate properly.
exports["default"] = AST;
},{"../exception":157}],151:[function(require,module,exports){
"use strict";
var parser = require("./parser")["default"];
var AST = require("./ast")["default"];

exports.parser = parser;

function parse(input) {
  // Just return if an already-compile AST was passed in.
  if(input.constructor === AST.ProgramNode) { return input; }

  parser.yy = AST;
  return parser.parse(input);
}

exports.parse = parse;
},{"./ast":150,"./parser":154}],152:[function(require,module,exports){
"use strict";
var Exception = require("../exception")["default"];

function Compiler() {}

exports.Compiler = Compiler;// the foundHelper register will disambiguate helper lookup from finding a
// function in a context. This is necessary for mustache compatibility, which
// requires that context functions in blocks are evaluated by blockHelperMissing,
// and then proceed as if the resulting value was provided to blockHelperMissing.

Compiler.prototype = {
  compiler: Compiler,

  disassemble: function() {
    var opcodes = this.opcodes, opcode, out = [], params, param;

    for (var i=0, l=opcodes.length; i<l; i++) {
      opcode = opcodes[i];

      if (opcode.opcode === 'DECLARE') {
        out.push("DECLARE " + opcode.name + "=" + opcode.value);
      } else {
        params = [];
        for (var j=0; j<opcode.args.length; j++) {
          param = opcode.args[j];
          if (typeof param === "string") {
            param = "\"" + param.replace("\n", "\\n") + "\"";
          }
          params.push(param);
        }
        out.push(opcode.opcode + " " + params.join(" "));
      }
    }

    return out.join("\n");
  },

  equals: function(other) {
    var len = this.opcodes.length;
    if (other.opcodes.length !== len) {
      return false;
    }

    for (var i = 0; i < len; i++) {
      var opcode = this.opcodes[i],
          otherOpcode = other.opcodes[i];
      if (opcode.opcode !== otherOpcode.opcode || opcode.args.length !== otherOpcode.args.length) {
        return false;
      }
      for (var j = 0; j < opcode.args.length; j++) {
        if (opcode.args[j] !== otherOpcode.args[j]) {
          return false;
        }
      }
    }

    len = this.children.length;
    if (other.children.length !== len) {
      return false;
    }
    for (i = 0; i < len; i++) {
      if (!this.children[i].equals(other.children[i])) {
        return false;
      }
    }

    return true;
  },

  guid: 0,

  compile: function(program, options) {
    this.opcodes = [];
    this.children = [];
    this.depths = {list: []};
    this.options = options;

    // These changes will propagate to the other compiler components
    var knownHelpers = this.options.knownHelpers;
    this.options.knownHelpers = {
      'helperMissing': true,
      'blockHelperMissing': true,
      'each': true,
      'if': true,
      'unless': true,
      'with': true,
      'log': true
    };
    if (knownHelpers) {
      for (var name in knownHelpers) {
        this.options.knownHelpers[name] = knownHelpers[name];
      }
    }

    return this.accept(program);
  },

  accept: function(node) {
    var strip = node.strip || {},
        ret;
    if (strip.left) {
      this.opcode('strip');
    }

    ret = this[node.type](node);

    if (strip.right) {
      this.opcode('strip');
    }

    return ret;
  },

  program: function(program) {
    var statements = program.statements;

    for(var i=0, l=statements.length; i<l; i++) {
      this.accept(statements[i]);
    }
    this.isSimple = l === 1;

    this.depths.list = this.depths.list.sort(function(a, b) {
      return a - b;
    });

    return this;
  },

  compileProgram: function(program) {
    var result = new this.compiler().compile(program, this.options);
    var guid = this.guid++, depth;

    this.usePartial = this.usePartial || result.usePartial;

    this.children[guid] = result;

    for(var i=0, l=result.depths.list.length; i<l; i++) {
      depth = result.depths.list[i];

      if(depth < 2) { continue; }
      else { this.addDepth(depth - 1); }
    }

    return guid;
  },

  block: function(block) {
    var mustache = block.mustache,
        program = block.program,
        inverse = block.inverse;

    if (program) {
      program = this.compileProgram(program);
    }

    if (inverse) {
      inverse = this.compileProgram(inverse);
    }

    var sexpr = mustache.sexpr;
    var type = this.classifySexpr(sexpr);

    if (type === "helper") {
      this.helperSexpr(sexpr, program, inverse);
    } else if (type === "simple") {
      this.simpleSexpr(sexpr);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('blockValue');
    } else {
      this.ambiguousSexpr(sexpr, program, inverse);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('ambiguousBlockValue');
    }

    this.opcode('append');
  },

  hash: function(hash) {
    var pairs = hash.pairs, pair, val;

    this.opcode('pushHash');

    for(var i=0, l=pairs.length; i<l; i++) {
      pair = pairs[i];
      val  = pair[1];

      if (this.options.stringParams) {
        if(val.depth) {
          this.addDepth(val.depth);
        }
        this.opcode('getContext', val.depth || 0);
        this.opcode('pushStringParam', val.stringModeValue, val.type);

        if (val.type === 'sexpr') {
          // Subexpressions get evaluated and passed in
          // in string params mode.
          this.sexpr(val);
        }
      } else {
        this.accept(val);
      }

      this.opcode('assignToHash', pair[0]);
    }
    this.opcode('popHash');
  },

  partial: function(partial) {
    var partialName = partial.partialName;
    this.usePartial = true;

    if(partial.context) {
      this.ID(partial.context);
    } else {
      this.opcode('push', 'depth0');
    }

    this.opcode('invokePartial', partialName.name);
    this.opcode('append');
  },

  content: function(content) {
    this.opcode('appendContent', content.string);
  },

  mustache: function(mustache) {
    this.sexpr(mustache.sexpr);

    if(mustache.escaped && !this.options.noEscape) {
      this.opcode('appendEscaped');
    } else {
      this.opcode('append');
    }
  },

  ambiguousSexpr: function(sexpr, program, inverse) {
    var id = sexpr.id,
        name = id.parts[0],
        isBlock = program != null || inverse != null;

    this.opcode('getContext', id.depth);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    this.opcode('invokeAmbiguous', name, isBlock);
  },

  simpleSexpr: function(sexpr) {
    var id = sexpr.id;

    if (id.type === 'DATA') {
      this.DATA(id);
    } else if (id.parts.length) {
      this.ID(id);
    } else {
      // Simplified ID for `this`
      this.addDepth(id.depth);
      this.opcode('getContext', id.depth);
      this.opcode('pushContext');
    }

    this.opcode('resolvePossibleLambda');
  },

  helperSexpr: function(sexpr, program, inverse) {
    var params = this.setupFullMustacheParams(sexpr, program, inverse),
        name = sexpr.id.parts[0];

    if (this.options.knownHelpers[name]) {
      this.opcode('invokeKnownHelper', params.length, name);
    } else if (this.options.knownHelpersOnly) {
      throw new Exception("You specified knownHelpersOnly, but used the unknown helper " + name, sexpr);
    } else {
      this.opcode('invokeHelper', params.length, name, sexpr.isRoot);
    }
  },

  sexpr: function(sexpr) {
    var type = this.classifySexpr(sexpr);

    if (type === "simple") {
      this.simpleSexpr(sexpr);
    } else if (type === "helper") {
      this.helperSexpr(sexpr);
    } else {
      this.ambiguousSexpr(sexpr);
    }
  },

  ID: function(id) {
    this.addDepth(id.depth);
    this.opcode('getContext', id.depth);

    var name = id.parts[0];
    if (!name) {
      this.opcode('pushContext');
    } else {
      this.opcode('lookupOnContext', id.parts[0]);
    }

    for(var i=1, l=id.parts.length; i<l; i++) {
      this.opcode('lookup', id.parts[i]);
    }
  },

  DATA: function(data) {
    this.options.data = true;
    if (data.id.isScoped || data.id.depth) {
      throw new Exception('Scoped data references are not supported: ' + data.original, data);
    }

    this.opcode('lookupData');
    var parts = data.id.parts;
    for(var i=0, l=parts.length; i<l; i++) {
      this.opcode('lookup', parts[i]);
    }
  },

  STRING: function(string) {
    this.opcode('pushString', string.string);
  },

  INTEGER: function(integer) {
    this.opcode('pushLiteral', integer.integer);
  },

  BOOLEAN: function(bool) {
    this.opcode('pushLiteral', bool.bool);
  },

  comment: function() {},

  // HELPERS
  opcode: function(name) {
    this.opcodes.push({ opcode: name, args: [].slice.call(arguments, 1) });
  },

  declare: function(name, value) {
    this.opcodes.push({ opcode: 'DECLARE', name: name, value: value });
  },

  addDepth: function(depth) {
    if(depth === 0) { return; }

    if(!this.depths[depth]) {
      this.depths[depth] = true;
      this.depths.list.push(depth);
    }
  },

  classifySexpr: function(sexpr) {
    var isHelper   = sexpr.isHelper;
    var isEligible = sexpr.eligibleHelper;
    var options    = this.options;

    // if ambiguous, we can possibly resolve the ambiguity now
    if (isEligible && !isHelper) {
      var name = sexpr.id.parts[0];

      if (options.knownHelpers[name]) {
        isHelper = true;
      } else if (options.knownHelpersOnly) {
        isEligible = false;
      }
    }

    if (isHelper) { return "helper"; }
    else if (isEligible) { return "ambiguous"; }
    else { return "simple"; }
  },

  pushParams: function(params) {
    var i = params.length, param;

    while(i--) {
      param = params[i];

      if(this.options.stringParams) {
        if(param.depth) {
          this.addDepth(param.depth);
        }

        this.opcode('getContext', param.depth || 0);
        this.opcode('pushStringParam', param.stringModeValue, param.type);

        if (param.type === 'sexpr') {
          // Subexpressions get evaluated and passed in
          // in string params mode.
          this.sexpr(param);
        }
      } else {
        this[param.type](param);
      }
    }
  },

  setupFullMustacheParams: function(sexpr, program, inverse) {
    var params = sexpr.params;
    this.pushParams(params);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    if (sexpr.hash) {
      this.hash(sexpr.hash);
    } else {
      this.opcode('emptyHash');
    }

    return params;
  }
};

function precompile(input, options, env) {
  if (input == null || (typeof input !== 'string' && input.constructor !== env.AST.ProgramNode)) {
    throw new Exception("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }

  var ast = env.parse(input);
  var environment = new env.Compiler().compile(ast, options);
  return new env.JavaScriptCompiler().compile(environment, options);
}

exports.precompile = precompile;function compile(input, options, env) {
  if (input == null || (typeof input !== 'string' && input.constructor !== env.AST.ProgramNode)) {
    throw new Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
  }

  options = options || {};

  if (!('data' in options)) {
    options.data = true;
  }

  var compiled;

  function compileInput() {
    var ast = env.parse(input);
    var environment = new env.Compiler().compile(ast, options);
    var templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
    return env.template(templateSpec);
  }

  // Template is only compiled on first use and cached after that point.
  return function(context, options) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled.call(this, context, options);
  };
}

exports.compile = compile;
},{"../exception":157}],153:[function(require,module,exports){
"use strict";
var COMPILER_REVISION = require("../base").COMPILER_REVISION;
var REVISION_CHANGES = require("../base").REVISION_CHANGES;
var log = require("../base").log;
var Exception = require("../exception")["default"];

function Literal(value) {
  this.value = value;
}

function JavaScriptCompiler() {}

JavaScriptCompiler.prototype = {
  // PUBLIC API: You can override these methods in a subclass to provide
  // alternative compiled forms for name lookup and buffering semantics
  nameLookup: function(parent, name /* , type*/) {
    var wrap,
        ret;
    if (parent.indexOf('depth') === 0) {
      wrap = true;
    }

    if (/^[0-9]+$/.test(name)) {
      ret = parent + "[" + name + "]";
    } else if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
      ret = parent + "." + name;
    }
    else {
      ret = parent + "['" + name + "']";
    }

    if (wrap) {
      return '(' + parent + ' && ' + ret + ')';
    } else {
      return ret;
    }
  },

  compilerInfo: function() {
    var revision = COMPILER_REVISION,
        versions = REVISION_CHANGES[revision];
    return "this.compilerInfo = ["+revision+",'"+versions+"'];\n";
  },

  appendToBuffer: function(string) {
    if (this.environment.isSimple) {
      return "return " + string + ";";
    } else {
      return {
        appendToBuffer: true,
        content: string,
        toString: function() { return "buffer += " + string + ";"; }
      };
    }
  },

  initializeBuffer: function() {
    return this.quotedString("");
  },

  namespace: "Handlebars",
  // END PUBLIC API

  compile: function(environment, options, context, asObject) {
    this.environment = environment;
    this.options = options || {};

    log('debug', this.environment.disassemble() + "\n\n");

    this.name = this.environment.name;
    this.isChild = !!context;
    this.context = context || {
      programs: [],
      environments: [],
      aliases: { }
    };

    this.preamble();

    this.stackSlot = 0;
    this.stackVars = [];
    this.registers = { list: [] };
    this.hashes = [];
    this.compileStack = [];
    this.inlineStack = [];

    this.compileChildren(environment, options);

    var opcodes = environment.opcodes, opcode;

    this.i = 0;

    for(var l=opcodes.length; this.i<l; this.i++) {
      opcode = opcodes[this.i];

      if(opcode.opcode === 'DECLARE') {
        this[opcode.name] = opcode.value;
      } else {
        this[opcode.opcode].apply(this, opcode.args);
      }

      // Reset the stripNext flag if it was not set by this operation.
      if (opcode.opcode !== this.stripNext) {
        this.stripNext = false;
      }
    }

    // Flush any trailing content that might be pending.
    this.pushSource('');

    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
      throw new Exception('Compile completed with content left on stack');
    }

    return this.createFunctionContext(asObject);
  },

  preamble: function() {
    var out = [];

    if (!this.isChild) {
      var namespace = this.namespace;

      var copies = "helpers = this.merge(helpers, " + namespace + ".helpers);";
      if (this.environment.usePartial) { copies = copies + " partials = this.merge(partials, " + namespace + ".partials);"; }
      if (this.options.data) { copies = copies + " data = data || {};"; }
      out.push(copies);
    } else {
      out.push('');
    }

    if (!this.environment.isSimple) {
      out.push(", buffer = " + this.initializeBuffer());
    } else {
      out.push("");
    }

    // track the last context pushed into place to allow skipping the
    // getContext opcode when it would be a noop
    this.lastContext = 0;
    this.source = out;
  },

  createFunctionContext: function(asObject) {
    var locals = this.stackVars.concat(this.registers.list);

    if(locals.length > 0) {
      this.source[1] = this.source[1] + ", " + locals.join(", ");
    }

    // Generate minimizer alias mappings
    if (!this.isChild) {
      for (var alias in this.context.aliases) {
        if (this.context.aliases.hasOwnProperty(alias)) {
          this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];
        }
      }
    }

    if (this.source[1]) {
      this.source[1] = "var " + this.source[1].substring(2) + ";";
    }

    // Merge children
    if (!this.isChild) {
      this.source[1] += '\n' + this.context.programs.join('\n') + '\n';
    }

    if (!this.environment.isSimple) {
      this.pushSource("return buffer;");
    }

    var params = this.isChild ? ["depth0", "data"] : ["Handlebars", "depth0", "helpers", "partials", "data"];

    for(var i=0, l=this.environment.depths.list.length; i<l; i++) {
      params.push("depth" + this.environment.depths.list[i]);
    }

    // Perform a second pass over the output to merge content when possible
    var source = this.mergeSource();

    if (!this.isChild) {
      source = this.compilerInfo()+source;
    }

    if (asObject) {
      params.push(source);

      return Function.apply(this, params);
    } else {
      var functionSource = 'function ' + (this.name || '') + '(' + params.join(',') + ') {\n  ' + source + '}';
      log('debug', functionSource + "\n\n");
      return functionSource;
    }
  },
  mergeSource: function() {
    // WARN: We are not handling the case where buffer is still populated as the source should
    // not have buffer append operations as their final action.
    var source = '',
        buffer;
    for (var i = 0, len = this.source.length; i < len; i++) {
      var line = this.source[i];
      if (line.appendToBuffer) {
        if (buffer) {
          buffer = buffer + '\n    + ' + line.content;
        } else {
          buffer = line.content;
        }
      } else {
        if (buffer) {
          source += 'buffer += ' + buffer + ';\n  ';
          buffer = undefined;
        }
        source += line + '\n  ';
      }
    }
    return source;
  },

  // [blockValue]
  //
  // On stack, before: hash, inverse, program, value
  // On stack, after: return value of blockHelperMissing
  //
  // The purpose of this opcode is to take a block of the form
  // `{{#foo}}...{{/foo}}`, resolve the value of `foo`, and
  // replace it on the stack with the result of properly
  // invoking blockHelperMissing.
  blockValue: function() {
    this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

    var params = ["depth0"];
    this.setupParams(0, params);

    this.replaceStack(function(current) {
      params.splice(1, 0, current);
      return "blockHelperMissing.call(" + params.join(", ") + ")";
    });
  },

  // [ambiguousBlockValue]
  //
  // On stack, before: hash, inverse, program, value
  // Compiler value, before: lastHelper=value of last found helper, if any
  // On stack, after, if no lastHelper: same as [blockValue]
  // On stack, after, if lastHelper: value
  ambiguousBlockValue: function() {
    this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

    var params = ["depth0"];
    this.setupParams(0, params);

    var current = this.topStack();
    params.splice(1, 0, current);

    this.pushSource("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
  },

  // [appendContent]
  //
  // On stack, before: ...
  // On stack, after: ...
  //
  // Appends the string value of `content` to the current buffer
  appendContent: function(content) {
    if (this.pendingContent) {
      content = this.pendingContent + content;
    }
    if (this.stripNext) {
      content = content.replace(/^\s+/, '');
    }

    this.pendingContent = content;
  },

  // [strip]
  //
  // On stack, before: ...
  // On stack, after: ...
  //
  // Removes any trailing whitespace from the prior content node and flags
  // the next operation for stripping if it is a content node.
  strip: function() {
    if (this.pendingContent) {
      this.pendingContent = this.pendingContent.replace(/\s+$/, '');
    }
    this.stripNext = 'strip';
  },

  // [append]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Coerces `value` to a String and appends it to the current buffer.
  //
  // If `value` is truthy, or 0, it is coerced into a string and appended
  // Otherwise, the empty string is appended
  append: function() {
    // Force anything that is inlined onto the stack so we don't have duplication
    // when we examine local
    this.flushInline();
    var local = this.popStack();
    this.pushSource("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }");
    if (this.environment.isSimple) {
      this.pushSource("else { " + this.appendToBuffer("''") + " }");
    }
  },

  // [appendEscaped]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Escape `value` and append it to the buffer
  appendEscaped: function() {
    this.context.aliases.escapeExpression = 'this.escapeExpression';

    this.pushSource(this.appendToBuffer("escapeExpression(" + this.popStack() + ")"));
  },

  // [getContext]
  //
  // On stack, before: ...
  // On stack, after: ...
  // Compiler value, after: lastContext=depth
  //
  // Set the value of the `lastContext` compiler value to the depth
  getContext: function(depth) {
    if(this.lastContext !== depth) {
      this.lastContext = depth;
    }
  },

  // [lookupOnContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext[name], ...
  //
  // Looks up the value of `name` on the current context and pushes
  // it onto the stack.
  lookupOnContext: function(name) {
    this.push(this.nameLookup('depth' + this.lastContext, name, 'context'));
  },

  // [pushContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext, ...
  //
  // Pushes the value of the current context onto the stack.
  pushContext: function() {
    this.pushStackLiteral('depth' + this.lastContext);
  },

  // [resolvePossibleLambda]
  //
  // On stack, before: value, ...
  // On stack, after: resolved value, ...
  //
  // If the `value` is a lambda, replace it on the stack by
  // the return value of the lambda
  resolvePossibleLambda: function() {
    this.context.aliases.functionType = '"function"';

    this.replaceStack(function(current) {
      return "typeof " + current + " === functionType ? " + current + ".apply(depth0) : " + current;
    });
  },

  // [lookup]
  //
  // On stack, before: value, ...
  // On stack, after: value[name], ...
  //
  // Replace the value on the stack with the result of looking
  // up `name` on `value`
  lookup: function(name) {
    this.replaceStack(function(current) {
      return current + " == null || " + current + " === false ? " + current + " : " + this.nameLookup(current, name, 'context');
    });
  },

  // [lookupData]
  //
  // On stack, before: ...
  // On stack, after: data, ...
  //
  // Push the data lookup operator
  lookupData: function() {
    this.pushStackLiteral('data');
  },

  // [pushStringParam]
  //
  // On stack, before: ...
  // On stack, after: string, currentContext, ...
  //
  // This opcode is designed for use in string mode, which
  // provides the string value of a parameter along with its
  // depth rather than resolving it immediately.
  pushStringParam: function(string, type) {
    this.pushStackLiteral('depth' + this.lastContext);

    this.pushString(type);

    // If it's a subexpression, the string result
    // will be pushed after this opcode.
    if (type !== 'sexpr') {
      if (typeof string === 'string') {
        this.pushString(string);
      } else {
        this.pushStackLiteral(string);
      }
    }
  },

  emptyHash: function() {
    this.pushStackLiteral('{}');

    if (this.options.stringParams) {
      this.push('{}'); // hashContexts
      this.push('{}'); // hashTypes
    }
  },
  pushHash: function() {
    if (this.hash) {
      this.hashes.push(this.hash);
    }
    this.hash = {values: [], types: [], contexts: []};
  },
  popHash: function() {
    var hash = this.hash;
    this.hash = this.hashes.pop();

    if (this.options.stringParams) {
      this.push('{' + hash.contexts.join(',') + '}');
      this.push('{' + hash.types.join(',') + '}');
    }

    this.push('{\n    ' + hash.values.join(',\n    ') + '\n  }');
  },

  // [pushString]
  //
  // On stack, before: ...
  // On stack, after: quotedString(string), ...
  //
  // Push a quoted version of `string` onto the stack
  pushString: function(string) {
    this.pushStackLiteral(this.quotedString(string));
  },

  // [push]
  //
  // On stack, before: ...
  // On stack, after: expr, ...
  //
  // Push an expression onto the stack
  push: function(expr) {
    this.inlineStack.push(expr);
    return expr;
  },

  // [pushLiteral]
  //
  // On stack, before: ...
  // On stack, after: value, ...
  //
  // Pushes a value onto the stack. This operation prevents
  // the compiler from creating a temporary variable to hold
  // it.
  pushLiteral: function(value) {
    this.pushStackLiteral(value);
  },

  // [pushProgram]
  //
  // On stack, before: ...
  // On stack, after: program(guid), ...
  //
  // Push a program expression onto the stack. This takes
  // a compile-time guid and converts it into a runtime-accessible
  // expression.
  pushProgram: function(guid) {
    if (guid != null) {
      this.pushStackLiteral(this.programExpression(guid));
    } else {
      this.pushStackLiteral(null);
    }
  },

  // [invokeHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // Pops off the helper's parameters, invokes the helper,
  // and pushes the helper's return value onto the stack.
  //
  // If the helper is not found, `helperMissing` is called.
  invokeHelper: function(paramSize, name, isRoot) {
    this.context.aliases.helperMissing = 'helpers.helperMissing';
    this.useRegister('helper');

    var helper = this.lastHelper = this.setupHelper(paramSize, name, true);
    var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');

    var lookup = 'helper = ' + helper.name + ' || ' + nonHelper;
    if (helper.paramsInit) {
      lookup += ',' + helper.paramsInit;
    }

    this.push(
      '('
        + lookup
        + ',helper '
          + '? helper.call(' + helper.callParams + ') '
          + ': helperMissing.call(' + helper.helperMissingParams + '))');

    // Always flush subexpressions. This is both to prevent the compounding size issue that
    // occurs when the code has to be duplicated for inlining and also to prevent errors
    // due to the incorrect options object being passed due to the shared register.
    if (!isRoot) {
      this.flushInline();
    }
  },

  // [invokeKnownHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // This operation is used when the helper is known to exist,
  // so a `helperMissing` fallback is not required.
  invokeKnownHelper: function(paramSize, name) {
    var helper = this.setupHelper(paramSize, name);
    this.push(helper.name + ".call(" + helper.callParams + ")");
  },

  // [invokeAmbiguous]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of disambiguation
  //
  // This operation is used when an expression like `{{foo}}`
  // is provided, but we don't know at compile-time whether it
  // is a helper or a path.
  //
  // This operation emits more code than the other options,
  // and can be avoided by passing the `knownHelpers` and
  // `knownHelpersOnly` flags at compile-time.
  invokeAmbiguous: function(name, helperCall) {
    this.context.aliases.functionType = '"function"';
    this.useRegister('helper');

    this.emptyHash();
    var helper = this.setupHelper(0, name, helperCall);

    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

    var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');
    var nextStack = this.nextStack();

    if (helper.paramsInit) {
      this.pushSource(helper.paramsInit);
    }
    this.pushSource('if (helper = ' + helperName + ') { ' + nextStack + ' = helper.call(' + helper.callParams + '); }');
    this.pushSource('else { helper = ' + nonHelper + '; ' + nextStack + ' = typeof helper === functionType ? helper.call(' + helper.callParams + ') : helper; }');
  },

  // [invokePartial]
  //
  // On stack, before: context, ...
  // On stack after: result of partial invocation
  //
  // This operation pops off a context, invokes a partial with that context,
  // and pushes the result of the invocation back.
  invokePartial: function(name) {
    var params = [this.nameLookup('partials', name, 'partial'), "'" + name + "'", this.popStack(), "helpers", "partials"];

    if (this.options.data) {
      params.push("data");
    }

    this.context.aliases.self = "this";
    this.push("self.invokePartial(" + params.join(", ") + ")");
  },

  // [assignToHash]
  //
  // On stack, before: value, hash, ...
  // On stack, after: hash, ...
  //
  // Pops a value and hash off the stack, assigns `hash[key] = value`
  // and pushes the hash back onto the stack.
  assignToHash: function(key) {
    var value = this.popStack(),
        context,
        type;

    if (this.options.stringParams) {
      type = this.popStack();
      context = this.popStack();
    }

    var hash = this.hash;
    if (context) {
      hash.contexts.push("'" + key + "': " + context);
    }
    if (type) {
      hash.types.push("'" + key + "': " + type);
    }
    hash.values.push("'" + key + "': (" + value + ")");
  },

  // HELPERS

  compiler: JavaScriptCompiler,

  compileChildren: function(environment, options) {
    var children = environment.children, child, compiler;

    for(var i=0, l=children.length; i<l; i++) {
      child = children[i];
      compiler = new this.compiler();

      var index = this.matchExistingProgram(child);

      if (index == null) {
        this.context.programs.push('');     // Placeholder to prevent name conflicts for nested children
        index = this.context.programs.length;
        child.index = index;
        child.name = 'program' + index;
        this.context.programs[index] = compiler.compile(child, options, this.context);
        this.context.environments[index] = child;
      } else {
        child.index = index;
        child.name = 'program' + index;
      }
    }
  },
  matchExistingProgram: function(child) {
    for (var i = 0, len = this.context.environments.length; i < len; i++) {
      var environment = this.context.environments[i];
      if (environment && environment.equals(child)) {
        return i;
      }
    }
  },

  programExpression: function(guid) {
    this.context.aliases.self = "this";

    if(guid == null) {
      return "self.noop";
    }

    var child = this.environment.children[guid],
        depths = child.depths.list, depth;

    var programParams = [child.index, child.name, "data"];

    for(var i=0, l = depths.length; i<l; i++) {
      depth = depths[i];

      if(depth === 1) { programParams.push("depth0"); }
      else { programParams.push("depth" + (depth - 1)); }
    }

    return (depths.length === 0 ? "self.program(" : "self.programWithDepth(") + programParams.join(", ") + ")";
  },

  register: function(name, val) {
    this.useRegister(name);
    this.pushSource(name + " = " + val + ";");
  },

  useRegister: function(name) {
    if(!this.registers[name]) {
      this.registers[name] = true;
      this.registers.list.push(name);
    }
  },

  pushStackLiteral: function(item) {
    return this.push(new Literal(item));
  },

  pushSource: function(source) {
    if (this.pendingContent) {
      this.source.push(this.appendToBuffer(this.quotedString(this.pendingContent)));
      this.pendingContent = undefined;
    }

    if (source) {
      this.source.push(source);
    }
  },

  pushStack: function(item) {
    this.flushInline();

    var stack = this.incrStack();
    if (item) {
      this.pushSource(stack + " = " + item + ";");
    }
    this.compileStack.push(stack);
    return stack;
  },

  replaceStack: function(callback) {
    var prefix = '',
        inline = this.isInline(),
        stack,
        createdStack,
        usedLiteral;

    // If we are currently inline then we want to merge the inline statement into the
    // replacement statement via ','
    if (inline) {
      var top = this.popStack(true);

      if (top instanceof Literal) {
        // Literals do not need to be inlined
        stack = top.value;
        usedLiteral = true;
      } else {
        // Get or create the current stack name for use by the inline
        createdStack = !this.stackSlot;
        var name = !createdStack ? this.topStackName() : this.incrStack();

        prefix = '(' + this.push(name) + ' = ' + top + '),';
        stack = this.topStack();
      }
    } else {
      stack = this.topStack();
    }

    var item = callback.call(this, stack);

    if (inline) {
      if (!usedLiteral) {
        this.popStack();
      }
      if (createdStack) {
        this.stackSlot--;
      }
      this.push('(' + prefix + item + ')');
    } else {
      // Prevent modification of the context depth variable. Through replaceStack
      if (!/^stack/.test(stack)) {
        stack = this.nextStack();
      }

      this.pushSource(stack + " = (" + prefix + item + ");");
    }
    return stack;
  },

  nextStack: function() {
    return this.pushStack();
  },

  incrStack: function() {
    this.stackSlot++;
    if(this.stackSlot > this.stackVars.length) { this.stackVars.push("stack" + this.stackSlot); }
    return this.topStackName();
  },
  topStackName: function() {
    return "stack" + this.stackSlot;
  },
  flushInline: function() {
    var inlineStack = this.inlineStack;
    if (inlineStack.length) {
      this.inlineStack = [];
      for (var i = 0, len = inlineStack.length; i < len; i++) {
        var entry = inlineStack[i];
        if (entry instanceof Literal) {
          this.compileStack.push(entry);
        } else {
          this.pushStack(entry);
        }
      }
    }
  },
  isInline: function() {
    return this.inlineStack.length;
  },

  popStack: function(wrapped) {
    var inline = this.isInline(),
        item = (inline ? this.inlineStack : this.compileStack).pop();

    if (!wrapped && (item instanceof Literal)) {
      return item.value;
    } else {
      if (!inline) {
        if (!this.stackSlot) {
          throw new Exception('Invalid stack pop');
        }
        this.stackSlot--;
      }
      return item;
    }
  },

  topStack: function(wrapped) {
    var stack = (this.isInline() ? this.inlineStack : this.compileStack),
        item = stack[stack.length - 1];

    if (!wrapped && (item instanceof Literal)) {
      return item.value;
    } else {
      return item;
    }
  },

  quotedString: function(str) {
    return '"' + str
      .replace(/\\/g, '\\\\')
      .replace(/"/g, '\\"')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/\u2028/g, '\\u2028')   // Per Ecma-262 7.3 + 7.8.4
      .replace(/\u2029/g, '\\u2029') + '"';
  },

  setupHelper: function(paramSize, name, missingParams) {
    var params = [],
        paramsInit = this.setupParams(paramSize, params, missingParams);
    var foundHelper = this.nameLookup('helpers', name, 'helper');

    return {
      params: params,
      paramsInit: paramsInit,
      name: foundHelper,
      callParams: ["depth0"].concat(params).join(", "),
      helperMissingParams: missingParams && ["depth0", this.quotedString(name)].concat(params).join(", ")
    };
  },

  setupOptions: function(paramSize, params) {
    var options = [], contexts = [], types = [], param, inverse, program;

    options.push("hash:" + this.popStack());

    if (this.options.stringParams) {
      options.push("hashTypes:" + this.popStack());
      options.push("hashContexts:" + this.popStack());
    }

    inverse = this.popStack();
    program = this.popStack();

    // Avoid setting fn and inverse if neither are set. This allows
    // helpers to do a check for `if (options.fn)`
    if (program || inverse) {
      if (!program) {
        this.context.aliases.self = "this";
        program = "self.noop";
      }

      if (!inverse) {
        this.context.aliases.self = "this";
        inverse = "self.noop";
      }

      options.push("inverse:" + inverse);
      options.push("fn:" + program);
    }

    for(var i=0; i<paramSize; i++) {
      param = this.popStack();
      params.push(param);

      if(this.options.stringParams) {
        types.push(this.popStack());
        contexts.push(this.popStack());
      }
    }

    if (this.options.stringParams) {
      options.push("contexts:[" + contexts.join(",") + "]");
      options.push("types:[" + types.join(",") + "]");
    }

    if(this.options.data) {
      options.push("data:data");
    }

    return options;
  },

  // the params and contexts arguments are passed in arrays
  // to fill in
  setupParams: function(paramSize, params, useRegister) {
    var options = '{' + this.setupOptions(paramSize, params).join(',') + '}';

    if (useRegister) {
      this.useRegister('options');
      params.push('options');
      return 'options=' + options;
    } else {
      params.push(options);
      return '';
    }
  }
};

var reservedWords = (
  "break else new var" +
  " case finally return void" +
  " catch for switch while" +
  " continue function this with" +
  " default if throw" +
  " delete in try" +
  " do instanceof typeof" +
  " abstract enum int short" +
  " boolean export interface static" +
  " byte extends long super" +
  " char final native synchronized" +
  " class float package throws" +
  " const goto private transient" +
  " debugger implements protected volatile" +
  " double import public let yield"
).split(" ");

var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

for(var i=0, l=reservedWords.length; i<l; i++) {
  compilerWords[reservedWords[i]] = true;
}

JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
  if(!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name)) {
    return true;
  }
  return false;
};

exports["default"] = JavaScriptCompiler;
},{"../base":149,"../exception":157}],154:[function(require,module,exports){
"use strict";
/* jshint ignore:start */
/* Jison generated parser */
var handlebars = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"statements":4,"EOF":5,"program":6,"simpleInverse":7,"statement":8,"openInverse":9,"closeBlock":10,"openBlock":11,"mustache":12,"partial":13,"CONTENT":14,"COMMENT":15,"OPEN_BLOCK":16,"sexpr":17,"CLOSE":18,"OPEN_INVERSE":19,"OPEN_ENDBLOCK":20,"path":21,"OPEN":22,"OPEN_UNESCAPED":23,"CLOSE_UNESCAPED":24,"OPEN_PARTIAL":25,"partialName":26,"partial_option0":27,"sexpr_repetition0":28,"sexpr_option0":29,"dataName":30,"param":31,"STRING":32,"INTEGER":33,"BOOLEAN":34,"OPEN_SEXPR":35,"CLOSE_SEXPR":36,"hash":37,"hash_repetition_plus0":38,"hashSegment":39,"ID":40,"EQUALS":41,"DATA":42,"pathSegments":43,"SEP":44,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"CLOSE_UNESCAPED",25:"OPEN_PARTIAL",32:"STRING",33:"INTEGER",34:"BOOLEAN",35:"OPEN_SEXPR",36:"CLOSE_SEXPR",40:"ID",41:"EQUALS",42:"DATA",44:"SEP"},
productions_: [0,[3,2],[3,1],[6,2],[6,3],[6,2],[6,1],[6,1],[6,0],[4,1],[4,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,4],[7,2],[17,3],[17,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,3],[37,1],[39,3],[26,1],[26,1],[26,1],[30,2],[21,1],[43,3],[43,1],[27,0],[27,1],[28,0],[28,2],[29,0],[29,1],[38,1],[38,2]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new yy.ProgramNode($$[$0-1], this._$); 
break;
case 2: return new yy.ProgramNode([], this._$); 
break;
case 3:this.$ = new yy.ProgramNode([], $$[$0-1], $$[$0], this._$);
break;
case 4:this.$ = new yy.ProgramNode($$[$0-2], $$[$0-1], $$[$0], this._$);
break;
case 5:this.$ = new yy.ProgramNode($$[$0-1], $$[$0], [], this._$);
break;
case 6:this.$ = new yy.ProgramNode($$[$0], this._$);
break;
case 7:this.$ = new yy.ProgramNode([], this._$);
break;
case 8:this.$ = new yy.ProgramNode([], this._$);
break;
case 9:this.$ = [$$[$0]];
break;
case 10: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 11:this.$ = new yy.BlockNode($$[$0-2], $$[$0-1].inverse, $$[$0-1], $$[$0], this._$);
break;
case 12:this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0-1].inverse, $$[$0], this._$);
break;
case 13:this.$ = $$[$0];
break;
case 14:this.$ = $$[$0];
break;
case 15:this.$ = new yy.ContentNode($$[$0], this._$);
break;
case 16:this.$ = new yy.CommentNode($$[$0], this._$);
break;
case 17:this.$ = new yy.MustacheNode($$[$0-1], null, $$[$0-2], stripFlags($$[$0-2], $$[$0]), this._$);
break;
case 18:this.$ = new yy.MustacheNode($$[$0-1], null, $$[$0-2], stripFlags($$[$0-2], $$[$0]), this._$);
break;
case 19:this.$ = {path: $$[$0-1], strip: stripFlags($$[$0-2], $$[$0])};
break;
case 20:this.$ = new yy.MustacheNode($$[$0-1], null, $$[$0-2], stripFlags($$[$0-2], $$[$0]), this._$);
break;
case 21:this.$ = new yy.MustacheNode($$[$0-1], null, $$[$0-2], stripFlags($$[$0-2], $$[$0]), this._$);
break;
case 22:this.$ = new yy.PartialNode($$[$0-2], $$[$0-1], stripFlags($$[$0-3], $$[$0]), this._$);
break;
case 23:this.$ = stripFlags($$[$0-1], $$[$0]);
break;
case 24:this.$ = new yy.SexprNode([$$[$0-2]].concat($$[$0-1]), $$[$0], this._$);
break;
case 25:this.$ = new yy.SexprNode([$$[$0]], null, this._$);
break;
case 26:this.$ = $$[$0];
break;
case 27:this.$ = new yy.StringNode($$[$0], this._$);
break;
case 28:this.$ = new yy.IntegerNode($$[$0], this._$);
break;
case 29:this.$ = new yy.BooleanNode($$[$0], this._$);
break;
case 30:this.$ = $$[$0];
break;
case 31:$$[$0-1].isHelper = true; this.$ = $$[$0-1];
break;
case 32:this.$ = new yy.HashNode($$[$0], this._$);
break;
case 33:this.$ = [$$[$0-2], $$[$0]];
break;
case 34:this.$ = new yy.PartialNameNode($$[$0], this._$);
break;
case 35:this.$ = new yy.PartialNameNode(new yy.StringNode($$[$0], this._$), this._$);
break;
case 36:this.$ = new yy.PartialNameNode(new yy.IntegerNode($$[$0], this._$));
break;
case 37:this.$ = new yy.DataNode($$[$0], this._$);
break;
case 38:this.$ = new yy.IdNode($$[$0], this._$);
break;
case 39: $$[$0-2].push({part: $$[$0], separator: $$[$0-1]}); this.$ = $$[$0-2]; 
break;
case 40:this.$ = [{part: $$[$0]}];
break;
case 43:this.$ = [];
break;
case 44:$$[$0-1].push($$[$0]);
break;
case 47:this.$ = [$$[$0]];
break;
case 48:$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[1,3],8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],25:[1,15]},{1:[3]},{5:[1,16],8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],25:[1,15]},{1:[2,2]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],25:[2,9]},{4:20,6:18,7:19,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,21],20:[2,8],22:[1,13],23:[1,14],25:[1,15]},{4:20,6:22,7:19,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,21],20:[2,8],22:[1,13],23:[1,14],25:[1,15]},{5:[2,13],14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],25:[2,13]},{5:[2,14],14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],25:[2,14]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],25:[2,15]},{5:[2,16],14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],25:[2,16]},{17:23,21:24,30:25,40:[1,28],42:[1,27],43:26},{17:29,21:24,30:25,40:[1,28],42:[1,27],43:26},{17:30,21:24,30:25,40:[1,28],42:[1,27],43:26},{17:31,21:24,30:25,40:[1,28],42:[1,27],43:26},{21:33,26:32,32:[1,34],33:[1,35],40:[1,28],43:26},{1:[2,1]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],25:[2,10]},{10:36,20:[1,37]},{4:38,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,7],22:[1,13],23:[1,14],25:[1,15]},{7:39,8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,21],20:[2,6],22:[1,13],23:[1,14],25:[1,15]},{17:23,18:[1,40],21:24,30:25,40:[1,28],42:[1,27],43:26},{10:41,20:[1,37]},{18:[1,42]},{18:[2,43],24:[2,43],28:43,32:[2,43],33:[2,43],34:[2,43],35:[2,43],36:[2,43],40:[2,43],42:[2,43]},{18:[2,25],24:[2,25],36:[2,25]},{18:[2,38],24:[2,38],32:[2,38],33:[2,38],34:[2,38],35:[2,38],36:[2,38],40:[2,38],42:[2,38],44:[1,44]},{21:45,40:[1,28],43:26},{18:[2,40],24:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],40:[2,40],42:[2,40],44:[2,40]},{18:[1,46]},{18:[1,47]},{24:[1,48]},{18:[2,41],21:50,27:49,40:[1,28],43:26},{18:[2,34],40:[2,34]},{18:[2,35],40:[2,35]},{18:[2,36],40:[2,36]},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],25:[2,11]},{21:51,40:[1,28],43:26},{8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,3],22:[1,13],23:[1,14],25:[1,15]},{4:52,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,5],22:[1,13],23:[1,14],25:[1,15]},{14:[2,23],15:[2,23],16:[2,23],19:[2,23],20:[2,23],22:[2,23],23:[2,23],25:[2,23]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],25:[2,12]},{14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],25:[2,18]},{18:[2,45],21:56,24:[2,45],29:53,30:60,31:54,32:[1,57],33:[1,58],34:[1,59],35:[1,61],36:[2,45],37:55,38:62,39:63,40:[1,64],42:[1,27],43:26},{40:[1,65]},{18:[2,37],24:[2,37],32:[2,37],33:[2,37],34:[2,37],35:[2,37],36:[2,37],40:[2,37],42:[2,37]},{14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],25:[2,17]},{5:[2,20],14:[2,20],15:[2,20],16:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],25:[2,20]},{5:[2,21],14:[2,21],15:[2,21],16:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],25:[2,21]},{18:[1,66]},{18:[2,42]},{18:[1,67]},{8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,4],22:[1,13],23:[1,14],25:[1,15]},{18:[2,24],24:[2,24],36:[2,24]},{18:[2,44],24:[2,44],32:[2,44],33:[2,44],34:[2,44],35:[2,44],36:[2,44],40:[2,44],42:[2,44]},{18:[2,46],24:[2,46],36:[2,46]},{18:[2,26],24:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],36:[2,26],40:[2,26],42:[2,26]},{18:[2,27],24:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[2,27],40:[2,27],42:[2,27]},{18:[2,28],24:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],40:[2,28],42:[2,28]},{18:[2,29],24:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],40:[2,29],42:[2,29]},{18:[2,30],24:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],40:[2,30],42:[2,30]},{17:68,21:24,30:25,40:[1,28],42:[1,27],43:26},{18:[2,32],24:[2,32],36:[2,32],39:69,40:[1,70]},{18:[2,47],24:[2,47],36:[2,47],40:[2,47]},{18:[2,40],24:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],40:[2,40],41:[1,71],42:[2,40],44:[2,40]},{18:[2,39],24:[2,39],32:[2,39],33:[2,39],34:[2,39],35:[2,39],36:[2,39],40:[2,39],42:[2,39],44:[2,39]},{5:[2,22],14:[2,22],15:[2,22],16:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],25:[2,22]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],25:[2,19]},{36:[1,72]},{18:[2,48],24:[2,48],36:[2,48],40:[2,48]},{41:[1,71]},{21:56,30:60,31:73,32:[1,57],33:[1,58],34:[1,59],35:[1,61],40:[1,28],42:[1,27],43:26},{18:[2,31],24:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],40:[2,31],42:[2,31]},{18:[2,33],24:[2,33],36:[2,33],40:[2,33]}],
defaultActions: {3:[2,2],16:[2,1],50:[2,42]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};


function stripFlags(open, close) {
  return {
    left: open.charAt(2) === '~',
    right: close.charAt(0) === '~' || close.charAt(1) === '~'
  };
}

/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {


function strip(start, end) {
  return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
}


var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0:
                                   if(yy_.yytext.slice(-2) === "\\\\") {
                                     strip(0,1);
                                     this.begin("mu");
                                   } else if(yy_.yytext.slice(-1) === "\\") {
                                     strip(0,1);
                                     this.begin("emu");
                                   } else {
                                     this.begin("mu");
                                   }
                                   if(yy_.yytext) return 14;
                                 
break;
case 1:return 14;
break;
case 2:
                                   this.popState();
                                   return 14;
                                 
break;
case 3:strip(0,4); this.popState(); return 15;
break;
case 4:return 35;
break;
case 5:return 36;
break;
case 6:return 25;
break;
case 7:return 16;
break;
case 8:return 20;
break;
case 9:return 19;
break;
case 10:return 19;
break;
case 11:return 23;
break;
case 12:return 22;
break;
case 13:this.popState(); this.begin('com');
break;
case 14:strip(3,5); this.popState(); return 15;
break;
case 15:return 22;
break;
case 16:return 41;
break;
case 17:return 40;
break;
case 18:return 40;
break;
case 19:return 44;
break;
case 20:// ignore whitespace
break;
case 21:this.popState(); return 24;
break;
case 22:this.popState(); return 18;
break;
case 23:yy_.yytext = strip(1,2).replace(/\\"/g,'"'); return 32;
break;
case 24:yy_.yytext = strip(1,2).replace(/\\'/g,"'"); return 32;
break;
case 25:return 42;
break;
case 26:return 34;
break;
case 27:return 34;
break;
case 28:return 33;
break;
case 29:return 40;
break;
case 30:yy_.yytext = strip(1,2); return 40;
break;
case 31:return 'INVALID';
break;
case 32:return 5;
break;
}
};
lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:[\s\S]*?--\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{!--)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{(~)?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:-?[0-9]+(?=([~}\s)])))/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)]))))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/];
lexer.conditions = {"mu":{"rules":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":false},"emu":{"rules":[2],"inclusive":false},"com":{"rules":[3],"inclusive":false},"INITIAL":{"rules":[0,1,32],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();exports["default"] = handlebars;
/* jshint ignore:end */
},{}],155:[function(require,module,exports){
"use strict";
var Visitor = require("./visitor")["default"];

function print(ast) {
  return new PrintVisitor().accept(ast);
}

exports.print = print;function PrintVisitor() {
  this.padding = 0;
}

exports.PrintVisitor = PrintVisitor;PrintVisitor.prototype = new Visitor();

PrintVisitor.prototype.pad = function(string, newline) {
  var out = "";

  for(var i=0,l=this.padding; i<l; i++) {
    out = out + "  ";
  }

  out = out + string;

  if(newline !== false) { out = out + "\n"; }
  return out;
};

PrintVisitor.prototype.program = function(program) {
  var out = "",
      statements = program.statements,
      i, l;

  for(i=0, l=statements.length; i<l; i++) {
    out = out + this.accept(statements[i]);
  }

  this.padding--;

  return out;
};

PrintVisitor.prototype.block = function(block) {
  var out = "";

  out = out + this.pad("BLOCK:");
  this.padding++;
  out = out + this.accept(block.mustache);
  if (block.program) {
    out = out + this.pad("PROGRAM:");
    this.padding++;
    out = out + this.accept(block.program);
    this.padding--;
  }
  if (block.inverse) {
    if (block.program) { this.padding++; }
    out = out + this.pad("{{^}}");
    this.padding++;
    out = out + this.accept(block.inverse);
    this.padding--;
    if (block.program) { this.padding--; }
  }
  this.padding--;

  return out;
};

PrintVisitor.prototype.sexpr = function(sexpr) {
  var params = sexpr.params, paramStrings = [], hash;

  for(var i=0, l=params.length; i<l; i++) {
    paramStrings.push(this.accept(params[i]));
  }

  params = "[" + paramStrings.join(", ") + "]";

  hash = sexpr.hash ? " " + this.accept(sexpr.hash) : "";

  return this.accept(sexpr.id) + " " + params + hash;
};

PrintVisitor.prototype.mustache = function(mustache) {
  return this.pad("{{ " + this.accept(mustache.sexpr) + " }}");
};

PrintVisitor.prototype.partial = function(partial) {
  var content = this.accept(partial.partialName);
  if(partial.context) { content = content + " " + this.accept(partial.context); }
  return this.pad("{{> " + content + " }}");
};

PrintVisitor.prototype.hash = function(hash) {
  var pairs = hash.pairs;
  var joinedPairs = [], left, right;

  for(var i=0, l=pairs.length; i<l; i++) {
    left = pairs[i][0];
    right = this.accept(pairs[i][1]);
    joinedPairs.push( left + "=" + right );
  }

  return "HASH{" + joinedPairs.join(", ") + "}";
};

PrintVisitor.prototype.STRING = function(string) {
  return '"' + string.string + '"';
};

PrintVisitor.prototype.INTEGER = function(integer) {
  return "INTEGER{" + integer.integer + "}";
};

PrintVisitor.prototype.BOOLEAN = function(bool) {
  return "BOOLEAN{" + bool.bool + "}";
};

PrintVisitor.prototype.ID = function(id) {
  var path = id.parts.join("/");
  if(id.parts.length > 1) {
    return "PATH:" + path;
  } else {
    return "ID:" + path;
  }
};

PrintVisitor.prototype.PARTIAL_NAME = function(partialName) {
    return "PARTIAL:" + partialName.name;
};

PrintVisitor.prototype.DATA = function(data) {
  return "@" + this.accept(data.id);
};

PrintVisitor.prototype.content = function(content) {
  return this.pad("CONTENT[ '" + content.string + "' ]");
};

PrintVisitor.prototype.comment = function(comment) {
  return this.pad("{{! '" + comment.comment + "' }}");
};
},{"./visitor":156}],156:[function(require,module,exports){
"use strict";
function Visitor() {}

Visitor.prototype = {
  constructor: Visitor,

  accept: function(object) {
    return this[object.type](object);
  }
};

exports["default"] = Visitor;
},{}],157:[function(require,module,exports){
"use strict";

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var line;
  if (node && node.firstLine) {
    line = node.firstLine;

    message += ' - ' + line + ':' + node.firstColumn;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  if (line) {
    this.lineNumber = line;
    this.column = node.firstColumn;
  }
}

Exception.prototype = new Error();

exports["default"] = Exception;
},{}],158:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];
var COMPILER_REVISION = require("./base").COMPILER_REVISION;
var REVISION_CHANGES = require("./base").REVISION_CHANGES;

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = REVISION_CHANGES[currentRevision],
          compilerVersions = REVISION_CHANGES[compilerRevision];
      throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. "+
            "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").");
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. "+
            "Please update your runtime to a newer version ("+compilerInfo[1]+").");
    }
  }
}

exports.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial

function template(templateSpec, env) {
  if (!env) {
    throw new Exception("No environment passed to template");
  }

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  var invokePartialWrapper = function(partial, name, context, helpers, partials, data) {
    var result = env.VM.invokePartial.apply(this, arguments);
    if (result != null) { return result; }

    if (env.compile) {
      var options = { helpers: helpers, partials: partials, data: data };
      partials[name] = env.compile(partial, { data: data !== undefined }, env);
      return partials[name](context, options);
    } else {
      throw new Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
    }
  };

  // Just add water
  var container = {
    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,
    programs: [],
    program: function(i, fn, data) {
      var programWrapper = this.programs[i];
      if(data) {
        programWrapper = program(i, fn, data);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = program(i, fn);
      }
      return programWrapper;
    },
    merge: function(param, common) {
      var ret = param || common;

      if (param && common && (param !== common)) {
        ret = {};
        Utils.extend(ret, common);
        Utils.extend(ret, param);
      }
      return ret;
    },
    programWithDepth: env.VM.programWithDepth,
    noop: env.VM.noop,
    compilerInfo: null
  };

  return function(context, options) {
    options = options || {};
    var namespace = options.partial ? options : env,
        helpers,
        partials;

    if (!options.partial) {
      helpers = options.helpers;
      partials = options.partials;
    }
    var result = templateSpec.call(
          container,
          namespace, context,
          helpers,
          partials,
          options.data);

    if (!options.partial) {
      env.VM.checkRevision(container.compilerInfo);
    }

    return result;
  };
}

exports.template = template;function programWithDepth(i, fn, data /*, $depth */) {
  var args = Array.prototype.slice.call(arguments, 3);

  var prog = function(context, options) {
    options = options || {};

    return fn.apply(this, [context, options.data || data].concat(args));
  };
  prog.program = i;
  prog.depth = args.length;
  return prog;
}

exports.programWithDepth = programWithDepth;function program(i, fn, data) {
  var prog = function(context, options) {
    options = options || {};

    return fn(context, options.data || data);
  };
  prog.program = i;
  prog.depth = 0;
  return prog;
}

exports.program = program;function invokePartial(partial, name, context, helpers, partials, data) {
  var options = { partial: true, helpers: helpers, partials: partials, data: data };

  if(partial === undefined) {
    throw new Exception("The partial " + name + " could not be found");
  } else if(partial instanceof Function) {
    return partial(context, options);
  }
}

exports.invokePartial = invokePartial;function noop() { return ""; }

exports.noop = noop;
},{"./base":149,"./exception":157,"./utils":160}],159:[function(require,module,exports){
"use strict";
// Build out our basic SafeString type
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = function() {
  return "" + this.string;
};

exports["default"] = SafeString;
},{}],160:[function(require,module,exports){
"use strict";
/*jshint -W004 */
var SafeString = require("./safe-string")["default"];

var escape = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#x27;",
  "`": "&#x60;"
};

var badChars = /[&<>"'`]/g;
var possible = /[&<>"'`]/;

function escapeChar(chr) {
  return escape[chr] || "&amp;";
}

function extend(obj, value) {
  for(var key in value) {
    if(Object.prototype.hasOwnProperty.call(value, key)) {
      obj[key] = value[key];
    }
  }
}

exports.extend = extend;var toString = Object.prototype.toString;
exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
var isFunction = function(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
if (isFunction(/x/)) {
  isFunction = function(value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
var isFunction;
exports.isFunction = isFunction;
var isArray = Array.isArray || function(value) {
  return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
};
exports.isArray = isArray;

function escapeExpression(string) {
  // don't escape SafeStrings, since they're already safe
  if (string instanceof SafeString) {
    return string.toString();
  } else if (!string && string !== 0) {
    return "";
  }

  // Force a string conversion as this will be done by the append regardless and
  // the regex test will do this transparently behind the scenes, causing issues if
  // an object's to string has escaped characters in it.
  string = "" + string;

  if(!possible.test(string)) { return string; }
  return string.replace(badChars, escapeChar);
}

exports.escapeExpression = escapeExpression;function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

exports.isEmpty = isEmpty;
},{"./safe-string":159}],161:[function(require,module,exports){
// USAGE:
// var handlebars = require('handlebars');

// var local = handlebars.create();

var handlebars = require('../dist/cjs/handlebars')["default"];

handlebars.Visitor = require('../dist/cjs/handlebars/compiler/visitor')["default"];

var printer = require('../dist/cjs/handlebars/compiler/printer');
handlebars.PrintVisitor = printer.PrintVisitor;
handlebars.print = printer.print;

module.exports = handlebars;

// Publish a Node.js require() handler for .handlebars and .hbs files
if (typeof require !== 'undefined' && require.extensions) {
  var extension = function(module, filename) {
    var fs = require("fs");
    var templateString = fs.readFileSync(filename, "utf8");
    module.exports = handlebars.compile(templateString);
  };
  require.extensions[".handlebars"] = extension;
  require.extensions[".hbs"] = extension;
}

},{"../dist/cjs/handlebars":147,"../dist/cjs/handlebars/compiler/printer":155,"../dist/cjs/handlebars/compiler/visitor":156,"fs":119}],162:[function(require,module,exports){
//     Underscore.js 1.5.2
//     http://underscorejs.org
//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.5.2';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    return _.filter(obj, function(value, index, list) {
      return !iterator.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs, first) {
    if (_.isEmpty(attrs)) return first ? void 0 : [];
    return _[first ? 'find' : 'filter'](obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.where(obj, attrs, true);
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity, value: -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed > result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity, value: Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array, using the modern version of the 
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sample **n** random values from an array.
  // If **n** is not specified, returns a single random element from the array.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (arguments.length < 2 || guard) {
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, value, context) {
      var result = {};
      var iterator = value == null ? _.identity : lookupIterator(value);
      each(obj, function(value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, key, value) {
    (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, key, value) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    return (n == null) || guard ? array[0] : slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) {
      return array[array.length - 1];
    } else {
      return slice.call(array, Math.max(array.length - n, 0));
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function(value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var length = _.max(_.pluck(arguments, "length").concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);

    while(idx < length) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context.
  _.partial = function(func) {
    var args = slice.call(arguments, 1);
    return function() {
      return func.apply(this, args.concat(slice.call(arguments)));
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) throw new Error("bindAll must be passed function names");
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function() {
      previous = options.leading === false ? 0 : new Date;
      timeout = null;
      result = func.apply(context, args);
    };
    return function() {
      var now = new Date;
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;
    return function() {
      context = this;
      args = arguments;
      timestamp = new Date();
      var later = function() {
        var last = (new Date()) - timestamp;
        if (last < wait) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) result = func.apply(context, args);
        }
      };
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

}).call(this);

},{}],163:[function(require,module,exports){
var _ = require('underscore'),
  isServer = typeof window === 'undefined';

// Lazy-required.
var BaseView = null,
    oldEach;

module.exports = function(Handlebars, getTemplate) {
  oldEach = oldEach || Handlebars.helpers.each;

  return {
    view: function(viewName, options) {
      var ViewClass, html, viewOptions, view;

      if (!BaseView) {
        BaseView = require('rendr/shared/base/view');
      }
      viewOptions = options.hash || {};

      // Pass through a reference to the app.
      var app = getProperty('_app', this, options);
      if (app) {
        viewOptions.app = app;
        viewName = app.modelUtils.underscorize(viewName);
      } else{
        throw new Error("An App instance is required when rendering a view, it could not be extracted from the options.")
      }

      // Pass through a reference to the parent view.
      var parentView = getProperty('_view', this, options);
      if (parentView) {
        viewOptions.parentView = parentView;
      }

      // get the Backbone.View based on viewName
      ViewClass = BaseView.getView(viewName, app.options.entryPath);
      view = new ViewClass(viewOptions);

      // create the outerHTML using className, tagName
      html = view.getHtml();
      return new Handlebars.SafeString(html);
    },

    partial: function(templateName, options) {
      var data, html, context, template;

      template = getTemplate(templateName);

      context = options.hash || {};

      // First try to use Handlebars' hash arguments as the context for the
      // partial, if present.
      //
      // ex: `{{partial "users/photo" user=user}}`
      if (_.isEmpty(context)) {
        // If there are no hash arguments given, then inherit the parent context.
        //
        // ex: `{{partial "users/photo"}}`
        context = this;
      } else {
        // If a hash argument is given with key `context`, then use that as the context.
        //
        // ex: `{{partial "users/photo" context=user}}`
        if (context.hasOwnProperty('context')) {
          context = context.context;
        }
      }
      context = _.clone(context);

      context._app = getProperty('_app', this, options);
      html = template(context);
      return new Handlebars.SafeString(html);
    },

    json: function(object, spacing) {
      return new Handlebars.SafeString(JSON.stringify(object, null, spacing) || 'null');
    },

    /**
     * Extend `each` to pass through important context.
     */
    each: function(context, options) {
      options.data = Handlebars.createFrame(options.data || {});

      // Make sure `this._app`, `this._view`, etc are available.
      _.extend(options.data, getOptionsFromContext(this));

      // Call the original helper with new context.
      return oldEach.call(this, context, options);
    }
  };
};

/**
 * Grab important underscored properties from the current context.
 * These properties come from BaseView::decorateTemplateData().
 */
function getOptionsFromContext(obj) {
  var options, keys, value;

  keys = [
    '_app',
    '_view',
    '_model',
    '_collection'
  ];

  options = keys.reduce(function(memo, key) {
    value = obj[key];
    if (value) {
      memo[key] = value;
    }
    return memo;
  }, {});

  return options;
}

/**
 * Get a property that is being passed down through helpers, such as `_app`
 * or `_view`. It can either live on the context, i.e. `this._app`, or in the
 * `options.data` object passed to the helper, i.e. `options.data._app`, in the
 * case of a block helper like `each`.
 */
function getProperty(key, context, options) {
  return context[key] || (options.data || {})[key];
}

},{"rendr/shared/base/view":174,"underscore":162}],164:[function(require,module,exports){
var cachedTemplates = {};

module.exports = function(Handlebars) {

  /**
   * Provide a way for apps to specify that different template name patterns
   * should use different compiled template files.
   *
   */
  var templatePatterns = [];

  /**
   * Given a template name, return the compiled Handlebars template.
   */
  function getTemplate(templateName) {
    /**
     * Find the correct source file for this template.
     */
    var src = getSrcForTemplate(templateName);

    /**
    * Allow compiledTemplates to be created asynchronously by lazy-requiring it.
    */
    if (!cachedTemplates[src]) {
      cachedTemplates[src] = require(src);

      /**
       * Make it play nicely with both AMD and CommonJS.
       * The `grunt-contrib-handlebars` module  produces different stucture
       * of compiled templates with `amd` vs `commonjs` options. Accommodate
       * both options here. the `amd` option results in templates as an Object,
       * whereas the `commonjs` option results in templates as a Function.
       */
      if (typeof cachedTemplates[src] == 'function') {
        cachedTemplates[src] = cachedTemplates[src](Handlebars);
      }
    }

    return cachedTemplates[src][templateName];
  }

  /**
   * For a given template name, find the correct compiled templates source file
   * based on pattern matching on the template name.
   */
  function getSrcForTemplate(templateName) {
    var currentPattern = templatePatterns.filter(function(obj) {
      return obj.pattern.test(templateName);
    })[0];

    if (currentPattern == null) {
      throw new Error('No pattern found to match template "' + templateName + '".');
    }

    return currentPattern.src;
  }

  return {
    getTemplate: getTemplate,
    getSrcForTemplate: getSrcForTemplate,
    templatePatterns: templatePatterns
  }
};

},{}],165:[function(require,module,exports){
var _ = require('underscore'),
    Backbone = require('backbone'),
    BaseView = require('../shared/base/view'),
    $ = (typeof window !== 'undefined' && window.$) || require('jquery');

Backbone.$ = $;

module.exports = BaseView.extend({
  el: 'body',

  constructor: function() {
    BaseView.apply(this, arguments);

    _.defaults(this.options, {
      contentEl: '#content'
    });

    /**
     * Grab the element that contains the main view.
     */
    this.$content = $(this.options.contentEl);
    this._bindInterceptClick();
  },

  hasPushState: typeof window !== "undefined" && window.history.pushState != null,

  render: function() {},

  setCurrentView: function(view) {
    this.$content.html(view.el);
    view.render();
  },

  _bindInterceptClick: function() {
    this.$el.on('click', 'a:not([data-pass-thru])', this._interceptClick.bind(this));
  },

  _interceptClick: function(e) {
    /**
     * We want the actual value of the attribute, rather than the
     * full URL, so we use jQuery instead of just e.currentTarget.href
     */
    var href = $(e.currentTarget).attr('href');
    if (this.shouldInterceptClick(href, e.currentTarget, e)) {
      e.preventDefault();
      this.app.router.redirectTo(href);
    }
  },

  shouldInterceptClick: function(href, el, e) {
    var hashParts, isHashClick;

    if (!(href && this.hasPushState) || e.metaKey || e.shiftKey) {
      return false;
    }

    hashParts = href.split('#');
    isHashClick = hashParts.length > 1 && hashParts[0] === window.location.pathname;
    return !isHashClick && href.slice(0, 1) === '/' && href.slice(0, 2) !== '//';
  }

});

},{"../shared/base/view":174,"backbone":168,"jquery":"mGNb6W","underscore":169}],166:[function(require,module,exports){
/**
 * Since we make rendr files AMD friendly on app setup stage
 * we need to pretend that this code is pure commonjs
 * means no AMD-style require calls
 */
var requireAMD = require;

var _ = require('underscore'),
    Backbone = require('backbone'),
    BaseRouter = require('../shared/base/router'),
    BaseView = require('../shared/base/view'),
    $ = (typeof window !== 'undefined' && window.$) || require('jquery'),
    extractParamNamesRe = /:(\w+)/g,
    plusRe = /\+/g,
    firstRender = true,
    defaultRootPath = '';

Backbone.$ = $;

function noop() {}

module.exports = ClientRouter;

function ClientRouter(options) {
  this._router = new Backbone.Router();
  BaseRouter.apply(this, arguments);
}

/**
 * Set up inheritance.
 */
ClientRouter.prototype = Object.create(BaseRouter.prototype);
ClientRouter.prototype.constructor = ClientRouter;

ClientRouter.prototype.currentFragment = null;

ClientRouter.prototype.previousFragment = null;

/**
 * In a controller action, can access the current route
 * definition with `this.currentRoute`.
 */
ClientRouter.prototype.currentRoute = null;

/**
 * Instance of Backbone.Router used to manage browser history.
 */
ClientRouter.prototype._router = null;

/**
 * We need to reverse the routes in the client because
 * Backbone.History matches in reverse.
 */
ClientRouter.prototype.reverseRoutes = true;

ClientRouter.prototype.initialize = function(options) {
  this.app = options.app;

  var AppView = this.options.appViewClass;

  // We do this here so that it's available in AppView initialization.
  this.app.router = this;

  this.on('route:add', this.addBackboneRoute, this);
  this.on('action:start', this.trackAction, this);
  this.app.on('reload', this.renderView, this);

  this.appView = new AppView({
    app: this.app
  });

  this.appView.render();
  this.buildRoutes();
  this.postInitialize();
};

ClientRouter.prototype.postInitialize = noop;

/**
 * Piggyback on adding new route definition events
 * to also add to Backbone.Router.
 */
ClientRouter.prototype.addBackboneRoute = function(routeObj) {
  var handler, name, pattern, route;

  // Backbone.History wants no leading slash on strings.
  pattern = (routeObj[0] instanceof RegExp) ? routeObj[0] : routeObj[0].slice(1);
  route = routeObj[1];
  handler = routeObj[2];
  name = route.controller + ":" + route.action;

  this._router.route(pattern, name, handler);
};

ClientRouter.prototype.getHandler = function(action, pattern, route) {
  var router = this;

  // abstract action call
  function actionCall(action, params) {
    action.call(router, params, router.getRenderCallback(route));
  }

  // This returns a function which is called by Backbone.history.
  return function() {
    var params, paramsArray, redirect;

    router.trigger('action:start', route, firstRender);
    router.currentRoute = route;

    if (firstRender) {
      firstRender = false;
      BaseView.attach(router.app, null, function(views) {
        router.currentView = router.getMainView(views);
        router.trigger('action:end', route, true);
      });
    } else {
      paramsArray = _.toArray(arguments);
      params = router.getParamsHash(pattern, paramsArray, window.location.search);

      redirect = router.getRedirect(route, params);
      /**
       * If `redirect` is present, then do a redirect and return.
       */
      if (redirect != null) {
        router.redirectTo(redirect, {replace: true});
      } else {
        if (!action) {
          throw new Error("Missing action \"" + route.action + "\" for controller \"" + route.controller + "\"");
        } else if (typeof action == 'string') {
          // in AMD environment action is the string containing path to the controller
          // which will be loaded async (might be preloaded)
          // Only used in AMD environment
          requireAMD([action], function(controller) {
            // check we have everything we need
            if (typeof controller[route.action] != 'function') {
              throw new Error("Missing action \"" + route.action + "\" for controller \"" + route.controller + "\"");
            }
            actionCall(controller[route.action], params);
          });
        } else {
          actionCall(action, params);
        }
      }
    }
  };
};

/**
 * Can be overridden by applications
 * if the initial render is more complicated.
 */
ClientRouter.prototype.getMainView = function(views) {
  var $content = this.appView.$content;
  return _.find(views, function(view) {
    return view.$el.parent().is($content);
  });
};

/**
 * Proxy to Backbone.Router.
 */
ClientRouter.prototype.navigate = function(path, options) {
  var fragment = Backbone.history.getFragment(path);

  // check if local router can handle route
  if (this.matchesAnyRoute(fragment)) {
    this._router.navigate.apply(this._router, arguments);
  } else {
    this.redirectTo(fragment, {pushState: false});
  }
};

ClientRouter.prototype.getParamsHash = function(pattern, paramsArray, search) {
  var paramNames, params, query;

  if (pattern instanceof RegExp) {
    paramNames = paramsArray.map(function(val, i) { return String(i); });
  } else {
    paramNames = (pattern.match(extractParamNamesRe) || []).map(function(name) {
      return name.slice(1);
    });
  }

  params = (paramNames || []).reduce(function(memo, name, i) {
    memo[name] = decodeURIComponent(paramsArray[i]);
    return memo;
  }, {});

  query = search.slice(1).split('&').reduce(function(memo, queryPart) {
    var parts = queryPart.split('=');
    if (parts.length > 1) {
      memo[parts[0]] = decodeURIComponent(parts[1].replace(plusRe, ' '));
    }
    return memo;
  }, {});

  return _.extend(query, params);
};

ClientRouter.prototype.matchingRoute = function(path) {
  return _.find(Backbone.history.handlers, function(handler) {
    return handler.route.test(path);
  });
};

ClientRouter.prototype.matchesAnyRoute = function(path) {
  return this.matchingRoute(path) != null;
};

ClientRouter.prototype.redirectTo = function(path, options) {
  var hashParts;

  if (options == null) {
    options = {};
  }
  _.defaults(options, {
    trigger: true,
    pushState: true,
    replace: false
  });

  if (options.pushState === false) {
    // Do a full-page redirect.
    window.location.href = path;
  } else {
    // Do a pushState navigation.
    hashParts = path.split('#');
    path = hashParts[0];

    // But then trigger the hash afterwards.
    if (hashParts.length > 1) {
      this.once('action:end', function() {
        window.location.hash = hashParts[1];
      });
    }

    // Ignore hash for routing.
    this.navigate(path, options);
  }
};

ClientRouter.prototype.handleErr = function(err, route) {
  this.trigger('action:error', err, route);
}

ClientRouter.prototype.getRenderCallback = function(route) {
  return function(err, viewPath, locals) {
    if (err) return this.handleErr(err, route);

    var View, _router = this;

    if (this.currentView) {
      this.currentView.remove();
    }

    var defaults = this.defaultHandlerParams(viewPath, locals, route);
    viewPath = defaults[0], locals = defaults[1];

    locals = locals || {};
    _.extend(locals, { fetch_summary: BaseView.extractFetchSummary(this.app.modelUtils, locals) });

    // Inject the app.
    locals.app = this.app;
    this.getView(viewPath, this.options.entryPath, function(View) {
      _router.currentView = new View(locals);
      _router.renderView();

      _router.trigger('action:end', route, firstRender);
    });
  }.bind(this);
};

ClientRouter.prototype.renderView = function() {
  this.appView.setCurrentView(this.currentView);
};

ClientRouter.prototype.start = function() {
  Backbone.history.start({
    pushState: true,
    hashChange: false,
    root: this.options.rootPath || defaultRootPath
  });
};

ClientRouter.prototype.trackAction = function() {
  this.previousFragment = this.currentFragment;
  this.currentFragment = Backbone.history.getFragment();
};

ClientRouter.prototype.getView = function(key, entryPath, callback) {
  var View = BaseView.getView(key, entryPath, function(View) {
    // TODO: Make it function (err, View)
    if (!_.isFunction(View)) {
      throw new Error("View '" + key + "' not found.");
    }

    callback(View);
  });
};

},{"../shared/base/router":173,"../shared/base/view":174,"backbone":168,"jquery":"mGNb6W","underscore":169}],167:[function(require,module,exports){
(function (process){
/*global setImmediate: false, setTimeout: false, console: false */
(function () {

    var async = {};

    // global on the server, window in the browser
    var root, previous_async;

    root = this;
    if (root != null) {
      previous_async = root.async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    function only_once(fn) {
        var called = false;
        return function() {
            if (called) throw new Error("Callback was already called.");
            called = true;
            fn.apply(root, arguments);
        }
    }

    //// cross-browser compatiblity functions ////

    var _each = function (arr, iterator) {
        if (arr.forEach) {
            return arr.forEach(iterator);
        }
        for (var i = 0; i < arr.length; i += 1) {
            iterator(arr[i], i, arr);
        }
    };

    var _map = function (arr, iterator) {
        if (arr.map) {
            return arr.map(iterator);
        }
        var results = [];
        _each(arr, function (x, i, a) {
            results.push(iterator(x, i, a));
        });
        return results;
    };

    var _reduce = function (arr, iterator, memo) {
        if (arr.reduce) {
            return arr.reduce(iterator, memo);
        }
        _each(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    };

    var _keys = function (obj) {
        if (Object.keys) {
            return Object.keys(obj);
        }
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////
    if (typeof process === 'undefined' || !(process.nextTick)) {
        if (typeof setImmediate === 'function') {
            async.nextTick = function (fn) {
                // not a direct alias for IE10 compatibility
                setImmediate(fn);
            };
            async.setImmediate = async.nextTick;
        }
        else {
            async.nextTick = function (fn) {
                setTimeout(fn, 0);
            };
            async.setImmediate = async.nextTick;
        }
    }
    else {
        async.nextTick = process.nextTick;
        if (typeof setImmediate !== 'undefined') {
            async.setImmediate = function (fn) {
              // not a direct alias for IE10 compatibility
              setImmediate(fn);
            };
        }
        else {
            async.setImmediate = async.nextTick;
        }
    }

    async.each = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        _each(arr, function (x) {
            iterator(x, only_once(function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed >= arr.length) {
                        callback(null);
                    }
                }
            }));
        });
    };
    async.forEach = async.each;

    async.eachSeries = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        var iterate = function () {
            iterator(arr[completed], function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed >= arr.length) {
                        callback(null);
                    }
                    else {
                        iterate();
                    }
                }
            });
        };
        iterate();
    };
    async.forEachSeries = async.eachSeries;

    async.eachLimit = function (arr, limit, iterator, callback) {
        var fn = _eachLimit(limit);
        fn.apply(null, [arr, iterator, callback]);
    };
    async.forEachLimit = async.eachLimit;

    var _eachLimit = function (limit) {

        return function (arr, iterator, callback) {
            callback = callback || function () {};
            if (!arr.length || limit <= 0) {
                return callback();
            }
            var completed = 0;
            var started = 0;
            var running = 0;

            (function replenish () {
                if (completed >= arr.length) {
                    return callback();
                }

                while (running < limit && started < arr.length) {
                    started += 1;
                    running += 1;
                    iterator(arr[started - 1], function (err) {
                        if (err) {
                            callback(err);
                            callback = function () {};
                        }
                        else {
                            completed += 1;
                            running -= 1;
                            if (completed >= arr.length) {
                                callback();
                            }
                            else {
                                replenish();
                            }
                        }
                    });
                }
            })();
        };
    };


    var doParallel = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.each].concat(args));
        };
    };
    var doParallelLimit = function(limit, fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [_eachLimit(limit)].concat(args));
        };
    };
    var doSeries = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.eachSeries].concat(args));
        };
    };


    var _asyncMap = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (err, v) {
                results[x.index] = v;
                callback(err);
            });
        }, function (err) {
            callback(err, results);
        });
    };
    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = function (arr, limit, iterator, callback) {
        return _mapLimit(limit)(arr, iterator, callback);
    };

    var _mapLimit = function(limit) {
        return doParallelLimit(limit, _asyncMap);
    };

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.reduce = function (arr, memo, iterator, callback) {
        async.eachSeries(arr, function (x, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };
    // inject alias
    async.inject = async.reduce;
    // foldl alias
    async.foldl = async.reduce;

    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, function (x) {
            return x;
        }).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };
    // foldr alias
    async.foldr = async.reduceRight;

    var _filter = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.filter = doParallel(_filter);
    async.filterSeries = doSeries(_filter);
    // select alias
    async.select = async.filter;
    async.selectSeries = async.filterSeries;

    var _reject = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (!v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.reject = doParallel(_reject);
    async.rejectSeries = doSeries(_reject);

    var _detect = function (eachfn, arr, iterator, main_callback) {
        eachfn(arr, function (x, callback) {
            iterator(x, function (result) {
                if (result) {
                    main_callback(x);
                    main_callback = function () {};
                }
                else {
                    callback();
                }
            });
        }, function (err) {
            main_callback();
        });
    };
    async.detect = doParallel(_detect);
    async.detectSeries = doSeries(_detect);

    async.some = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (v) {
                    main_callback(true);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(false);
        });
    };
    // any alias
    async.any = async.some;

    async.every = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (!v) {
                    main_callback(false);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(true);
        });
    };
    // all alias
    async.all = async.every;

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                var fn = function (left, right) {
                    var a = left.criteria, b = right.criteria;
                    return a < b ? -1 : a > b ? 1 : 0;
                };
                callback(null, _map(results.sort(fn), function (x) {
                    return x.value;
                }));
            }
        });
    };

    async.auto = function (tasks, callback) {
        callback = callback || function () {};
        var keys = _keys(tasks);
        if (!keys.length) {
            return callback(null);
        }

        var results = {};

        var listeners = [];
        var addListener = function (fn) {
            listeners.unshift(fn);
        };
        var removeListener = function (fn) {
            for (var i = 0; i < listeners.length; i += 1) {
                if (listeners[i] === fn) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        var taskComplete = function () {
            _each(listeners.slice(0), function (fn) {
                fn();
            });
        };

        addListener(function () {
            if (_keys(results).length === keys.length) {
                callback(null, results);
                callback = function () {};
            }
        });

        _each(keys, function (k) {
            var task = (tasks[k] instanceof Function) ? [tasks[k]]: tasks[k];
            var taskCallback = function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (args.length <= 1) {
                    args = args[0];
                }
                if (err) {
                    var safeResults = {};
                    _each(_keys(results), function(rkey) {
                        safeResults[rkey] = results[rkey];
                    });
                    safeResults[k] = args;
                    callback(err, safeResults);
                    // stop subsequent errors hitting callback multiple times
                    callback = function () {};
                }
                else {
                    results[k] = args;
                    async.setImmediate(taskComplete);
                }
            };
            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
            var ready = function () {
                return _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true) && !results.hasOwnProperty(k);
            };
            if (ready()) {
                task[task.length - 1](taskCallback, results);
            }
            else {
                var listener = function () {
                    if (ready()) {
                        removeListener(listener);
                        task[task.length - 1](taskCallback, results);
                    }
                };
                addListener(listener);
            }
        });
    };

    async.waterfall = function (tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor !== Array) {
          var err = new Error('First argument to waterfall must be an array of functions');
          return callback(err);
        }
        if (!tasks.length) {
            return callback();
        }
        var wrapIterator = function (iterator) {
            return function (err) {
                if (err) {
                    callback.apply(null, arguments);
                    callback = function () {};
                }
                else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    async.setImmediate(function () {
                        iterator.apply(null, args);
                    });
                }
            };
        };
        wrapIterator(async.iterator(tasks))();
    };

    var _parallel = function(eachfn, tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor === Array) {
            eachfn.map(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            eachfn.each(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.parallel = function (tasks, callback) {
        _parallel({ map: async.map, each: async.each }, tasks, callback);
    };

    async.parallelLimit = function(tasks, limit, callback) {
        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
    };

    async.series = function (tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor === Array) {
            async.mapSeries(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            async.eachSeries(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.iterator = function (tasks) {
        var makeCallback = function (index) {
            var fn = function () {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            };
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            };
            return fn;
        };
        return makeCallback(0);
    };

    async.apply = function (fn) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(
                null, args.concat(Array.prototype.slice.call(arguments))
            );
        };
    };

    var _concat = function (eachfn, arr, fn, callback) {
        var r = [];
        eachfn(arr, function (x, cb) {
            fn(x, function (err, y) {
                r = r.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, r);
        });
    };
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        if (test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.whilst(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.doWhilst = function (iterator, test, callback) {
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            if (test()) {
                async.doWhilst(iterator, test, callback);
            }
            else {
                callback();
            }
        });
    };

    async.until = function (test, iterator, callback) {
        if (!test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.until(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.doUntil = function (iterator, test, callback) {
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            if (!test()) {
                async.doUntil(iterator, test, callback);
            }
            else {
                callback();
            }
        });
    };

    async.queue = function (worker, concurrency) {
        if (concurrency === undefined) {
            concurrency = 1;
        }
        function _insert(q, data, pos, callback) {
          if(data.constructor !== Array) {
              data = [data];
          }
          _each(data, function(task) {
              var item = {
                  data: task,
                  callback: typeof callback === 'function' ? callback : null
              };

              if (pos) {
                q.tasks.unshift(item);
              } else {
                q.tasks.push(item);
              }

              if (q.saturated && q.tasks.length === concurrency) {
                  q.saturated();
              }
              async.setImmediate(q.process);
          });
        }

        var workers = 0;
        var q = {
            tasks: [],
            concurrency: concurrency,
            saturated: null,
            empty: null,
            drain: null,
            push: function (data, callback) {
              _insert(q, data, false, callback);
            },
            unshift: function (data, callback) {
              _insert(q, data, true, callback);
            },
            process: function () {
                if (workers < q.concurrency && q.tasks.length) {
                    var task = q.tasks.shift();
                    if (q.empty && q.tasks.length === 0) {
                        q.empty();
                    }
                    workers += 1;
                    var next = function () {
                        workers -= 1;
                        if (task.callback) {
                            task.callback.apply(task, arguments);
                        }
                        if (q.drain && q.tasks.length + workers === 0) {
                            q.drain();
                        }
                        q.process();
                    };
                    var cb = only_once(next);
                    worker(task.data, cb);
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            }
        };
        return q;
    };

    async.cargo = function (worker, payload) {
        var working     = false,
            tasks       = [];

        var cargo = {
            tasks: tasks,
            payload: payload,
            saturated: null,
            empty: null,
            drain: null,
            push: function (data, callback) {
                if(data.constructor !== Array) {
                    data = [data];
                }
                _each(data, function(task) {
                    tasks.push({
                        data: task,
                        callback: typeof callback === 'function' ? callback : null
                    });
                    if (cargo.saturated && tasks.length === payload) {
                        cargo.saturated();
                    }
                });
                async.setImmediate(cargo.process);
            },
            process: function process() {
                if (working) return;
                if (tasks.length === 0) {
                    if(cargo.drain) cargo.drain();
                    return;
                }

                var ts = typeof payload === 'number'
                            ? tasks.splice(0, payload)
                            : tasks.splice(0);

                var ds = _map(ts, function (task) {
                    return task.data;
                });

                if(cargo.empty) cargo.empty();
                working = true;
                worker(ds, function () {
                    working = false;

                    var args = arguments;
                    _each(ts, function (data) {
                        if (data.callback) {
                            data.callback.apply(null, args);
                        }
                    });

                    process();
                });
            },
            length: function () {
                return tasks.length;
            },
            running: function () {
                return working;
            }
        };
        return cargo;
    };

    var _console_fn = function (name) {
        return function (fn) {
            var args = Array.prototype.slice.call(arguments, 1);
            fn.apply(null, args.concat([function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (typeof console !== 'undefined') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _each(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            }]));
        };
    };
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        hasher = hasher || function (x) {
            return x;
        };
        var memoized = function () {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (key in memo) {
                callback.apply(null, memo[key]);
            }
            else if (key in queues) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([function () {
                    memo[key] = arguments;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                      q[i].apply(null, arguments);
                    }
                }]));
            }
        };
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
      return function () {
        return (fn.unmemoized || fn).apply(null, arguments);
      };
    };

    async.times = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.map(counter, iterator, callback);
    };

    async.timesSeries = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.mapSeries(counter, iterator, callback);
    };

    async.compose = function (/* functions... */) {
        var fns = Array.prototype.reverse.call(arguments);
        return function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            async.reduce(fns, args, function (newargs, fn, cb) {
                fn.apply(that, newargs.concat([function () {
                    var err = arguments[0];
                    var nextargs = Array.prototype.slice.call(arguments, 1);
                    cb(err, nextargs);
                }]))
            },
            function (err, results) {
                callback.apply(that, [err].concat(results));
            });
        };
    };

    var _applyEach = function (eachfn, fns /*args...*/) {
        var go = function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            return eachfn(fns, function (fn, cb) {
                fn.apply(that, args.concat([cb]));
            },
            callback);
        };
        if (arguments.length > 2) {
            var args = Array.prototype.slice.call(arguments, 2);
            return go.apply(this, args);
        }
        else {
            return go;
        }
    };
    async.applyEach = doParallel(_applyEach);
    async.applyEachSeries = doSeries(_applyEach);

    async.forever = function (fn, callback) {
        function next(err) {
            if (err) {
                if (callback) {
                    return callback(err);
                }
                throw err;
            }
            fn(next);
        }
        next();
    };

    // AMD / RequireJS
    if (typeof define !== 'undefined' && define.amd) {
        define([], function () {
            return async;
        });
    }
    // Node.js
    else if (typeof module !== 'undefined' && module.exports) {
        module.exports = async;
    }
    // included directly via <script> tag
    else {
        root.async = async;
    }

}());

}).call(this,require("/home/mauricio/src/arwen/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"))
},{"/home/mauricio/src/arwen/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":129}],168:[function(require,module,exports){
//     Backbone.js 1.1.2

//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(root, factory) {

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore');
    factory(root, exports, _);

  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(this, function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.1.2';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                  (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo) return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object') callback = this;
      if (obj) (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true}, options);

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !options.wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = models[i] = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model, options);
      }
      return singular ? models[0] : models;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : _.clone(models);
      var i, l, id, model, attrs, existing, sort;
      var at = options.at;
      var targetModel = this.model;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        attrs = models[i] || {};
        if (attrs instanceof Model) {
          id = model = attrs;
        } else {
          id = attrs[targetModel.prototype.idAttribute || 'id'];
        }

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(id)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge) {
            attrs = attrs === model ? model.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);
          this._addReference(model, options);
        }

        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
        modelMap[model.id] = true;
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || (order && order.length)) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (i = 0, l = toAdd.length; i < l; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (i = 0, l = orderedModels.length; i < l; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0, l = toAdd.length; i < l; i++) {
          (model = toAdd[i]).trigger('add', model, this, options);
        }
        if (sort || (order && order.length)) this.trigger('sort', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) return attrs;
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      if (model.id != null) this._byId[model.id] = model;
      if (!model.collection) model.collection = this;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
    'lastIndexOf', 'isEmpty', 'chain', 'sample'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    options || (options = {});
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && noXhrPatch) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  var noXhrPatch =
    typeof window !== 'undefined' && !!window.ActiveXObject &&
      !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        router.execute(callback, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      return this.location.pathname.replace(/[^\/]$/, '$&/') === this.root;
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = decodeURI(this.location.pathname + this.location.search);
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
        this.iframe = frame.hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          this.fragment = this.getFragment(null, true);
          this.location.replace(this.root + '#' + this.fragment);
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot() && loc.hash) {
          this.fragment = this.getHash().replace(routeStripper, '');
          this.history.replaceState({}, document.title, this.root + this.fragment);
        }

      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      var url = this.root + (fragment = this.getFragment(fragment || ''));

      // Strip the hash for matching.
      fragment = fragment.replace(pathStripper, '');

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // Don't include a trailing slash on the root.
      if (fragment === '' && url !== '/') url = url.slice(0, -1);

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));

},{"underscore":169}],169:[function(require,module,exports){
module.exports=require(162)
},{}],170:[function(require,module,exports){
/**
 * This is the app instance that is shared between client and server.
 * The client also subclasses it for client-specific stuff.
 */

var Backbone = require('backbone'),
    Fetcher = require('./fetcher'),
    ModelUtils = require('./modelUtils'),
    isServer = (typeof window === 'undefined'),
    ClientRouter;

if (!isServer) {
  ClientRouter = require('app/router');
  Backbone.$ = window.$ || require('jquery');
}

module.exports = Backbone.Model.extend({

  defaults: {
    loading: false,
    templateAdapter: 'rendr-handlebars'
  },

  /**
   * @shared
   */
  constructor: function(attributes, options) {
    attributes = attributes || {};
    this.options = options || {};

    var entryPath = this.options.entryPath || '';
    if (!isServer) {
      // the entry path must always be empty for the client
      entryPath =  '';
    }

    this.modelUtils = this.options.modelUtils || new ModelUtils(entryPath);

    /**
     * On the server-side, you can access the Express request, `req`.
     */
    if (this.options.req) {
      this.req = this.options.req;
    }

    /**
     * Initialize the `templateAdapter`, allowing application developers to use whichever
     * templating system they want.
     *
     * We can't use `this.get('templateAdapter')` here because `Backbone.Model`'s
     * constructor has not yet been called.
     */
    var templateAdapterModule = attributes.templateAdapter || this.defaults.templateAdapter;
    this.templateAdapter = require(templateAdapterModule)({entryPath: entryPath});

    /**
     * Instantiate the `Fetcher`, which is used on client and server.
     */
    this.fetcher = new Fetcher({
      app: this
    });

    /**
     * Initialize the `ClientRouter` on the client-side.
     */
    if (!isServer) {
      new ClientRouter({
        app: this,
        entryPath: entryPath,
        appViewClass: this.getAppViewClass(),
        rootPath: attributes.rootPath
      });
    }

    Backbone.Model.apply(this, arguments);

    if (this.postInitialize) {
      console.warn('`postInitialize` is deprecated, please use `initialize`');
      this.postInitialize();
    }
  },

  /**
   * @shared
   */
  fetch: function() {
    this.fetcher.fetch.apply(this.fetcher, arguments);
  },

  /**
   * @client
   */
  getAppViewClass: function () {
    return require('../client/app_view');
  },

  /**
   * @client
   */
  bootstrapData: function(modelMap) {
    this.fetcher.bootstrapData(modelMap);
  },

  /**
   * @client
   */
  start: function() {
    this.router.start();
    this.trigger('start');
  }
});

},{"../client/app_view":165,"./fetcher":175,"./modelUtils":176,"app/router":"86KJBY","backbone":168,"jquery":"mGNb6W"}],171:[function(require,module,exports){
var _ = require('underscore'),
    Backbone = require('backbone'),
    syncer = require('../syncer'),
    BaseModel = require('./model'),
    Super = Backbone.Collection,
    isServer = (typeof window === 'undefined');

if (!isServer) {
  Backbone.$ = window.$ || require('jquery');
}

BaseCollection = Super.extend({

  model: BaseModel,

  /**
   * Provide the ability to set default params for every 'fetch' call.
   */
  defaultParams: null,

  constructor: function(models, options) {
    /**
     * Capture the options as instance variable.
     */
    this.options = options || {};

    /**
     * Store a reference to the app instance.
     */
    this.app = this.options.app;

    /**
     * Store a reference to the params that were used to
     * query for these models.
     */
    this.params = this.options.params || {};
    _.defaults(this.params, this.defaultParams || {});

    /**
     * Add 'meta' property to store the parts of the response
     * that aren't part of the jsonKey.
     */
    this.meta = {};
    if (_.isObject(this.options.meta)) {
      _.extend(this.meta, this.options.meta);
      delete this.options.meta;
    }

    Super.apply(this, arguments);
  },

  /**
   * Make sure that `model.app` is set for all operations like
   * `this.add()`, `this.reset()`, `this.set()`, `this.push()`, etc.
   */
  _prepareModel: function() {
    var model;
    model = Super.prototype._prepareModel.apply(this, arguments);
    model.app = this.app;
    return model;
  },

  /**
   * Idempotent parse
   */
  parse: function(resp, modifyInstance) {
    var jsonResp, meta, parsed;

    if (modifyInstance == null) {
      modifyInstance = true;
    }
    if (resp != null && this.jsonKey && (jsonResp = resp[this.jsonKey])) {
      if (modifyInstance) {
        meta = _.omit(resp, this.jsonKey);
        _.extend(this.meta, meta);
      }
      parsed = jsonResp;
    } else {
      parsed = resp;
    }
    return this.parseModels(parsed);
  },

  parseModels: function(resp) {
    var jsonKey, jsonKeyResp;

    resp = _.clone(resp);
    jsonKey = this.model.prototype.jsonKey;
    _.each(resp, function(modelResp, i) {
      jsonKeyResp = modelResp[jsonKey];
      if (jsonKeyResp) {
        resp[i] = jsonKeyResp;
      }
    });
    return resp;
  },

  fetch: function(options) {
    options = options || {};

    // Each time new models are fetched, store the params used.
    options.data = options.data || {};
    _.defaults(options.data, this.defaultParams || {});
    this.params = options.data;
    return Super.prototype.fetch.apply(this, arguments);
  },

  /**
   * Instance method to store the collection and its models.
   */
  store: function() {
    this.each(function(model) {
      model.store();
    });
    this.app.fetcher.collectionStore.set(this);
  }
});

/**
 * Mix-in the `syncer`, shared between `BaseModel` and `BaseCollection`, which
 * encapsulates logic for fetching data from the API.
 */
_.extend(BaseCollection.prototype, syncer);

module.exports = BaseCollection;

},{"../syncer":180,"./model":172,"backbone":168,"jquery":"mGNb6W","underscore":169}],172:[function(require,module,exports){
var _ = require('underscore'),
    Backbone = require('backbone'),
    syncer = require('../syncer'),
    isServer = (typeof window === 'undefined');

if (!isServer) {
  Backbone.$ = window.$ || require('jquery');
}

var BaseModel = Backbone.Model.extend({

  constructor: function(models, options) {
    // Capture the options as instance variable.
    this.options = options || {};

    // Store a reference to the app instance.
    this.app = this.options.app;

    if (!this.app && this.options.collection) {
      this.app = this.options.collection.app;
    }

    Backbone.Model.apply(this, arguments);

    this.on('change', this.store, this);
  },

  /**
   * Idempotent parse
   */
  parse: function(resp) {
    if (resp != null && this.jsonKey) {
      return resp[this.jsonKey] || resp;
    } else {
      return resp;
    }
  },

  /**
   * Instance method to store in the modelStore.
   */
  store: function() {
    this.app.fetcher.modelStore.set(this);
  }
});

/**
 * Mix-in the `syncer`, shared between `BaseModel` and `BaseCollection`, which
 * encapsulates logic for fetching data from the API.
 */
_.extend(BaseModel.prototype, syncer);

module.exports = BaseModel;

},{"../syncer":180,"backbone":168,"jquery":"mGNb6W","underscore":169}],173:[function(require,module,exports){
var _ = require('underscore'),
  Backbone = require('backbone'),
  isServer = (typeof window === 'undefined'),
  isAMDEnvironment = !isServer && (typeof define !== 'undefined');

if (!isServer) {
  Backbone.$ = window.$ || require('jquery');
}

function noop() {}

function stringRouteDefinitionToObject(element) {
  var parts = element.split('#');
  return {
    controller: parts[0],
    action: parts[1]
  };
}

function parseRouteDefinitions(definitions) {
  return definitions.reduce(function(route, element) {
    if (_.isString(element)) {
      element = stringRouteDefinitionToObject(element);
    }
    return _.extend(route, element);
  }, {});
}

/**
 * Base router class shared between ClientRouter and ServerRouter.
 */
function BaseRouter(options) {
  this.route = this.route.bind(this);
  this._routes = [];
  this._initOptions(options);
  this.initialize(options);
}

_.extend(BaseRouter.prototype, Backbone.Events, {
  /**
   * Config
   *   - errorHandler: function to correctly handle error
   *   - paths
   *     - entryPath (required)
   *     - routes (optional)
   *     - controllerDir (optional)
   */
  options: null,

  /**
   * Internally stored route definitions.
   */
  _routes: null,

  reverseRoutes: false,

  initialize: noop,

  _initOptions: function(options) {
    var entryPath;

    options = options || {};
    options.paths = options.paths || {};

    entryPath = options.paths.entryPath || options.entryPath;
    options.paths = _.defaults(options.paths, {
      entryPath: entryPath,
      routes: entryPath + 'app/routes',
      controllerDir: entryPath + 'app/controllers'
    });

    this.options = options;
  },

  getControllerPath: function(controllerName) {
    var controllerDir = this.options.paths.controllerDir;
    return controllerDir + '/' + controllerName + '_controller';
  },

  loadController: function(controllerName) {
    var controllerPath = this.getControllerPath(controllerName);
    return require(controllerPath);
  },

  getAction: function(route) {
    var controller, action;

    if (route.controller) {
      if (isAMDEnvironment) {
        action = this.getControllerPath(route.controller);
      } else {
        controller = this.loadController(route.controller);
        action = controller[route.action];
      }
    }

    return action;
  },

  getRedirect: function(route, params) {
    var redirect = route.redirect;

    if (typeof redirect === 'function') {
      redirect = redirect(params);
    }

    return redirect;
  },

  getRouteBuilder: function() {
    return require(this.options.paths.routes);
  },

  buildRoutes: function() {
    var routeBuilder = this.getRouteBuilder(),
      routes = [];

    function captureRoutes() {
      routes.push(_.toArray(arguments));
    }

    routeBuilder(captureRoutes);
    if (this.reverseRoutes) {
      routes = routes.reverse();
    }

    routes.forEach(this.addRouteDefinition, this);

    return this.routes();
  },

  addRouteDefinition: function(route) {
    try {
      this.route.apply(this, route);
    } catch (error) {
      error.message = 'Error building routes (' + error.message + ')';
      throw error;
    }
  },

  /**
   * Returns a copy of current route definitions.
   */
  routes: function() {
    return this._routes.slice().map(function(route) {
      return route.slice();
    });
  },

  /**
   * Method passed to routes file to build up routes definition.
   * Adds a single route definition.
   */
  route: function(pattern) {
    var action, definitions, handler, route, routeObj;

    definitions = _.toArray(arguments).slice(1);
    route = parseRouteDefinitions(definitions);
    action = this.getAction(route);

    if (!(pattern instanceof RegExp) && pattern.slice(0, 1) !== '/') {
      pattern = "/" + pattern;
    }

    handler = this.getHandler(action, pattern, route);
    routeObj = [pattern, route, handler];
    this._routes.push(routeObj);
    this.trigger('route:add', routeObj);
    return routeObj;
  },

  /**
   * Support omitting view path; default it to ":controller/:action".
   */
  defaultHandlerParams: function(viewPath, locals, route) {
    if (typeof viewPath !== 'string') {
      locals = viewPath;
      viewPath = route.controller + '/' + route.action;
    }
    return [viewPath, locals];
  },

  /**
   * Methods to be extended by subclasses.
   * -------------------------------------
   */

  /**
   * This is the method that renders the request.
   */
  getHandler: noop
});

module.exports = BaseRouter;
module.exports.setAMDEnvironment = function(flag) {
  isAMDEnvironment = flag;
};

},{"backbone":168,"jquery":"mGNb6W","underscore":169}],174:[function(require,module,exports){
/**
 * Since we make rendr files AMD friendly on app setup stage
 * we need to pretend that this code is pure commonjs
 * means no AMD-style require calls
 */
var requireAMD = require;

var _ = require('underscore'),
    Backbone = require('backbone'),
    async = require('async'),
    isServer = (typeof window === 'undefined'),
    BaseView;

if (!isServer) {
  Backbone.$ = window.$ || require('jquery');
}

function noop() {}

module.exports = BaseView = Backbone.View.extend({
  constructor: function(options) {
    var obj;

    this.options = options || {};

    this.parseOptions(options);

    this.name = this.name || this.app.modelUtils.underscorize(this.constructor.id || this.constructor.name);

    Backbone.View.apply(this, arguments);

    if (this.postInitialize) {
      console.warn('`postInitialize` is deprecated, please use `initialize`');
      this.postInitialize();
    }

    if ((obj = this.options.model || this.options.collection) && this.renderOnRefresh) {
      obj.on('refresh', this.render, this);
    }

    this.render = this.render.bind(this);
  },

  /**
   * Whether or not to re-render this view when the model or collection
   * emits a 'refresh' event. Used with 'model|collection.checkFresh()'.
   */
  renderOnRefresh: false,

  parseOptions: function(options) {
    /**
     * Populate `this.options` and alias as `options`.
     */
    options = _.extend(this.options, options || {});

    if (options.app != null) {
      this.app = this.options.app;
    } else {
      throw new Error("options.app expected when initializing a new view")
    }

    if (options.parentView != null) {
      this.parentView = options.parentView;
    }

    if (options.model != null) {
      if (!(options.model instanceof Backbone.Model) && options.model_name) {
        options.model = this.app.modelUtils.getModel(options.model_name, options.model, {
          parse: true
        });
      }
      options.model_name = options.model_name || this.app.modelUtils.modelName(options.model.constructor);
      options.model_id = options.model.id;
    }

    if (options.collection != null) {
      options.collection_name = options.collection_name || this.app.modelUtils.modelName(options.collection.constructor);
      options.collection_params = options.collection.params;
    }

    this.model = options.model;
    this.collection = options.collection;
  },

  /**
   * Key for the template
   */
  name: null,

  /**
   * Parent of the current view.
   * We make sure to stick this on the prototype as a runtime optimization
   * for V8. It's best not to add properties to the instance after initialization.
   */
  parentView: null,

  /**
   * Children of the current view.
   */
  childViews: null,

  /**
   * Flag whether or not the view is currently being viewed
   */
  viewing: false,

  /**
   * Gets array of child views by their name
   * Empty array is returned when no match is found
   */
  getChildViewsByName: function(name) {
    return _.where(this.childViews, {name: name});
  },

  /**
   * Get data for template.  This also acts as a view-model.
   * Try to return proper data if model or collection is available.
   */
  getTemplateData: function() {
    if (this.model) {
      return this.model.toJSON();
    } else if (this.collection) {
      return {
        models: this.collection.toJSON(),
        meta: this.collection.meta,
        params: this.collection.params
      };
    } else {
      return _.clone(this.options);
    }
  },

  /**
   * Add special properties `_app` and `_model` or `_collection` to pass to
   * the templates.
   */
  decorateTemplateData: function(data) {
    if (this.app) {
      data._app = this.app;
    }
    if (this.model) {
      data._model = this.model;
    }
    if (this.collection) {
      data._collection = this.collection;
    }
    data._view = this;
    return data;
  },

  getTemplateName: function() {
    return this.options.template_name || this.name;
  },

  /**
   * Get template function
   */
  getTemplate: function() {
    return this.app.templateAdapter.getTemplate(this.getTemplateName());
  },

  /**
   * Any options not to create data-attributes for.
   */
  nonAttributeOptions: ['id', 'className', 'tagName'],

  /**
   * Get HTML attributes to add to el.
   */
  getAttributes: function() {
    var attributes = {},
        fetchSummary = {},
        modelUtils = this.app.modelUtils,
        nonAttributeOptions = this.nonAttributeOptions;

    if (this.attributes) {
      _.extend(attributes, _.result(this, 'attributes'));
    }
    if (this.id) {
      attributes.id = _.result(this, "id");
    }
    if (this.className) {
      attributes['class'] = _.result(this, "className");
    }

    // Add `data-view` attribute with view key.
    // For now, view key is same as template.
    attributes['data-view'] = this.name;

    // Add model & collection meta data from options,
    // as well as any non-object option values.
    _.each(this.options, function(value, key) {

        if (!_.isObject(value) && !_.include(nonAttributeOptions, key)) {
          attributes["data-" + key] = value;
        }
    });
    fetchSummary = BaseView.extractFetchSummary(modelUtils, this.options);

    if (!_.isEmpty(fetchSummary)) {
      attributes['data-fetch_summary'] = JSON.stringify(fetchSummary);
    }
    return attributes;
  },

  /**
   * Turn template into HTML, minus the wrapper element.
   */
  getInnerHtml: function() {
    var template = this.getTemplate(),
        data;

    this._preRender();
    data = this.getTemplateData();
    data = this.decorateTemplateData(data);
    if (template == null) {
      throw new Error(this.name + ": template \"" + this.getTemplateName() + "\" not found.");
    }
    return template(data);
  },

  /**
   * Get the HTML for the view, including the wrapper element.
   */
  getHtml: function() {
    var html = this.getInnerHtml(),
        attributes = this.getAttributes(),
        tagName = _.result(this, "tagName"),
        attrString;

    attrString = _.inject(attributes, function(memo, value, key) {
      return memo += " " + key + "=\"" + _.escape(value) + "\"";
    }, '');

    return "<" + tagName + attrString + ">" + html + "</" + tagName + ">";
  },

  render: function() {
    var html = this.getInnerHtml();
    this.$el.html(html);

    // Because we only set the attributes of the outer element
    // when calling getHtml() (server), let's make sure it also
    // happens during render() (client).

    this.$el.attr(this.getAttributes());
    this._postRender();
    return this;
  },

  /**
   * If rendered on the client missing its data,
   * fetch it based on the parameters passed in.
   */
  fetchLazy: function() {
    var params = {},
        fetchSpec;

    params[this.options.param_name] = this.options.param_value;
    if (this.options.model_id != null) {
      params.id = this.options.model_id;
    }
    if (this.options.model_name != null) {
      fetchSpec = {
        model: {
          model: this.options.model_name,
          params: params
        }
      };
    } else if (this.options.collection_name != null) {
      fetchSpec = {
        collection: {
          collection: this.options.collection_name,
          params: params
        }
      };
    }
    this.setLoading(true);
    this.app.fetch(fetchSpec, this._fetchLazyCallback.bind(this));
  },

  _fetchLazyCallback: function(err, results) {
    this.setLoading(false);
    if (err) {
      console.log("FETCH ERR: " + err);
    } else if (this.viewing) {
      // It's possible that by the time the XHR returns, the user has navigated
      // away to a new page, check for whether we are viewing first
      this.parseOptions(results);
      this.render();
    }
  },

  /**
   * Anything to do before rendering on the client or server.
   * This is useful for i.e. accessing @model in the client after
   * @hydrate() is called, but before @getTemplateData() is called.
   */
  _preRender: function() {
    this.preRender();
    this.trigger('preRender');
  },

  /**
   * Anything to do after rendering on the client, such initializing jQuery
   * plugins like sliders, slideshows, etc.
   */
  _postRender: function() {
    this.attachChildViews();
    this.postRender();
    this.trigger('postRender');
  },

  /**
   * To be overridden by subclasses.
   */
  preRender: noop,

  /**
   * To be overridden by subclasses.
   */
  postRender: noop,

  /**
   * Hydrate this view with the data it needs, if being attached
   * to pre-exisitng DOM.
   */
  hydrate: function(callback) {
    var fetchSummary = this.options.fetch_summary;
    if (!_.isEmpty(fetchSummary)) {
      this.app.fetcher.hydrate(fetchSummary, {
        app: this.app
      }, function(err, results) {
        this.parseOptions(results);
        callback(err);
      }.bind(this));
    } else {
      callback(null);
    }
  },

  setLoading: function(loading) {
    this.$el.toggleClass('loading', loading);
    this.trigger('loading', loading);
  },

  /**
   * When HTML is already present (rendered by server),
   * this is what gets called to bind to the element.
   */
  attach: function(element, parentView) {
    var $el = $(element);
    $el.data('view-attached', true);
    this.setElement($el);

    /**
     * Store a reference to the parent view.
     */
    this.parentView = parentView;

    /**
     * When the view is attached, flip viewing to true
     */
    this.viewing = true;

    /**
     * Hydrate looks if there is a model or collection associated
     * with this view, and tries to load it from memory.
     */
    this.hydrate(function(err) {
      /**
       * Call preRender() so we can access things setup by @hydrate()
       * (like @model) in i.e. @getTemplateData().
       */
      this._preRender();

      /**
       * We have to call postRender() so client-only things happen,
       * i.e. initialize slideshows, etc.
       */
      this._postRender();

      /**
       * If the view says it should try to be lazy loaded, and it doesn't
       * have a model or collection, then do so.
       */
      if (this.options.lazy === true && this.options.collection == null && this.options.model == null) {
        this.fetchLazy();
      }
      this.trigger('attach');
    }.bind(this));

  },

  /**
   * Happens client-side.
   * Find all of sub view DOM elements
   * Get the view key
   * Call this.getView()
   * Attach childView
   */
  attachChildViews: function() {
    var _baseView = this;

    // Remove all child views in case we are re-rendering through
    // manual .render() or 'refresh' being triggered on the view.
    this.removeChildViews();
    BaseView.attach(this.app, this, function(views) {
      _baseView.childViews = views;
    });
  },

  removeChildViews: function() {
    (this.childViews || []).forEach(function(view) {
      view.remove();
    });
  },

  remove: function() {
    this.removeChildViews();
    this.childViews = null;
    this.parentView = null;
    this.viewing = false;

    var obj = this.model || this.collection;

    if (obj) {
      obj.off(null, null, this);
    }
    BaseView.__super__.remove.apply(this, arguments);
    this.trigger('remove');
  }
});

/**
 * Class methods
 * -------------
 */

BaseView.getView = function(viewName, entryPath, callback) {
  var viewPath;

  if (!entryPath) entryPath = '';

  viewPath = entryPath + "app/views/" + viewName;
  // check for AMD environment
  if (typeof callback == 'function') {
    // Only used in AMD environment
    if (typeof define != 'undefined') {
      requireAMD([viewPath], callback);
    } else {
      callback(require(viewPath));
    }
  } else {
    return require(viewPath);
  }
};

BaseView.attach = function(app, parentView, callback) {
  var scope = parentView ? parentView.$el : null,
      list = $('[data-view]', scope).toArray();

  async.map(list, function(el, cb) {
    var $el, options, parsed, viewName;
    $el = $(el);
    if (!$el.data('view-attached')) {
      options = $el.data();
      viewName = options.view;
      _.each(options, function(value, key) {
        if (_.isString(value)) {
          parsed = _.unescape(value);
          try {
            parsed = JSON.parse(parsed);
          } catch (err) {}
          options[key] = parsed;
        }
      });
      options.app = app;
      BaseView.getView(viewName, app.options.entryPath, function(ViewClass) {
        var view = new ViewClass(options);
        view.attach($el, parentView);
        cb(null, view);
      });
    } else {
      cb(null, null);
    }
  }, function(err, views) {
    // no error handling originally
    callback(_.compact(views));
  });
};

BaseView.extractFetchSummary = function (modelUtils, options) {
    var fetchSummary = {};

    _.each(options, function(value, key) {
        var id, modelOrCollectionId;

        if (value != null) {
            if (_.isFunction(value.constructor) && value.constructor.id != null) {
                modelOrCollectionId = value.constructor.id;
                if (modelUtils.isModel(value)) {
                    id = value.get(value.idAttribute);
                    if (id == null) {
                        // Bail if there's no ID; someone's using `this.model` in a
                        // non-standard way, and that's okay.
                        return;
                    }
                    // Cast the `id` attribute to string to ensure it's included in attributes.
                    // On the server, it can be i.e. an `ObjectId` from Mongoose.
                    value = id.toString();
                    fetchSummary[key] = {model: modelOrCollectionId, id: value};
                    return;
                }
                if (modelUtils.isCollection(value) && value.params != null) {
                    fetchSummary[key] = {collection: modelOrCollectionId, params: value.params};
                    return;
                }
            }
        }
    });

    return fetchSummary;
}

/**
 * Noops on the server, because they do DOM stuff.
 */
if (typeof window === 'undefined') {
  BaseView.prototype._ensureElement = noop;
  BaseView.prototype.delegateEvents = noop;
}

},{"async":167,"backbone":168,"jquery":"mGNb6W","underscore":169}],175:[function(require,module,exports){
var _ = require('underscore'),
    Backbone = require('backbone'),
    async = require('async'),
    ModelStore = require('./store/model_store'),
    CollectionStore = require('./store/collection_store'),
    isServer = (typeof window === 'undefined');

if (!isServer) {
  Backbone.$ = window.$ || require('jquery');
}

module.exports = Fetcher;

function Fetcher(options) {
  this.options = options;
  this.app = this.options.app;
  this.modelUtils = this.app.modelUtils;
  this.modelStore = new ModelStore({
    app: this.app,
    modelUtils: this.modelUtils
  });
  this.collectionStore = new CollectionStore({
    app: this.app,
    modelUtils: this.modelUtils
  });
}

Fetcher.prototype.buildOptions = function(additionalOptions, params) {
  var options = {app: this.app};
  _.defaults(options, additionalOptions);
  _.defaults(options, params);
  return options;
};

/**
 * Returns an instance of Model or Collection.
 */
Fetcher.prototype.getModelOrCollectionForSpec = function(spec, attrsOrModels, options, callback) {
  if (spec.model) {
    return this.getModelForSpec(spec, attrsOrModels, options, callback);
  } else {
    return this.getCollectionForSpec(spec, attrsOrModels, options, callback);
  }
};

/**
 * Returns an instance of Collection.
 */
Fetcher.prototype.getCollectionForSpec = function(spec, models, options, callback) {
  var collectionOptions = this.buildOptions(options, spec.params);
  models = models || [];
  return this.modelUtils.getCollection(spec.collection, models, collectionOptions, callback);
};

/**
 * Returns an instance of Model.
 */
Fetcher.prototype.getModelForSpec = function(spec, attributes, options, callback) {
  var modelOptions = this.buildOptions(options);

  attributes = attributes || {};
  _.defaults(attributes, spec.params);

  return this.modelUtils.getModel(spec.model, attributes, modelOptions, callback);
};

/**
 * Used to hold timestamps of when 'checkFresh()' was called on a model/collection.
 * We use this to throttle it in 'shouldCheckFresh()'.
 */
Fetcher.prototype.checkedFreshTimestamps = {};

/**
 * Only once every ten seconds. Smarter?
 */
Fetcher.prototype.checkedFreshRate = 10000;

Fetcher.prototype.shouldCheckFresh = function(spec) {
  var key = this.checkedFreshKey(spec),
      timestamp = this.checkedFreshTimestamps[key];
  if (!timestamp) {
    return true;
  }
  if (new Date().getTime() - timestamp > this.checkedFreshRate) {
    return true;
  }
  return false;
};

Fetcher.prototype.didCheckFresh = function(spec) {
  var key = this.checkedFreshKey(spec);
  this.checkedFreshTimestamps[key] = new Date().getTime();
};

Fetcher.prototype.checkedFreshKey = function(spec) {
  var meta;
  meta = {
    name: spec.model || spec.collection,
    params: spec.params
  };
  return JSON.stringify(meta);
};

/**
 * map fetchSpecs to models and fetch data in parallel
 */
Fetcher.prototype._retrieve = function(fetchSpecs, options, callback) {
  var batchedRequests = {};

  _.each(fetchSpecs, function(spec, name) {
    batchedRequests[name] = function(cb) {
      var collectionData, model, modelData, modelOptions;

      if (!options.readFromCache) {
        this.fetchFromApi(spec, cb);
      } else {
        modelData = null;
        modelOptions = {};

        // First, see if we have stored the model or collection.
        if (spec.model != null) {

          this._retrieveModel(spec, function(err, modelData) {
            this._retrieveModelData(spec, modelData, modelOptions, cb);
          }.bind(this));

        } else if (spec.collection != null) {

          this.collectionStore.get(spec.collection, spec.params, function(collectionData) {
            if (collectionData) {
              modelData = this.retrieveModelsForCollectionName(spec.collection, collectionData.ids);
              modelOptions = {
                meta: collectionData.meta,
                params: collectionData.params
              };
            }
            this._retrieveModelData(spec, modelData, modelOptions, cb);
          }.bind(this));

        }

      }
    }.bind(this);
  }, this);
  async.parallel(batchedRequests, callback);
};

Fetcher.prototype._retrieveModelData = function(spec, modelData, modelOptions, cb) {

  // If we found the model/collection in the store, then return that.
  if (!this.needsFetch(modelData, spec)) {
    model = this.getModelOrCollectionForSpec(spec, modelData, modelOptions);

    /**
     * If 'checkFresh' is set (and we're in the client), then before we
     * return the cached object we fire off a fetch, compare the results,
     * and if the data is different, we trigger a 'refresh' event.
     */
    if (spec.checkFresh && !isServer && this.shouldCheckFresh(spec)) {
      model.checkFresh();
      this.didCheckFresh(spec);
    }
    cb(null, model);
  } else {
    /**
     * Else, fetch anew.
     */
    this.fetchFromApi(spec, cb);
  }
}

Fetcher.prototype._retrieveModel = function(spec, callback) {
  var fetcher = this;

  // Attempt to fetch from the modelStore based on the idAttribute
  this.modelUtils.modelIdAttribute(spec.model, function(idAttribute) {
    var modelData = fetcher.modelStore.get(spec.model, spec.params[idAttribute]);
    if (modelData)
      return callback(null, modelData);

    // if there are no other keys than the id in the params, return null;
    if (_.isEmpty(_.omit(spec.params, idAttribute)))
      return callback(null, null);

    // Attempt to fetch the model in the modelStore based on the other params
    return callback(null, fetcher.modelStore.find(spec.model, spec.params));
  });
};

Fetcher.prototype.needsFetch = function(modelData, spec) {
  if (modelData == null) return true;
  if (this.isMissingKeys(modelData, spec.ensureKeys)) return true;
  if (spec.needsFetch === true) return true;
  if (typeof spec.needsFetch === 'function' && spec.needsFetch(modelData)) return true;
  return false;
};

Fetcher.prototype.isMissingKeys = function(modelData, keys) {
  var key;

  if (keys == null) {
    return false;
  }
  if (!_.isArray(keys)) {
    keys = [keys];
  }
  for (var i = 0, len = keys.length; i < len; i++) {
    key = keys[i];
    if (modelData[key] == null) {
      return true;
    }
  }
  return false;
};

Fetcher.prototype.fetchFromApi = function(spec, callback) {
  var model = this.getModelOrCollectionForSpec(spec),
      fetcher = this;
  model.fetch({
    data: spec.params,
    success: function(model, body) {
      callback(null, model);
    },
    error: function(model, resp, options) {
      var body, respOutput, err;

      body = resp.body;
      resp.body = typeof body === 'string' ? body.slice(0, 150) : body;
      respOutput = JSON.stringify(resp);
      err = new Error("ERROR fetching model '" + fetcher.modelUtils.modelName(model.constructor) + "' with options '" + JSON.stringify(options) + "'. Response: " + respOutput);
      err.status = resp.status;
      err.body = body;
      callback(err);
    }
  });
};

Fetcher.prototype.retrieveModelsForCollectionName = function(collectionName, modelIds) {
  var modelName = this.modelUtils.getModelNameForCollectionName(collectionName);
  return this.retrieveModels(modelName, modelIds);
};

Fetcher.prototype.retrieveModels = function(modelName, modelIds) {
  return modelIds.map(function(id) {
    return this.modelStore.get(modelName, id);
  }, this);
};

Fetcher.prototype.summarize = function(modelOrCollection) {
  var summary = {},
      idAttribute;

  if (this.modelUtils.isCollection(modelOrCollection)) {
    idAttribute = modelOrCollection.model.prototype.idAttribute;
    summary = {
      collection: this.modelUtils.modelName(modelOrCollection.constructor),
      ids: modelOrCollection.pluck(idAttribute),
      params: modelOrCollection.params,
      meta: modelOrCollection.meta
    };
  } else if (this.modelUtils.isModel(modelOrCollection)) {
    idAttribute = modelOrCollection.idAttribute;
    summary = {
      model: this.modelUtils.modelName(modelOrCollection.constructor),
      id: modelOrCollection.get(idAttribute)
    };
  }
  return summary;
};

Fetcher.prototype.storeResults = function(results) {
  _.each(results, function(modelOrCollection) {
    modelOrCollection.store();
  });
};

Fetcher.prototype.bootstrapData = function(modelMap) {
  var results = {},
      fetcher = this;

  async.forEach(_.keys(modelMap), function(name, cb) {
    var map = modelMap[name];
    fetcher.getModelOrCollectionForSpec(map.summary, map.data, _.pick(map.summary, 'params', 'meta'), function(modelOrCollection) {
      results[name] = modelOrCollection;
      cb(null);
    });
  }, function(err) {
    fetcher.storeResults(results);
  });
};

Fetcher.prototype.hydrate = function(summaries, options, callback) {
  var results = {},
      fetcher = this;

  /**
   * Support both (summaries, options, callback)
   * and (summaries, callback).
   */
  if (arguments.length === 2) {
    callback = options;
    options = {};
  } else {
    options = options || {};
  }

  async.forEach(_.keys(summaries), function(name, cb) {
    var summary = summaries[name];
    if (summary.model != null) {
      results[name] = fetcher.modelStore.get(summary.model, summary.id, true);

      if ((results[name] != null) && (options.app != null)) {
        results[name].app = options.app;
      }

      cb(null);

    } else if (summary.collection != null) {
      // Also support getting all models for a collection.
      fetcher.collectionStore.get(summary.collection, summary.params, function(collectionData) {
        var collectionOptions,
            models;

        if (collectionData == null) {
          throw new Error("Collection of type \"" + summary.collection + "\" not found for params: " + JSON.stringify(summary.params));
        }

        models = fetcher.retrieveModelsForCollectionName(summary.collection, collectionData.ids);
        collectionOptions = {
          params: summary.params,
          meta: collectionData.meta,
          app: options.app
        };
        fetcher.modelUtils.getCollection(summary.collection, models, collectionOptions, function(collection) {
          results[name] = collection;

          if ((results[name] != null) && (options.app != null)) {
            results[name].app = options.app;
          }

          cb(null);
        });
      });
    }
  }, function(err) {
    callback(err, results);
  });
};

Fetcher.prototype.pendingFetches = 0;

Fetcher.prototype.fetch = function(fetchSpecs, options, callback) {
  var fetcher = this;

  /**
   * Support both (fetchSpecs, options, callback)
   * and (fetchSpecs, callback).
   */
  if (arguments.length === 2) {
    callback = options;
    options = {};
  } else {
    options = options || {};
  }

  // Different defaults for client v server.
  if (isServer) {
    if (options.readFromCache == null) {
      options.readFromCache = false;
    }
    if (options.writeToCache == null) {
      options.writeToCache = false;
    }
  } else {
    if (options.readFromCache == null) {
      options.readFromCache = true;
    }
    if (options.writeToCache == null) {
      options.writeToCache = true;
    }
  }

  this.pendingFetches++;
  this.trigger('fetch:start', fetchSpecs);
  this._retrieve(fetchSpecs, options, function(err, results) {
    fetcher.pendingFetches--;
    fetcher.trigger('fetch:end', fetchSpecs, err, results);
    if (err) return callback(err);
    if (options.writeToCache) {
      fetcher.storeResults(results);
    }
    callback(null, results);
  });
};

// Mixin Backbone.Events for events that work in client & server.
_.extend(Fetcher.prototype, Backbone.Events);

},{"./store/collection_store":177,"./store/model_store":179,"async":167,"backbone":168,"jquery":"mGNb6W","underscore":169}],176:[function(require,module,exports){
/**
 * Since we make rendr files AMD friendly on app setup stage
 * we need to pretend that this code is pure commonjs
 * means no AMD-style require calls.
 */
var BaseModel = require("./base/model"),
    BaseCollection = require("./base/collection");

var typePath = {
  model: "app/models/",
  collection: "app/collections/"
};

module.exports = ModelUtils;

function ModelUtils(entryPath) {
  this.entryPath = entryPath;
  this._classMap = {};
}

ModelUtils.prototype.getModel = function(path, attrs, options, callback) {
  var Model;
  attrs = attrs || {};
  options = options || {};
  if (typeof callback == 'function') {
    this.getModelConstructor(path, function(Model) {
      callback(new Model(attrs, options));
    });
  } else {
    Model = this.getModelConstructor(path);
    return new Model(attrs, options);
  }
};

ModelUtils.prototype.getCollection = function(path, models, options, callback) {
  var Collection;
  models = models || [];
  options = options || {};
  if (typeof callback == 'function') {
    this.getCollectionConstructor(path, function(Collection) {
      callback(new Collection(models, options));
    });
  } else {
    Collection = this.getCollectionConstructor(path);
    return new Collection(models, options);
  }
};

ModelUtils.prototype.getModelConstructor = function(path, callback) {
  return this.fetchConstructor('model', path, callback);
};

ModelUtils.prototype.getCollectionConstructor = function(path, callback) {
  return this.fetchConstructor('collection', path, callback);
};

ModelUtils.prototype.getFullPath = function(type, path) {
  return this.entryPath + typePath[type] + path;
};

ModelUtils.prototype.fetchConstructor = function(type, path, callback) {
  path = this.underscorize(path);

  var fullPath = this.getFullPath(type, path);

  if (this._classMap[path]) {
    return (typeof callback == 'function') ? callback(this._classMap[path]) : this._classMap[path];
  } else if (typeof callback == 'function') {
    // Only used in AMD environment
    if (typeof define != 'undefined') {
      this._requireAMD([fullPath], callback);
    } else {
      callback(this._require(fullPath));
    }
    return;
  } else {
    return this._require(fullPath);
  }
};

ModelUtils.prototype._require = require;

ModelUtils.prototype._requireAMD = require;

ModelUtils.prototype.isModel = function(obj) {
  return obj instanceof BaseModel;
};

ModelUtils.prototype.isCollection = function(obj) {
  return obj instanceof BaseCollection;
};

ModelUtils.prototype.getModelNameForCollectionName = function(collectionName) {
  var Collection;
  Collection = this.getCollectionConstructor(collectionName);
  return this.modelName(Collection.prototype.model);
};

ModelUtils.uppercaseRe = /([A-Z])/g;

ModelUtils.prototype.underscorize = function(name) {
  if (name == null) {
    return undefined;
  }
  name = name.replace(ModelUtils.uppercaseRe, function(c) {
    return "_" + c.toLowerCase();
  });
  if (name[0] === "_") {
    name = name.slice(1);
  }
  return name;
};

/**
 * The 'name' property is added to the constructor when using a named function,
 * and it cannot be changed.  I.e.:
 *
 * function MyClass(){}
 * MyClass.name
 * -> "MyClass"
 *
 * We first look for the 'id' property of the constructor, which is compatible
 * with standard Backbone-style class inheritance.
 *
 * var MyClass = Backbone.Model.extend({});
 * MyClass.name
 * -> ""
 * MyClass.id = "MyClass"
 */
ModelUtils.prototype.modelName = function(modelOrCollectionClass) {
  return this.underscorize(modelOrCollectionClass.id || modelOrCollectionClass.name);
};

ModelUtils.prototype.modelIdAttribute = function(modelName, callback) {
  this.getModelConstructor(modelName, function(constructor) {
    callback(constructor.prototype.idAttribute);
  });
};

},{"./base/collection":171,"./base/model":172}],177:[function(require,module,exports){
var _ = require('underscore'),
    Super = require('./memory_store');

module.exports = CollectionStore;

function CollectionStore() {
  Super.apply(this, arguments);
}

/**
 * Set up inheritance.
 */
CollectionStore.prototype = Object.create(Super.prototype);
CollectionStore.prototype.constructor = CollectionStore;

CollectionStore.prototype.set = function(collection, params) {
  var data, idAttribute, key;
  params = params || collection.params;
  key = this._getStoreKey(this.modelUtils.modelName(collection.constructor), params);
  idAttribute = collection.model.prototype.idAttribute;
  data = {
    ids: collection.pluck(idAttribute),
    meta: collection.meta,
    params: collection.params
  };
  return Super.prototype.set.call(this, key, data, null);
};

/**
 * Returns an array of model ids.
 */
CollectionStore.prototype.get = function(collectionName, params, callback) {
  var _collectionStore = this;
  /**
   * Kind of jank-sauce. Always merge in the default
   * params for the given collection.
   */
  if (typeof callback == 'function') {
    this.modelUtils.getCollectionConstructor(collectionName, function(Collection) {
      callback(get.call(_collectionStore, collectionName, params, Collection));
    });
    return;
  } else {
    var Collection = this.modelUtils.getCollectionConstructor(collectionName);
    return get.call(this, collectionName, params, Collection);
  }

  function get(collectionName, params, Collection) {
    var key;
    params = _.clone(params || {});
    params = _.defaults(params, Collection.prototype.defaultParams);
    key = this._getStoreKey(collectionName, params);
    return Super.prototype.get.call(this, key);
  }
};

CollectionStore.prototype._formatKey = function(key) {
  return Super.prototype._formatKey.call(this, "_cs:" + key);
};

CollectionStore.prototype._getStoreKey = function(collectionName, params) {
  var underscored = this.modelUtils.underscorize(collectionName);
  return underscored + ":" + JSON.stringify(sortParams(params));
}

function sortParams(params) {
  var sorted = {};
  _.chain(params).keys().sort().forEach(function(key) {
    sorted[key] = params[key];
  });
  return sorted;
}

},{"./memory_store":178,"underscore":169}],178:[function(require,module,exports){
module.exports = MemoryStore;

function MemoryStore(options) {
  this.options = options || {};
  this.app = this.options.app;
  this.modelUtils = this.options.modelUtils;
  this.cache = {};
}

MemoryStore.prototype.cacheVersion = '';

MemoryStore.prototype.get = function(key) {
  if (!key) {
    return;
  }
  return this.validateExpiration(key, this._get(key));
};

MemoryStore.prototype.validateExpiration = function(key, data) {
  if (data && data.expires && Date.now() > data.expires) {
    if (typeof console !== "undefined") {
      console.log("MemoryStore: Expiring key \"" + key + "\".");
    }
    this.clear(key);
    data = undefined;
  } else if (data && data.value) {
    data = data.value;
  }
  return data;
};

MemoryStore.prototype.set = function(key, value, ttlSec) {
  var expires;

  if (!key || value === undefined) {
    return false;
  }
  expires = ttlSec ? Date.now() + ttlSec * 1000 : null;
  this._set(key, {
    value: value,
    expires: expires
  });
  return true;
};

MemoryStore.prototype._get = function(key) {
  return this.cache[this._formatKey(key)];
};

MemoryStore.prototype._set = function(key, data) {
  this.cache[this._formatKey(key)] = data;
};

MemoryStore.prototype._clear = function(key) {
  delete this.cache[this._formatKey(key)];
};

MemoryStore.prototype._clearAll = function() {
  this.cache = {};
};

MemoryStore.prototype.clear = function(key) {
  if (key != null) {
    return this._clear(key);
  } else {
    return this._clearAll();
  }
};

MemoryStore.prototype._versionKey = function(key) {
  return key + ":" + this.cacheVersion;
};

MemoryStore.prototype._formatKey = function(key) {
  return this._versionKey(key);
};

},{}],179:[function(require,module,exports){
var _ = require('underscore'),
    Super = require('./memory_store');

module.exports = ModelStore;

function ModelStore() {
  Super.apply(this, arguments);
}

/**
 * Set up inheritance.
 */
ModelStore.prototype = Object.create(Super.prototype);
ModelStore.prototype.constructor = ModelStore;

ModelStore.prototype.set = function(model) {
  var existingAttrs, id, key, modelName, newAttrs;

  id = model.get(model.idAttribute);
  modelName = this.modelUtils.modelName(model.constructor);
  if (modelName == null) {
    throw new Error('Undefined modelName for model');
  }
  key = this._getModelStoreKey(modelName, id);

  /**
   * We want to merge the model attrs with whatever is already
   * present in the store.
   */
  existingAttrs = this.get(modelName, id) || {};
  newAttrs = _.extend({}, existingAttrs, model.toJSON());
  return Super.prototype.set.call(this, key, newAttrs, null);
};

ModelStore.prototype.get = function(modelName, id, returnModelInstance) {
  var key, modelData;

  if (returnModelInstance == null) {
    returnModelInstance = false;
  }
  key = this._getModelStoreKey(modelName, id);
  modelData = Super.prototype.get.call(this, key);
  if (modelData) {
    if (returnModelInstance) {
      return this.modelUtils.getModel(modelName, modelData, {
        app: this.app
      });
    } else {
      return modelData;
    }
  }
};

ModelStore.prototype.find = function(modelName, params) {
  var prefix, foundCachedObject, _this, data, foundCachedObjectKey;
  prefix = this._formatKey(this._keyPrefix(modelName));
  _this = this;
  // find the cached object that has attributes which are a subset of the params
  foundCachedObject = _.find(this.cache, function(cacheObject, key) {
    // since we're iterating over the entire cache, prevent searching different models
    if (!startsWith(key, prefix))
      return false;
    // ensure the object is still within the cache ttl
    data = Super.prototype.validateExpiration.call(_this, key, cacheObject);
    // validate subset
    if (data && isObjectSubset(params, data)) {
      // we store the key outside the iterator because _.find only returns the value, not the key
      foundCachedObjectKey = key;
      return true;
    }
    return false;
  });
  return foundCachedObject && Super.prototype.validateExpiration.call(this, foundCachedObjectKey, foundCachedObject);
}

ModelStore.prototype._formatKey = function(key) {
  return Super.prototype._formatKey.call(this, "_ms:" + key);
};

function startsWith(string, prefix) {
  return string.slice(0, prefix.length) == prefix;
}

function isObjectSubset(potentialSubset, objectToTest) {
  // check all the keys of the subset, and sure their values are the same in the objectToTest
  return _.all(potentialSubset, function(value, key) {
    return objectToTest[key] == value;
  });
}

ModelStore.prototype._keyPrefix = function(modelName) {
  return this.modelUtils.underscorize(modelName);
}

ModelStore.prototype._getModelStoreKey = function(modelName, id) {
  return this._keyPrefix(modelName) + ":" + id;
}

},{"./memory_store":178,"underscore":169}],180:[function(require,module,exports){
/**
 * `syncer` is a collection of instance methods that are mixed into the prototypes
 * of `BaseModel` and `BaseCollection`. The purpose is to encapsulate shared logic
 * for fetching data from the API.
 */

var _ = require('underscore'),
    Backbone = require('backbone'),

    // Pull out params in path, like '/users/:id'.
    extractParamNamesRe = /:([.a-z_-]+)/ig,

    methodMap = {
      'create': 'POST',
      'update': 'PUT',
      'delete': 'DELETE',
      'read': 'GET'
    },

    isServer = (typeof window === 'undefined');

if (isServer) {
  // hide it from requirejs since it's server only
  var serverOnly_qs = 'qs';
  var qs = require(serverOnly_qs);
} else {
  Backbone.$ = window.$ || require('jquery');
}

var syncer = module.exports;

function clientSync(method, model, options) {
  var error;
  
  options = _.clone(options);
  options.url = this.getUrl(options.url, true, options.data);
  error = options.error;
  if (error) {
    options.error = function(xhr) {
      var body = xhr.responseText,
          contentType = xhr.getResponseHeader('content-type'),
          resp;
      if (contentType && contentType.indexOf('application/json') !== -1) {
        try {
          body = JSON.parse(body);
        } catch (e) {}
      }
      resp = {
        body: body,
        status: xhr.status
      };
      error(resp);
    }
  };
  return Backbone.sync(method, model, options);
}

function serverSync(method, model, options) {
  var api, urlParts, verb, req;

  options = _.clone(options);
  options.url = this.getUrl(options.url, false, options.data);
  verb = methodMap[method];
  urlParts = options.url.split('?');
  req = this.app.req;

  api = {
    method: verb,
    path: urlParts[0],
    query: qs.parse(urlParts[1]) || {},
    api: _.result(this, 'api'),
    body: {}
  };

  if (verb === 'POST' || verb === 'PUT') {
    api.body = model.toJSON();
  }

  req.dataAdapter.request(req, api, function(err, response, body) {
    var resp;
    if (err) {
      resp = {
        body: body,
        // Pass through the statusCode, so lower-level code can handle i.e. 401 properly.
        status: err.status
      };

      if (options.error) {
        // This `error` has signature of $.ajax, not Backbone.sync.
        options.error(resp);
      } else {
        throw err;
      }
    } else {
      // This `success` has signature of $.ajax, not Backbone.sync.
      options.success(body);
    }
  });
}

syncer.clientSync = clientSync;
syncer.serverSync = serverSync;
syncer.sync = function sync() {
  var syncMethod = isServer ? serverSync : clientSync;
  return syncMethod.apply(this, arguments);
};

/**
 * 'model' is either a model or collection that
 * has a 'url' property, which can be a string or function.
 */
syncer.getUrl = function getUrl(url, clientPrefix, params) {
  if (clientPrefix == null) {
    clientPrefix = false;
  }
  params = params || {};
  url = url || _.result(this, 'url');
  if (clientPrefix && !~url.indexOf('://')) {
    url = this.formatClientUrl(url, _.result(this, 'api'));
  }
  return this.interpolateParams(this, url, params);
};

syncer.formatClientUrl = function(url, api) {
  var prefix = this.app.get('apiPath') || '/api';
  if (api) {
    prefix += '/' + api;
  }
  prefix += '/-';
  return prefix + url;
};

/**
 * This is used to fire off a 'fetch', compare the results to the data we have,
 * and then trigger a 'refresh' event if the data has changed.
 *
 * Happens only client-side.
 */
syncer.checkFresh = function checkFresh() {
  var url;

  this.app.trigger('checkFresh:start');

  // Lame: have to lazy-require to prevent circular dependency.
  // It is circular dep
  // hide it from requirejs since it's optional/lazy-loaded
  url = this.getUrl(null, true);

  $.getJSON(url, this.params, function(resp) {
    var data, differs;

    // The second argument 'false' tells 'parse()' not to modify the instance.
    data = this.parse(resp, false);
    differs = this.objectsDiffer(data, this.toJSON());
    this.trigger('checkFresh:end', differs);
    if (differs) {
      if (this.app.modelUtils.isModel(this)) {
        this.set(data, {
          silent: true
        });
      } else {
        this.reset(data, {
          parse: true,
          silent: true
        });
      }
      // We manually store the updated data.
      this.store();
      this.trigger('refresh');
    }
  }.bind(this));
};

/**
 * Deeply-compare two objects to see if they differ.
 */
syncer.objectsDiffer = function objectsDiffer(data1, data2) {
  var changed = false,
      keys,
      key,
      value1,
      value2;

  keys = _.unique(_.keys(data1).concat(_.keys(data2)));
  for (var i = 0, len = keys.length; i < len; i++) {
    key = keys[i];
    value1 = data1[key];
    value2 = data2[key];

    // If attribute is an object recurse
    if (_.isObject(value1) && _.isObject(value2)) {
      changed = this.objectsDiffer(value1, value2);
    // Test for equality
    } else if (!_.isEqual(value1, value2)) {
      changed = true;
    }
  }
  return changed;
};

/**
 * This maps i.e. '/listings/:id' to '/listings/3' if
 * the model you supply has model.get('id') == 3.
 */
syncer.interpolateParams = function interpolateParams(model, url, params) {
  var matches = url.match(extractParamNamesRe);

  params = params || {};

  if (matches) {
    matches.forEach(function(param) {
      var property = param.slice(1),
          value;

      // Is collection? Then use options.
      if (model.length != null) {
        value = model.options[property];

      // Otherwise it's a model; use attrs.
      } else {
        value = model.get(property);
      }
      url = url.replace(param, value);

      /**
       * Delete the param from params hash, so we don't get urls like:
       * /v1/threads/1234?id=1234...
       */
      delete params[property];
    });
  }
  return url;
};

},{"backbone":168,"jquery":"mGNb6W","underscore":169}],181:[function(require,module,exports){
//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.6.0';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return obj;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
      }
    }
    return obj;
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    any(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
    each(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, function(value, index, list) {
      return !predicate.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
    each(obj, function(value, index, list) {
      if (!(result = result && predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
    each(obj, function(value, index, list) {
      if (result || (result = predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    var result = -Infinity, lastComputed = -Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed > lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    var result = Infinity, lastComputed = Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed < lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Shuffle an array, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return value;
    return _.property(value);
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, iterator, context) {
    iterator = lookupIterator(iterator);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iterator, context) {
      var result = {};
      iterator = lookupIterator(iterator);
      each(obj, function(value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, key, value) {
    _.has(result, key) ? result[key].push(value) : result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, key, value) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function(value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Split an array into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(array, predicate) {
    var pass = [], fail = [];
    each(array, function(elem) {
      (predicate(elem) ? pass : fail).push(elem);
    });
    return [pass, fail];
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.contains(other, item);
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var length = _.max(_.pluck(arguments, 'length').concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);

    while(idx < length) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) throw new Error('bindAll must be passed function names');
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;
      if (last < wait) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))
                        && ('constructor' in a && 'constructor' in b)) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function () {
      return value;
    };
  };

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    return function(obj) {
      if (obj === attrs) return true; //avoid comparing an object to itself.
      for (var key in attrs) {
        if (attrs[key] !== obj[key])
          return false;
      }
      return true;
    }
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() { return new Date().getTime(); };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}).call(this);

},{}],"jquery":[function(require,module,exports){
module.exports=require('mGNb6W');
},{}],"mGNb6W":[function(require,module,exports){
(function (global){
(function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
/*! jQuery v1.9.1 | (c) 2005, 2012 jQuery Foundation, Inc. | jquery.org/license
*/(function(e,t){var n,r,i=typeof t,o=e.document,a=e.location,s=e.jQuery,u=e.$,l={},c=[],p="1.9.1",f=c.concat,d=c.push,h=c.slice,g=c.indexOf,m=l.toString,y=l.hasOwnProperty,v=p.trim,b=function(e,t){return new b.fn.init(e,t,r)},x=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,w=/\S+/g,T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,N=/^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,k=/^[\],:{}\s]*$/,E=/(?:^|:|,)(?:\s*\[)+/g,S=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,A=/"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,j=/^-ms-/,D=/-([\da-z])/gi,L=function(e,t){return t.toUpperCase()},H=function(e){(o.addEventListener||"load"===e.type||"complete"===o.readyState)&&(q(),b.ready())},q=function(){o.addEventListener?(o.removeEventListener("DOMContentLoaded",H,!1),e.removeEventListener("load",H,!1)):(o.detachEvent("onreadystatechange",H),e.detachEvent("onload",H))};b.fn=b.prototype={jquery:p,constructor:b,init:function(e,n,r){var i,a;if(!e)return this;if("string"==typeof e){if(i="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:N.exec(e),!i||!i[1]&&n)return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e);if(i[1]){if(n=n instanceof b?n[0]:n,b.merge(this,b.parseHTML(i[1],n&&n.nodeType?n.ownerDocument||n:o,!0)),C.test(i[1])&&b.isPlainObject(n))for(i in n)b.isFunction(this[i])?this[i](n[i]):this.attr(i,n[i]);return this}if(a=o.getElementById(i[2]),a&&a.parentNode){if(a.id!==i[2])return r.find(e);this.length=1,this[0]=a}return this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):b.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),b.makeArray(e,this))},selector:"",length:0,size:function(){return this.length},toArray:function(){return h.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return b.each(this,e,t)},ready:function(e){return b.ready.promise().done(e),this},slice:function(){return this.pushStack(h.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(b.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:d,sort:[].sort,splice:[].splice},b.fn.init.prototype=b.fn,b.extend=b.fn.extend=function(){var e,n,r,i,o,a,s=arguments[0]||{},u=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[1]||{},u=2),"object"==typeof s||b.isFunction(s)||(s={}),l===u&&(s=this,--u);l>u;u++)if(null!=(o=arguments[u]))for(i in o)e=s[i],r=o[i],s!==r&&(c&&r&&(b.isPlainObject(r)||(n=b.isArray(r)))?(n?(n=!1,a=e&&b.isArray(e)?e:[]):a=e&&b.isPlainObject(e)?e:{},s[i]=b.extend(c,a,r)):r!==t&&(s[i]=r));return s},b.extend({noConflict:function(t){return e.$===b&&(e.$=u),t&&e.jQuery===b&&(e.jQuery=s),b},isReady:!1,readyWait:1,holdReady:function(e){e?b.readyWait++:b.ready(!0)},ready:function(e){if(e===!0?!--b.readyWait:!b.isReady){if(!o.body)return setTimeout(b.ready);b.isReady=!0,e!==!0&&--b.readyWait>0||(n.resolveWith(o,[b]),b.fn.trigger&&b(o).trigger("ready").off("ready"))}},isFunction:function(e){return"function"===b.type(e)},isArray:Array.isArray||function(e){return"array"===b.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[m.call(e)]||"object":typeof e},isPlainObject:function(e){if(!e||"object"!==b.type(e)||e.nodeType||b.isWindow(e))return!1;try{if(e.constructor&&!y.call(e,"constructor")&&!y.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}var r;for(r in e);return r===t||y.call(e,r)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=b.buildFragment([e],t,i),i&&b(i).remove(),b.merge([],r.childNodes))},parseJSON:function(n){return e.JSON&&e.JSON.parse?e.JSON.parse(n):null===n?n:"string"==typeof n&&(n=b.trim(n),n&&k.test(n.replace(S,"@").replace(A,"]").replace(E,"")))?Function("return "+n)():(b.error("Invalid JSON: "+n),t)},parseXML:function(n){var r,i;if(!n||"string"!=typeof n)return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,"text/xml")):(r=new ActiveXObject("Microsoft.XMLDOM"),r.async="false",r.loadXML(n))}catch(o){r=t}return r&&r.documentElement&&!r.getElementsByTagName("parsererror").length||b.error("Invalid XML: "+n),r},noop:function(){},globalEval:function(t){t&&b.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(j,"ms-").replace(D,L)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=M(e);if(n){if(a){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:v&&!v.call("\ufeff\u00a0")?function(e){return null==e?"":v.call(e)}:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?b.merge(n,"string"==typeof e?[e]:e):d.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(g)return g.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,o=0;if("number"==typeof r)for(;r>o;o++)e[i++]=n[o];else while(n[o]!==t)e[i++]=n[o++];return e.length=i,e},grep:function(e,t,n){var r,i=[],o=0,a=e.length;for(n=!!n;a>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=M(e),s=[];if(a)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(s[s.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(s[s.length]=r);return f.apply([],s)},guid:1,proxy:function(e,n){var r,i,o;return"string"==typeof n&&(o=e[n],n=e,e=o),b.isFunction(e)?(r=h.call(arguments,2),i=function(){return e.apply(n||this,r.concat(h.call(arguments)))},i.guid=e.guid=e.guid||b.guid++,i):t},access:function(e,n,r,i,o,a,s){var u=0,l=e.length,c=null==r;if("object"===b.type(r)){o=!0;for(u in r)b.access(e,n,u,r[u],!0,a,s)}else if(i!==t&&(o=!0,b.isFunction(i)||(s=!0),c&&(s?(n.call(e,i),n=null):(c=n,n=function(e,t,n){return c.call(b(e),n)})),n))for(;l>u;u++)n(e[u],r,s?i:i.call(e[u],u,n(e[u],r)));return o?e:c?n.call(e):l?n(e[0],r):a},now:function(){return(new Date).getTime()}}),b.ready.promise=function(t){if(!n)if(n=b.Deferred(),"complete"===o.readyState)setTimeout(b.ready);else if(o.addEventListener)o.addEventListener("DOMContentLoaded",H,!1),e.addEventListener("load",H,!1);else{o.attachEvent("onreadystatechange",H),e.attachEvent("onload",H);var r=!1;try{r=null==e.frameElement&&o.documentElement}catch(i){}r&&r.doScroll&&function a(){if(!b.isReady){try{r.doScroll("left")}catch(e){return setTimeout(a,50)}q(),b.ready()}}()}return n.promise(t)},b.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});function M(e){var t=e.length,n=b.type(e);return b.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||"function"!==n&&(0===t||"number"==typeof t&&t>0&&t-1 in e)}r=b(o);var _={};function F(e){var t=_[e]={};return b.each(e.match(w)||[],function(e,n){t[n]=!0}),t}b.Callbacks=function(e){e="string"==typeof e?_[e]||F(e):b.extend({},e);var n,r,i,o,a,s,u=[],l=!e.once&&[],c=function(t){for(r=e.memory&&t,i=!0,a=s||0,s=0,o=u.length,n=!0;u&&o>a;a++)if(u[a].apply(t[0],t[1])===!1&&e.stopOnFalse){r=!1;break}n=!1,u&&(l?l.length&&c(l.shift()):r?u=[]:p.disable())},p={add:function(){if(u){var t=u.length;(function i(t){b.each(t,function(t,n){var r=b.type(n);"function"===r?e.unique&&p.has(n)||u.push(n):n&&n.length&&"string"!==r&&i(n)})})(arguments),n?o=u.length:r&&(s=t,c(r))}return this},remove:function(){return u&&b.each(arguments,function(e,t){var r;while((r=b.inArray(t,u,r))>-1)u.splice(r,1),n&&(o>=r&&o--,a>=r&&a--)}),this},has:function(e){return e?b.inArray(e,u)>-1:!(!u||!u.length)},empty:function(){return u=[],this},disable:function(){return u=l=r=t,this},disabled:function(){return!u},lock:function(){return l=t,r||p.disable(),this},locked:function(){return!l},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],!u||i&&!l||(n?l.push(t):c(t)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!i}};return p},b.extend({Deferred:function(e){var t=[["resolve","done",b.Callbacks("once memory"),"resolved"],["reject","fail",b.Callbacks("once memory"),"rejected"],["notify","progress",b.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return b.Deferred(function(n){b.each(t,function(t,o){var a=o[0],s=b.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&b.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[a+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?b.extend(e,r):r}},i={};return r.pipe=r.then,b.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=h.call(arguments),r=n.length,i=1!==r||e&&b.isFunction(e.promise)?r:0,o=1===i?e:b.Deferred(),a=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?h.call(arguments):r,n===s?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},s,u,l;if(r>1)for(s=Array(r),u=Array(r),l=Array(r);r>t;t++)n[t]&&b.isFunction(n[t].promise)?n[t].promise().done(a(t,l,n)).fail(o.reject).progress(a(t,u,s)):--i;return i||o.resolveWith(l,n),o.promise()}}),b.support=function(){var t,n,r,a,s,u,l,c,p,f,d=o.createElement("div");if(d.setAttribute("className","t"),d.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",n=d.getElementsByTagName("*"),r=d.getElementsByTagName("a")[0],!n||!r||!n.length)return{};s=o.createElement("select"),l=s.appendChild(o.createElement("option")),a=d.getElementsByTagName("input")[0],r.style.cssText="top:1px;float:left;opacity:.5",t={getSetAttribute:"t"!==d.className,leadingWhitespace:3===d.firstChild.nodeType,tbody:!d.getElementsByTagName("tbody").length,htmlSerialize:!!d.getElementsByTagName("link").length,style:/top/.test(r.getAttribute("style")),hrefNormalized:"/a"===r.getAttribute("href"),opacity:/^0.5/.test(r.style.opacity),cssFloat:!!r.style.cssFloat,checkOn:!!a.value,optSelected:l.selected,enctype:!!o.createElement("form").enctype,html5Clone:"<:nav></:nav>"!==o.createElement("nav").cloneNode(!0).outerHTML,boxModel:"CSS1Compat"===o.compatMode,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},a.checked=!0,t.noCloneChecked=a.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!l.disabled;try{delete d.test}catch(h){t.deleteExpando=!1}a=o.createElement("input"),a.setAttribute("value",""),t.input=""===a.getAttribute("value"),a.value="t",a.setAttribute("type","radio"),t.radioValue="t"===a.value,a.setAttribute("checked","t"),a.setAttribute("name","t"),u=o.createDocumentFragment(),u.appendChild(a),t.appendChecked=a.checked,t.checkClone=u.cloneNode(!0).cloneNode(!0).lastChild.checked,d.attachEvent&&(d.attachEvent("onclick",function(){t.noCloneEvent=!1}),d.cloneNode(!0).click());for(f in{submit:!0,change:!0,focusin:!0})d.setAttribute(c="on"+f,"t"),t[f+"Bubbles"]=c in e||d.attributes[c].expando===!1;return d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",t.clearCloneStyle="content-box"===d.style.backgroundClip,b(function(){var n,r,a,s="padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",u=o.getElementsByTagName("body")[0];u&&(n=o.createElement("div"),n.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",u.appendChild(n).appendChild(d),d.innerHTML="<table><tr><td></td><td>t</td></tr></table>",a=d.getElementsByTagName("td"),a[0].style.cssText="padding:0;margin:0;border:0;display:none",p=0===a[0].offsetHeight,a[0].style.display="",a[1].style.display="none",t.reliableHiddenOffsets=p&&0===a[0].offsetHeight,d.innerHTML="",d.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",t.boxSizing=4===d.offsetWidth,t.doesNotIncludeMarginInBodyOffset=1!==u.offsetTop,e.getComputedStyle&&(t.pixelPosition="1%"!==(e.getComputedStyle(d,null)||{}).top,t.boxSizingReliable="4px"===(e.getComputedStyle(d,null)||{width:"4px"}).width,r=d.appendChild(o.createElement("div")),r.style.cssText=d.style.cssText=s,r.style.marginRight=r.style.width="0",d.style.width="1px",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),typeof d.style.zoom!==i&&(d.innerHTML="",d.style.cssText=s+"width:1px;padding:1px;display:inline;zoom:1",t.inlineBlockNeedsLayout=3===d.offsetWidth,d.style.display="block",d.innerHTML="<div></div>",d.firstChild.style.width="5px",t.shrinkWrapBlocks=3!==d.offsetWidth,t.inlineBlockNeedsLayout&&(u.style.zoom=1)),u.removeChild(n),n=d=a=r=null)}),n=s=u=l=r=a=null,t}();var O=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,B=/([A-Z])/g;function P(e,n,r,i){if(b.acceptData(e)){var o,a,s=b.expando,u="string"==typeof n,l=e.nodeType,p=l?b.cache:e,f=l?e[s]:e[s]&&s;if(f&&p[f]&&(i||p[f].data)||!u||r!==t)return f||(l?e[s]=f=c.pop()||b.guid++:f=s),p[f]||(p[f]={},l||(p[f].toJSON=b.noop)),("object"==typeof n||"function"==typeof n)&&(i?p[f]=b.extend(p[f],n):p[f].data=b.extend(p[f].data,n)),o=p[f],i||(o.data||(o.data={}),o=o.data),r!==t&&(o[b.camelCase(n)]=r),u?(a=o[n],null==a&&(a=o[b.camelCase(n)])):a=o,a}}function R(e,t,n){if(b.acceptData(e)){var r,i,o,a=e.nodeType,s=a?b.cache:e,u=a?e[b.expando]:b.expando;if(s[u]){if(t&&(o=n?s[u]:s[u].data)){b.isArray(t)?t=t.concat(b.map(t,b.camelCase)):t in o?t=[t]:(t=b.camelCase(t),t=t in o?[t]:t.split(" "));for(r=0,i=t.length;i>r;r++)delete o[t[r]];if(!(n?$:b.isEmptyObject)(o))return}(n||(delete s[u].data,$(s[u])))&&(a?b.cleanData([e],!0):b.support.deleteExpando||s!=s.window?delete s[u]:s[u]=null)}}}b.extend({cache:{},expando:"jQuery"+(p+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(e){return e=e.nodeType?b.cache[e[b.expando]]:e[b.expando],!!e&&!$(e)},data:function(e,t,n){return P(e,t,n)},removeData:function(e,t){return R(e,t)},_data:function(e,t,n){return P(e,t,n,!0)},_removeData:function(e,t){return R(e,t,!0)},acceptData:function(e){if(e.nodeType&&1!==e.nodeType&&9!==e.nodeType)return!1;var t=e.nodeName&&b.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute("classid")===t}}),b.fn.extend({data:function(e,n){var r,i,o=this[0],a=0,s=null;if(e===t){if(this.length&&(s=b.data(o),1===o.nodeType&&!b._data(o,"parsedAttrs"))){for(r=o.attributes;r.length>a;a++)i=r[a].name,i.indexOf("data-")||(i=b.camelCase(i.slice(5)),W(o,i,s[i]));b._data(o,"parsedAttrs",!0)}return s}return"object"==typeof e?this.each(function(){b.data(this,e)}):b.access(this,function(n){return n===t?o?W(o,e,b.data(o,e)):null:(this.each(function(){b.data(this,e,n)}),t)},null,n,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){b.removeData(this,e)})}});function W(e,n,r){if(r===t&&1===e.nodeType){var i="data-"+n.replace(B,"-$1").toLowerCase();if(r=e.getAttribute(i),"string"==typeof r){try{r="true"===r?!0:"false"===r?!1:"null"===r?null:+r+""===r?+r:O.test(r)?b.parseJSON(r):r}catch(o){}b.data(e,n,r)}else r=t}return r}function $(e){var t;for(t in e)if(("data"!==t||!b.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}b.extend({queue:function(e,n,r){var i;return e?(n=(n||"fx")+"queue",i=b._data(e,n),r&&(!i||b.isArray(r)?i=b._data(e,n,b.makeArray(r)):i.push(r)),i||[]):t},dequeue:function(e,t){t=t||"fx";var n=b.queue(e,t),r=n.length,i=n.shift(),o=b._queueHooks(e,t),a=function(){b.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),o.cur=i,i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return b._data(e,n)||b._data(e,n,{empty:b.Callbacks("once memory").add(function(){b._removeData(e,t+"queue"),b._removeData(e,n)})})}}),b.fn.extend({queue:function(e,n){var r=2;return"string"!=typeof e&&(n=e,e="fx",r--),r>arguments.length?b.queue(this[0],e):n===t?this:this.each(function(){var t=b.queue(this,e,n);b._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&b.dequeue(this,e)})},dequeue:function(e){return this.each(function(){b.dequeue(this,e)})},delay:function(e,t){return e=b.fx?b.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var r,i=1,o=b.Deferred(),a=this,s=this.length,u=function(){--i||o.resolveWith(a,[a])};"string"!=typeof e&&(n=e,e=t),e=e||"fx";while(s--)r=b._data(a[s],e+"queueHooks"),r&&r.empty&&(i++,r.empty.add(u));return u(),o.promise(n)}});var I,z,X=/[\t\r\n]/g,U=/\r/g,V=/^(?:input|select|textarea|button|object)$/i,Y=/^(?:a|area)$/i,J=/^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,G=/^(?:checked|selected)$/i,Q=b.support.getSetAttribute,K=b.support.input;b.fn.extend({attr:function(e,t){return b.access(this,b.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){b.removeAttr(this,e)})},prop:function(e,t){return b.access(this,b.prop,e,t,arguments.length>1)},removeProp:function(e){return e=b.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,o,a=0,s=this.length,u="string"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(w)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(X," "):" ")){o=0;while(i=t[o++])0>r.indexOf(" "+i+" ")&&(r+=i+" ");n.className=b.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,a=0,s=this.length,u=0===arguments.length||"string"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(w)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(X," "):"")){o=0;while(i=t[o++])while(r.indexOf(" "+i+" ")>=0)r=r.replace(" "+i+" "," ");n.className=e?b.trim(r):""}return this},toggleClass:function(e,t){var n=typeof e,r="boolean"==typeof t;return b.isFunction(e)?this.each(function(n){b(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n){var o,a=0,s=b(this),u=t,l=e.match(w)||[];while(o=l[a++])u=r?u:!s.hasClass(o),s[u?"addClass":"removeClass"](o)}else(n===i||"boolean"===n)&&(this.className&&b._data(this,"__className__",this.className),this.className=this.className||e===!1?"":b._data(this,"__className__")||"")})},hasClass:function(e){var t=" "+e+" ",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(X," ").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,o=this[0];{if(arguments.length)return i=b.isFunction(e),this.each(function(n){var o,a=b(this);1===this.nodeType&&(o=i?e.call(this,n,a.val()):e,null==o?o="":"number"==typeof o?o+="":b.isArray(o)&&(o=b.map(o,function(e){return null==e?"":e+""})),r=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()],r&&"set"in r&&r.set(this,o,"value")!==t||(this.value=o))});if(o)return r=b.valHooks[o.type]||b.valHooks[o.nodeName.toLowerCase()],r&&"get"in r&&(n=r.get(o,"value"))!==t?n:(n=o.value,"string"==typeof n?n.replace(U,""):null==n?"":n)}}}),b.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,u=0>i?s:o?i:0;for(;s>u;u++)if(n=r[u],!(!n.selected&&u!==i||(b.support.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&b.nodeName(n.parentNode,"optgroup"))){if(t=b(n).val(),o)return t;a.push(t)}return a},set:function(e,t){var n=b.makeArray(t);return b(e).find("option").each(function(){this.selected=b.inArray(b(this).val(),n)>=0}),n.length||(e.selectedIndex=-1),n}}},attr:function(e,n,r){var o,a,s,u=e.nodeType;if(e&&3!==u&&8!==u&&2!==u)return typeof e.getAttribute===i?b.prop(e,n,r):(a=1!==u||!b.isXMLDoc(e),a&&(n=n.toLowerCase(),o=b.attrHooks[n]||(J.test(n)?z:I)),r===t?o&&a&&"get"in o&&null!==(s=o.get(e,n))?s:(typeof e.getAttribute!==i&&(s=e.getAttribute(n)),null==s?t:s):null!==r?o&&a&&"set"in o&&(s=o.set(e,r,n))!==t?s:(e.setAttribute(n,r+""),r):(b.removeAttr(e,n),t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(w);if(o&&1===e.nodeType)while(n=o[i++])r=b.propFix[n]||n,J.test(n)?!Q&&G.test(n)?e[b.camelCase("default-"+n)]=e[r]=!1:e[r]=!1:b.attr(e,n,""),e.removeAttribute(Q?n:r)},attrHooks:{type:{set:function(e,t){if(!b.support.radioValue&&"radio"===t&&b.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(e,n,r){var i,o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return a=1!==s||!b.isXMLDoc(e),a&&(n=b.propFix[n]||n,o=b.propHooks[n]),r!==t?o&&"set"in o&&(i=o.set(e,r,n))!==t?i:e[n]=r:o&&"get"in o&&null!==(i=o.get(e,n))?i:e[n]},propHooks:{tabIndex:{get:function(e){var n=e.getAttributeNode("tabindex");return n&&n.specified?parseInt(n.value,10):V.test(e.nodeName)||Y.test(e.nodeName)&&e.href?0:t}}}}),z={get:function(e,n){var r=b.prop(e,n),i="boolean"==typeof r&&e.getAttribute(n),o="boolean"==typeof r?K&&Q?null!=i:G.test(n)?e[b.camelCase("default-"+n)]:!!i:e.getAttributeNode(n);return o&&o.value!==!1?n.toLowerCase():t},set:function(e,t,n){return t===!1?b.removeAttr(e,n):K&&Q||!G.test(n)?e.setAttribute(!Q&&b.propFix[n]||n,n):e[b.camelCase("default-"+n)]=e[n]=!0,n}},K&&Q||(b.attrHooks.value={get:function(e,n){var r=e.getAttributeNode(n);return b.nodeName(e,"input")?e.defaultValue:r&&r.specified?r.value:t},set:function(e,n,r){return b.nodeName(e,"input")?(e.defaultValue=n,t):I&&I.set(e,n,r)}}),Q||(I=b.valHooks.button={get:function(e,n){var r=e.getAttributeNode(n);return r&&("id"===n||"name"===n||"coords"===n?""!==r.value:r.specified)?r.value:t},set:function(e,n,r){var i=e.getAttributeNode(r);return i||e.setAttributeNode(i=e.ownerDocument.createAttribute(r)),i.value=n+="","value"===r||n===e.getAttribute(r)?n:t}},b.attrHooks.contenteditable={get:I.get,set:function(e,t,n){I.set(e,""===t?!1:t,n)}},b.each(["width","height"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{set:function(e,r){return""===r?(e.setAttribute(n,"auto"),r):t}})})),b.support.hrefNormalized||(b.each(["href","src","width","height"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{get:function(e){var r=e.getAttribute(n,2);return null==r?t:r}})}),b.each(["href","src"],function(e,t){b.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}})),b.support.style||(b.attrHooks.style={get:function(e){return e.style.cssText||t},set:function(e,t){return e.style.cssText=t+""}}),b.support.optSelected||(b.propHooks.selected=b.extend(b.propHooks.selected,{get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}})),b.support.enctype||(b.propFix.enctype="encoding"),b.support.checkOn||b.each(["radio","checkbox"],function(){b.valHooks[this]={get:function(e){return null===e.getAttribute("value")?"on":e.value}}}),b.each(["radio","checkbox"],function(){b.valHooks[this]=b.extend(b.valHooks[this],{set:function(e,n){return b.isArray(n)?e.checked=b.inArray(b(e).val(),n)>=0:t}})});var Z=/^(?:input|select|textarea)$/i,et=/^key/,tt=/^(?:mouse|contextmenu)|click/,nt=/^(?:focusinfocus|focusoutblur)$/,rt=/^([^.]*)(?:\.(.+)|)$/;function it(){return!0}function ot(){return!1}b.event={global:{},add:function(e,n,r,o,a){var s,u,l,c,p,f,d,h,g,m,y,v=b._data(e);if(v){r.handler&&(c=r,r=c.handler,a=c.selector),r.guid||(r.guid=b.guid++),(u=v.events)||(u=v.events={}),(f=v.handle)||(f=v.handle=function(e){return typeof b===i||e&&b.event.triggered===e.type?t:b.event.dispatch.apply(f.elem,arguments)},f.elem=e),n=(n||"").match(w)||[""],l=n.length;while(l--)s=rt.exec(n[l])||[],g=y=s[1],m=(s[2]||"").split(".").sort(),p=b.event.special[g]||{},g=(a?p.delegateType:p.bindType)||g,p=b.event.special[g]||{},d=b.extend({type:g,origType:y,data:o,handler:r,guid:r.guid,selector:a,needsContext:a&&b.expr.match.needsContext.test(a),namespace:m.join(".")},c),(h=u[g])||(h=u[g]=[],h.delegateCount=0,p.setup&&p.setup.call(e,o,m,f)!==!1||(e.addEventListener?e.addEventListener(g,f,!1):e.attachEvent&&e.attachEvent("on"+g,f))),p.add&&(p.add.call(e,d),d.handler.guid||(d.handler.guid=r.guid)),a?h.splice(h.delegateCount++,0,d):h.push(d),b.event.global[g]=!0;e=null}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,p,f,d,h,g,m=b.hasData(e)&&b._data(e);if(m&&(c=m.events)){t=(t||"").match(w)||[""],l=t.length;while(l--)if(s=rt.exec(t[l])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){p=b.event.special[d]||{},d=(r?p.delegateType:p.bindType)||d,f=c[d]||[],s=s[2]&&RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=o=f.length;while(o--)a=f[o],!i&&g!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&("**"!==r||!a.selector)||(f.splice(o,1),a.selector&&f.delegateCount--,p.remove&&p.remove.call(e,a));u&&!f.length&&(p.teardown&&p.teardown.call(e,h,m.handle)!==!1||b.removeEvent(e,d,m.handle),delete c[d])}else for(d in c)b.event.remove(e,d+t[l],n,r,!0);b.isEmptyObject(c)&&(delete m.handle,b._removeData(e,"events"))}},trigger:function(n,r,i,a){var s,u,l,c,p,f,d,h=[i||o],g=y.call(n,"type")?n.type:n,m=y.call(n,"namespace")?n.namespace.split("."):[];if(l=f=i=i||o,3!==i.nodeType&&8!==i.nodeType&&!nt.test(g+b.event.triggered)&&(g.indexOf(".")>=0&&(m=g.split("."),g=m.shift(),m.sort()),u=0>g.indexOf(":")&&"on"+g,n=n[b.expando]?n:new b.Event(g,"object"==typeof n&&n),n.isTrigger=!0,n.namespace=m.join("."),n.namespace_re=n.namespace?RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,n.result=t,n.target||(n.target=i),r=null==r?[n]:b.makeArray(r,[n]),p=b.event.special[g]||{},a||!p.trigger||p.trigger.apply(i,r)!==!1)){if(!a&&!p.noBubble&&!b.isWindow(i)){for(c=p.delegateType||g,nt.test(c+g)||(l=l.parentNode);l;l=l.parentNode)h.push(l),f=l;f===(i.ownerDocument||o)&&h.push(f.defaultView||f.parentWindow||e)}d=0;while((l=h[d++])&&!n.isPropagationStopped())n.type=d>1?c:p.bindType||g,s=(b._data(l,"events")||{})[n.type]&&b._data(l,"handle"),s&&s.apply(l,r),s=u&&l[u],s&&b.acceptData(l)&&s.apply&&s.apply(l,r)===!1&&n.preventDefault();if(n.type=g,!(a||n.isDefaultPrevented()||p._default&&p._default.apply(i.ownerDocument,r)!==!1||"click"===g&&b.nodeName(i,"a")||!b.acceptData(i)||!u||!i[g]||b.isWindow(i))){f=i[u],f&&(i[u]=null),b.event.triggered=g;try{i[g]()}catch(v){}b.event.triggered=t,f&&(i[u]=f)}return n.result}},dispatch:function(e){e=b.event.fix(e);var n,r,i,o,a,s=[],u=h.call(arguments),l=(b._data(this,"events")||{})[e.type]||[],c=b.event.special[e.type]||{};if(u[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){s=b.event.handlers.call(this,e,l),n=0;while((o=s[n++])&&!e.isPropagationStopped()){e.currentTarget=o.elem,a=0;while((i=o.handlers[a++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,r=((b.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,u),r!==t&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,n){var r,i,o,a,s=[],u=n.delegateCount,l=e.target;if(u&&l.nodeType&&(!e.button||"click"!==e.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==e.type)){for(o=[],a=0;u>a;a++)i=n[a],r=i.selector+" ",o[r]===t&&(o[r]=i.needsContext?b(r,this).index(l)>=0:b.find(r,this,null,[l]).length),o[r]&&o.push(i);o.length&&s.push({elem:l,handlers:o})}return n.length>u&&s.push({elem:this,handlers:n.slice(u)}),s},fix:function(e){if(e[b.expando])return e;var t,n,r,i=e.type,a=e,s=this.fixHooks[i];s||(this.fixHooks[i]=s=tt.test(i)?this.mouseHooks:et.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new b.Event(a),t=r.length;while(t--)n=r[t],e[n]=a[n];return e.target||(e.target=a.srcElement||o),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,a):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,n){var r,i,a,s=n.button,u=n.fromElement;return null==e.pageX&&null!=n.clientX&&(i=e.target.ownerDocument||o,a=i.documentElement,r=i.body,e.pageX=n.clientX+(a&&a.scrollLeft||r&&r.scrollLeft||0)-(a&&a.clientLeft||r&&r.clientLeft||0),e.pageY=n.clientY+(a&&a.scrollTop||r&&r.scrollTop||0)-(a&&a.clientTop||r&&r.clientTop||0)),!e.relatedTarget&&u&&(e.relatedTarget=u===e.target?n.toElement:u),e.which||s===t||(e.which=1&s?1:2&s?3:4&s?2:0),e}},special:{load:{noBubble:!0},click:{trigger:function(){return b.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):t}},focus:{trigger:function(){if(this!==o.activeElement&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===o.activeElement&&this.blur?(this.blur(),!1):t},delegateType:"focusout"},beforeunload:{postDispatch:function(e){e.result!==t&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=b.extend(new b.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?b.event.trigger(i,null,t):b.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},b.removeEvent=o.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]===i&&(e[r]=null),e.detachEvent(r,n))},b.Event=function(e,n){return this instanceof b.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?it:ot):this.type=e,n&&b.extend(this,n),this.timeStamp=e&&e.timeStamp||b.now(),this[b.expando]=!0,t):new b.Event(e,n)},b.Event.prototype={isDefaultPrevented:ot,isPropagationStopped:ot,isImmediatePropagationStopped:ot,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=it,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=it,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=it,this.stopPropagation()}},b.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;
return(!i||i!==r&&!b.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),b.support.submitBubbles||(b.event.special.submit={setup:function(){return b.nodeName(this,"form")?!1:(b.event.add(this,"click._submit keypress._submit",function(e){var n=e.target,r=b.nodeName(n,"input")||b.nodeName(n,"button")?n.form:t;r&&!b._data(r,"submitBubbles")&&(b.event.add(r,"submit._submit",function(e){e._submit_bubble=!0}),b._data(r,"submitBubbles",!0))}),t)},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&b.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return b.nodeName(this,"form")?!1:(b.event.remove(this,"._submit"),t)}}),b.support.changeBubbles||(b.event.special.change={setup:function(){return Z.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(b.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),b.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),b.event.simulate("change",this,e,!0)})),!1):(b.event.add(this,"beforeactivate._change",function(e){var t=e.target;Z.test(t.nodeName)&&!b._data(t,"changeBubbles")&&(b.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||b.event.simulate("change",this.parentNode,e,!0)}),b._data(t,"changeBubbles",!0))}),t)},handle:function(e){var n=e.target;return this!==n||e.isSimulated||e.isTrigger||"radio"!==n.type&&"checkbox"!==n.type?e.handleObj.handler.apply(this,arguments):t},teardown:function(){return b.event.remove(this,"._change"),!Z.test(this.nodeName)}}),b.support.focusinBubbles||b.each({focus:"focusin",blur:"focusout"},function(e,t){var n=0,r=function(e){b.event.simulate(t,e.target,b.event.fix(e),!0)};b.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),b.fn.extend({on:function(e,n,r,i,o){var a,s;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=t);for(a in e)this.on(a,n,r,e[a],o);return this}if(null==r&&null==i?(i=n,r=n=t):null==i&&("string"==typeof n?(i=r,r=t):(i=r,r=n,n=t)),i===!1)i=ot;else if(!i)return this;return 1===o&&(s=i,i=function(e){return b().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=b.guid++)),this.each(function(){b.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,b(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,n,e[o]);return this}return(n===!1||"function"==typeof n)&&(r=n,n=t),r===!1&&(r=ot),this.each(function(){b.event.remove(this,e,r,n)})},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},trigger:function(e,t){return this.each(function(){b.event.trigger(e,t,this)})},triggerHandler:function(e,n){var r=this[0];return r?b.event.trigger(e,n,r,!0):t}}),function(e,t){var n,r,i,o,a,s,u,l,c,p,f,d,h,g,m,y,v,x="sizzle"+-new Date,w=e.document,T={},N=0,C=0,k=it(),E=it(),S=it(),A=typeof t,j=1<<31,D=[],L=D.pop,H=D.push,q=D.slice,M=D.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},_="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",O=F.replace("w","w#"),B="([*^$|!~]?=)",P="\\["+_+"*("+F+")"+_+"*(?:"+B+_+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+O+")|)|)"+_+"*\\]",R=":("+F+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+P.replace(3,8)+")*)|.*)\\)|)",W=RegExp("^"+_+"+|((?:^|[^\\\\])(?:\\\\.)*)"+_+"+$","g"),$=RegExp("^"+_+"*,"+_+"*"),I=RegExp("^"+_+"*([\\x20\\t\\r\\n\\f>+~])"+_+"*"),z=RegExp(R),X=RegExp("^"+O+"$"),U={ID:RegExp("^#("+F+")"),CLASS:RegExp("^\\.("+F+")"),NAME:RegExp("^\\[name=['\"]?("+F+")['\"]?\\]"),TAG:RegExp("^("+F.replace("w","w*")+")"),ATTR:RegExp("^"+P),PSEUDO:RegExp("^"+R),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+_+"*(even|odd|(([+-]|)(\\d*)n|)"+_+"*(?:([+-]|)"+_+"*(\\d+)|))"+_+"*\\)|)","i"),needsContext:RegExp("^"+_+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+_+"*((?:-\\d)?\\d*)"+_+"*\\)|)(?=[^-]|$)","i")},V=/[\x20\t\r\n\f]*[+~]/,Y=/^[^{]+\{\s*\[native code/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,K=/'|\\/g,Z=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,et=/\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,tt=function(e,t){var n="0x"+t-65536;return n!==n?t:0>n?String.fromCharCode(n+65536):String.fromCharCode(55296|n>>10,56320|1023&n)};try{q.call(w.documentElement.childNodes,0)[0].nodeType}catch(nt){q=function(e){var t,n=[];while(t=this[e++])n.push(t);return n}}function rt(e){return Y.test(e+"")}function it(){var e,t=[];return e=function(n,r){return t.push(n+=" ")>i.cacheLength&&delete e[t.shift()],e[n]=r}}function ot(e){return e[x]=!0,e}function at(e){var t=p.createElement("div");try{return e(t)}catch(n){return!1}finally{t=null}}function st(e,t,n,r){var i,o,a,s,u,l,f,g,m,v;if((t?t.ownerDocument||t:w)!==p&&c(t),t=t||p,n=n||[],!e||"string"!=typeof e)return n;if(1!==(s=t.nodeType)&&9!==s)return[];if(!d&&!r){if(i=J.exec(e))if(a=i[1]){if(9===s){if(o=t.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(a))&&y(t,o)&&o.id===a)return n.push(o),n}else{if(i[2])return H.apply(n,q.call(t.getElementsByTagName(e),0)),n;if((a=i[3])&&T.getByClassName&&t.getElementsByClassName)return H.apply(n,q.call(t.getElementsByClassName(a),0)),n}if(T.qsa&&!h.test(e)){if(f=!0,g=x,m=t,v=9===s&&e,1===s&&"object"!==t.nodeName.toLowerCase()){l=ft(e),(f=t.getAttribute("id"))?g=f.replace(K,"\\$&"):t.setAttribute("id",g),g="[id='"+g+"'] ",u=l.length;while(u--)l[u]=g+dt(l[u]);m=V.test(e)&&t.parentNode||t,v=l.join(",")}if(v)try{return H.apply(n,q.call(m.querySelectorAll(v),0)),n}catch(b){}finally{f||t.removeAttribute("id")}}}return wt(e.replace(W,"$1"),t,n,r)}a=st.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},c=st.setDocument=function(e){var n=e?e.ownerDocument||e:w;return n!==p&&9===n.nodeType&&n.documentElement?(p=n,f=n.documentElement,d=a(n),T.tagNameNoComments=at(function(e){return e.appendChild(n.createComment("")),!e.getElementsByTagName("*").length}),T.attributes=at(function(e){e.innerHTML="<select></select>";var t=typeof e.lastChild.getAttribute("multiple");return"boolean"!==t&&"string"!==t}),T.getByClassName=at(function(e){return e.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",e.getElementsByClassName&&e.getElementsByClassName("e").length?(e.lastChild.className="e",2===e.getElementsByClassName("e").length):!1}),T.getByName=at(function(e){e.id=x+0,e.innerHTML="<a name='"+x+"'></a><div name='"+x+"'></div>",f.insertBefore(e,f.firstChild);var t=n.getElementsByName&&n.getElementsByName(x).length===2+n.getElementsByName(x+0).length;return T.getIdNotName=!n.getElementById(x),f.removeChild(e),t}),i.attrHandle=at(function(e){return e.innerHTML="<a href='#'></a>",e.firstChild&&typeof e.firstChild.getAttribute!==A&&"#"===e.firstChild.getAttribute("href")})?{}:{href:function(e){return e.getAttribute("href",2)},type:function(e){return e.getAttribute("type")}},T.getIdNotName?(i.find.ID=function(e,t){if(typeof t.getElementById!==A&&!d){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){return e.getAttribute("id")===t}}):(i.find.ID=function(e,n){if(typeof n.getElementById!==A&&!d){var r=n.getElementById(e);return r?r.id===e||typeof r.getAttributeNode!==A&&r.getAttributeNode("id").value===e?[r]:t:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){var n=typeof e.getAttributeNode!==A&&e.getAttributeNode("id");return n&&n.value===t}}),i.find.TAG=T.tagNameNoComments?function(e,n){return typeof n.getElementsByTagName!==A?n.getElementsByTagName(e):t}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},i.find.NAME=T.getByName&&function(e,n){return typeof n.getElementsByName!==A?n.getElementsByName(name):t},i.find.CLASS=T.getByClassName&&function(e,n){return typeof n.getElementsByClassName===A||d?t:n.getElementsByClassName(e)},g=[],h=[":focus"],(T.qsa=rt(n.querySelectorAll))&&(at(function(e){e.innerHTML="<select><option selected=''></option></select>",e.querySelectorAll("[selected]").length||h.push("\\["+_+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),e.querySelectorAll(":checked").length||h.push(":checked")}),at(function(e){e.innerHTML="<input type='hidden' i=''/>",e.querySelectorAll("[i^='']").length&&h.push("[*^$]="+_+"*(?:\"\"|'')"),e.querySelectorAll(":enabled").length||h.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),h.push(",.*:")})),(T.matchesSelector=rt(m=f.matchesSelector||f.mozMatchesSelector||f.webkitMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&at(function(e){T.disconnectedMatch=m.call(e,"div"),m.call(e,"[s!='']:x"),g.push("!=",R)}),h=RegExp(h.join("|")),g=RegExp(g.join("|")),y=rt(f.contains)||f.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},v=f.compareDocumentPosition?function(e,t){var r;return e===t?(u=!0,0):(r=t.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(t))?1&r||e.parentNode&&11===e.parentNode.nodeType?e===n||y(w,e)?-1:t===n||y(w,t)?1:0:4&r?-1:1:e.compareDocumentPosition?-1:1}:function(e,t){var r,i=0,o=e.parentNode,a=t.parentNode,s=[e],l=[t];if(e===t)return u=!0,0;if(!o||!a)return e===n?-1:t===n?1:o?-1:a?1:0;if(o===a)return ut(e,t);r=e;while(r=r.parentNode)s.unshift(r);r=t;while(r=r.parentNode)l.unshift(r);while(s[i]===l[i])i++;return i?ut(s[i],l[i]):s[i]===w?-1:l[i]===w?1:0},u=!1,[0,0].sort(v),T.detectDuplicates=u,p):p},st.matches=function(e,t){return st(e,null,null,t)},st.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&c(e),t=t.replace(Z,"='$1']"),!(!T.matchesSelector||d||g&&g.test(t)||h.test(t)))try{var n=m.call(e,t);if(n||T.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(r){}return st(t,p,null,[e]).length>0},st.contains=function(e,t){return(e.ownerDocument||e)!==p&&c(e),y(e,t)},st.attr=function(e,t){var n;return(e.ownerDocument||e)!==p&&c(e),d||(t=t.toLowerCase()),(n=i.attrHandle[t])?n(e):d||T.attributes?e.getAttribute(t):((n=e.getAttributeNode(t))||e.getAttribute(t))&&e[t]===!0?t:n&&n.specified?n.value:null},st.error=function(e){throw Error("Syntax error, unrecognized expression: "+e)},st.uniqueSort=function(e){var t,n=[],r=1,i=0;if(u=!T.detectDuplicates,e.sort(v),u){for(;t=e[r];r++)t===e[r-1]&&(i=n.push(r));while(i--)e.splice(n[i],1)}return e};function ut(e,t){var n=t&&e,r=n&&(~t.sourceIndex||j)-(~e.sourceIndex||j);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function lt(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function ct(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function pt(e){return ot(function(t){return t=+t,ot(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}o=st.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=o(t);return n},i=st.selectors={cacheLength:50,createPseudo:ot,match:U,find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(et,tt),e[3]=(e[4]||e[5]||"").replace(et,tt),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||st.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&st.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return U.CHILD.test(e[0])?null:(e[4]?e[2]=e[4]:n&&z.test(n)&&(t=ft(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){return"*"===e?function(){return!0}:(e=e.replace(et,tt).toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===e})},CLASS:function(e){var t=k[e+" "];return t||(t=RegExp("(^|"+_+")"+e+"("+_+"|$)"))&&k(e,function(e){return t.test(e.className||typeof e.getAttribute!==A&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=st.attr(r,e);return null==i?"!="===t:t?(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i+" ").indexOf(n)>-1:"|="===t?i===n||i.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,p,f,d,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!u&&!s;if(m){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){c=m[x]||(m[x]={}),l=c[e]||[],d=l[0]===N&&l[1],f=l[0]===N&&l[2],p=d&&m.childNodes[d];while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[N,d,f];break}}else if(v&&(l=(t[x]||(t[x]={}))[e])&&l[0]===N)f=l[1];else while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(v&&((p[x]||(p[x]={}))[e]=[N,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||st.error("unsupported pseudo: "+e);return r[x]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ot(function(e,n){var i,o=r(e,t),a=o.length;while(a--)i=M.call(e,o[a]),e[i]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ot(function(e){var t=[],n=[],r=s(e.replace(W,"$1"));return r[x]?ot(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:ot(function(e){return function(t){return st(e,t).length>0}}),contains:ot(function(e){return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:ot(function(e){return X.test(e||"")||st.error("unsupported lang: "+e),e=e.replace(et,tt).toLowerCase(),function(t){var n;do if(n=d?t.getAttribute("xml:lang")||t.getAttribute("lang"):t.lang)return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>"@"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||t.toLowerCase()===e.type)},first:pt(function(){return[0]}),last:pt(function(e,t){return[t-1]}),eq:pt(function(e,t,n){return[0>n?n+t:n]}),even:pt(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:pt(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:pt(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:pt(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}};for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[n]=lt(n);for(n in{submit:!0,reset:!0})i.pseudos[n]=ct(n);function ft(e,t){var n,r,o,a,s,u,l,c=E[e+" "];if(c)return t?0:c.slice(0);s=e,u=[],l=i.preFilter;while(s){(!n||(r=$.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),u.push(o=[])),n=!1,(r=I.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(W," ")}),s=s.slice(n.length));for(a in i.filter)!(r=U[a].exec(s))||l[a]&&!(r=l[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?st.error(e):E(e,u).slice(0)}function dt(e){var t=0,n=e.length,r="";for(;n>t;t++)r+=e[t].value;return r}function ht(e,t,n){var i=t.dir,o=n&&"parentNode"===i,a=C++;return t.first?function(t,n,r){while(t=t[i])if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,s){var u,l,c,p=N+" "+a;if(s){while(t=t[i])if((1===t.nodeType||o)&&e(t,n,s))return!0}else while(t=t[i])if(1===t.nodeType||o)if(c=t[x]||(t[x]={}),(l=c[i])&&l[0]===p){if((u=l[1])===!0||u===r)return u===!0}else if(l=c[i]=[p],l[1]=e(t,n,s)||r,l[1]===!0)return!0}}function gt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function mt(e,t,n,r,i){var o,a=[],s=0,u=e.length,l=null!=t;for(;u>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),l&&t.push(s));return a}function yt(e,t,n,r,i,o){return r&&!r[x]&&(r=yt(r)),i&&!i[x]&&(i=yt(i,o)),ot(function(o,a,s,u){var l,c,p,f=[],d=[],h=a.length,g=o||xt(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:mt(g,f,e,s,u),y=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,y,s,u),r){l=mt(y,d),r(l,[],s,u),c=l.length;while(c--)(p=l[c])&&(y[d[c]]=!(m[d[c]]=p))}if(o){if(i||e){if(i){l=[],c=y.length;while(c--)(p=y[c])&&l.push(m[c]=p);i(null,y=[],l,u)}c=y.length;while(c--)(p=y[c])&&(l=i?M.call(o,p):f[c])>-1&&(o[l]=!(a[l]=p))}}else y=mt(y===a?y.splice(h,y.length):y),i?i(null,a,y,u):H.apply(a,y)})}function vt(e){var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],u=a?1:0,c=ht(function(e){return e===t},s,!0),p=ht(function(e){return M.call(t,e)>-1},s,!0),f=[function(e,n,r){return!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;o>u;u++)if(n=i.relative[e[u].type])f=[ht(gt(f),n)];else{if(n=i.filter[e[u].type].apply(null,e[u].matches),n[x]){for(r=++u;o>r;r++)if(i.relative[e[r].type])break;return yt(u>1&&gt(f),u>1&&dt(e.slice(0,u-1)).replace(W,"$1"),n,r>u&&vt(e.slice(u,r)),o>r&&vt(e=e.slice(r)),o>r&&dt(e))}f.push(n)}return gt(f)}function bt(e,t){var n=0,o=t.length>0,a=e.length>0,s=function(s,u,c,f,d){var h,g,m,y=[],v=0,b="0",x=s&&[],w=null!=d,T=l,C=s||a&&i.find.TAG("*",d&&u.parentNode||u),k=N+=null==T?1:Math.random()||.1;for(w&&(l=u!==p&&u,r=n);null!=(h=C[b]);b++){if(a&&h){g=0;while(m=e[g++])if(m(h,u,c)){f.push(h);break}w&&(N=k,r=++n)}o&&((h=!m&&h)&&v--,s&&x.push(h))}if(v+=b,o&&b!==v){g=0;while(m=t[g++])m(x,y,u,c);if(s){if(v>0)while(b--)x[b]||y[b]||(y[b]=L.call(f));y=mt(y)}H.apply(f,y),w&&!s&&y.length>0&&v+t.length>1&&st.uniqueSort(f)}return w&&(N=k,l=T),x};return o?ot(s):s}s=st.compile=function(e,t){var n,r=[],i=[],o=S[e+" "];if(!o){t||(t=ft(e)),n=t.length;while(n--)o=vt(t[n]),o[x]?r.push(o):i.push(o);o=S(e,bt(i,r))}return o};function xt(e,t,n){var r=0,i=t.length;for(;i>r;r++)st(e,t[r],n);return n}function wt(e,t,n,r){var o,a,u,l,c,p=ft(e);if(!r&&1===p.length){if(a=p[0]=p[0].slice(0),a.length>2&&"ID"===(u=a[0]).type&&9===t.nodeType&&!d&&i.relative[a[1].type]){if(t=i.find.ID(u.matches[0].replace(et,tt),t)[0],!t)return n;e=e.slice(a.shift().value.length)}o=U.needsContext.test(e)?0:a.length;while(o--){if(u=a[o],i.relative[l=u.type])break;if((c=i.find[l])&&(r=c(u.matches[0].replace(et,tt),V.test(a[0].type)&&t.parentNode||t))){if(a.splice(o,1),e=r.length&&dt(a),!e)return H.apply(n,q.call(r,0)),n;break}}}return s(e,p)(r,t,d,n,V.test(e)),n}i.pseudos.nth=i.pseudos.eq;function Tt(){}i.filters=Tt.prototype=i.pseudos,i.setFilters=new Tt,c(),st.attr=b.attr,b.find=st,b.expr=st.selectors,b.expr[":"]=b.expr.pseudos,b.unique=st.uniqueSort,b.text=st.getText,b.isXMLDoc=st.isXML,b.contains=st.contains}(e);var at=/Until$/,st=/^(?:parents|prev(?:Until|All))/,ut=/^.[^:#\[\.,]*$/,lt=b.expr.match.needsContext,ct={children:!0,contents:!0,next:!0,prev:!0};b.fn.extend({find:function(e){var t,n,r,i=this.length;if("string"!=typeof e)return r=this,this.pushStack(b(e).filter(function(){for(t=0;i>t;t++)if(b.contains(r[t],this))return!0}));for(n=[],t=0;i>t;t++)b.find(e,this[t],n);return n=this.pushStack(i>1?b.unique(n):n),n.selector=(this.selector?this.selector+" ":"")+e,n},has:function(e){var t,n=b(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(b.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(ft(this,e,!1))},filter:function(e){return this.pushStack(ft(this,e,!0))},is:function(e){return!!e&&("string"==typeof e?lt.test(e)?b(e,this.context).index(this[0])>=0:b.filter(e,this).length>0:this.filter(e).length>0)},closest:function(e,t){var n,r=0,i=this.length,o=[],a=lt.test(e)||"string"!=typeof e?b(e,t||this.context):0;for(;i>r;r++){n=this[r];while(n&&n.ownerDocument&&n!==t&&11!==n.nodeType){if(a?a.index(n)>-1:b.find.matchesSelector(n,e)){o.push(n);break}n=n.parentNode}}return this.pushStack(o.length>1?b.unique(o):o)},index:function(e){return e?"string"==typeof e?b.inArray(this[0],b(e)):b.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n="string"==typeof e?b(e,t):b.makeArray(e&&e.nodeType?[e]:e),r=b.merge(this.get(),n);return this.pushStack(b.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.fn.andSelf=b.fn.addBack;function pt(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return b.dir(e,"parentNode")},parentsUntil:function(e,t,n){return b.dir(e,"parentNode",n)},next:function(e){return pt(e,"nextSibling")},prev:function(e){return pt(e,"previousSibling")},nextAll:function(e){return b.dir(e,"nextSibling")},prevAll:function(e){return b.dir(e,"previousSibling")},nextUntil:function(e,t,n){return b.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return b.dir(e,"previousSibling",n)},siblings:function(e){return b.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return b.sibling(e.firstChild)},contents:function(e){return b.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:b.merge([],e.childNodes)}},function(e,t){b.fn[e]=function(n,r){var i=b.map(this,t,n);return at.test(e)||(r=n),r&&"string"==typeof r&&(i=b.filter(r,i)),i=this.length>1&&!ct[e]?b.unique(i):i,this.length>1&&st.test(e)&&(i=i.reverse()),this.pushStack(i)}}),b.extend({filter:function(e,t,n){return n&&(e=":not("+e+")"),1===t.length?b.find.matchesSelector(t[0],e)?[t[0]]:[]:b.find.matches(e,t)},dir:function(e,n,r){var i=[],o=e[n];while(o&&9!==o.nodeType&&(r===t||1!==o.nodeType||!b(o).is(r)))1===o.nodeType&&i.push(o),o=o[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function ft(e,t,n){if(t=t||0,b.isFunction(t))return b.grep(e,function(e,r){var i=!!t.call(e,r,e);return i===n});if(t.nodeType)return b.grep(e,function(e){return e===t===n});if("string"==typeof t){var r=b.grep(e,function(e){return 1===e.nodeType});if(ut.test(t))return b.filter(t,r,!n);t=b.filter(t,r)}return b.grep(e,function(e){return b.inArray(e,t)>=0===n})}function dt(e){var t=ht.split("|"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}var ht="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",gt=/ jQuery\d+="(?:null|\d+)"/g,mt=RegExp("<(?:"+ht+")[\\s/>]","i"),yt=/^\s+/,vt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bt=/<([\w:]+)/,xt=/<tbody/i,wt=/<|&#?\w+;/,Tt=/<(?:script|style|link)/i,Nt=/^(?:checkbox|radio)$/i,Ct=/checked\s*(?:[^=]|=\s*.checked.)/i,kt=/^$|\/(?:java|ecma)script/i,Et=/^true\/(.*)/,St=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,At={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:b.support.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},jt=dt(o),Dt=jt.appendChild(o.createElement("div"));At.optgroup=At.option,At.tbody=At.tfoot=At.colgroup=At.caption=At.thead,At.th=At.td,b.fn.extend({text:function(e){return b.access(this,function(e){return e===t?b.text(this):this.empty().append((this[0]&&this[0].ownerDocument||o).createTextNode(e))},null,e,arguments.length)},wrapAll:function(e){if(b.isFunction(e))return this.each(function(t){b(this).wrapAll(e.call(this,t))});if(this[0]){var t=b(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&1===e.firstChild.nodeType)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return b.isFunction(e)?this.each(function(t){b(this).wrapInner(e.call(this,t))}):this.each(function(){var t=b(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=b.isFunction(e);return this.each(function(n){b(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){b.nodeName(this,"body")||b(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(e){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&this.appendChild(e)})},prepend:function(){return this.domManip(arguments,!0,function(e){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&this.insertBefore(e,this.firstChild)})},before:function(){return this.domManip(arguments,!1,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,!1,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=0;for(;null!=(n=this[r]);r++)(!e||b.filter(e,[n]).length>0)&&(t||1!==n.nodeType||b.cleanData(Ot(n)),n.parentNode&&(t&&b.contains(n.ownerDocument,n)&&Mt(Ot(n,"script")),n.parentNode.removeChild(n)));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++){1===e.nodeType&&b.cleanData(Ot(e,!1));while(e.firstChild)e.removeChild(e.firstChild);e.options&&b.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return b.clone(this,e,t)})},html:function(e){return b.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return 1===n.nodeType?n.innerHTML.replace(gt,""):t;if(!("string"!=typeof e||Tt.test(e)||!b.support.htmlSerialize&&mt.test(e)||!b.support.leadingWhitespace&&yt.test(e)||At[(bt.exec(e)||["",""])[1].toLowerCase()])){e=e.replace(vt,"<$1></$2>");try{for(;i>r;r++)n=this[r]||{},1===n.nodeType&&(b.cleanData(Ot(n,!1)),n.innerHTML=e);n=0}catch(o){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(e){var t=b.isFunction(e);return t||"string"==typeof e||(e=b(e).not(this).detach()),this.domManip([e],!0,function(e){var t=this.nextSibling,n=this.parentNode;n&&(b(this).remove(),n.insertBefore(e,t))})},detach:function(e){return this.remove(e,!0)},domManip:function(e,n,r){e=f.apply([],e);var i,o,a,s,u,l,c=0,p=this.length,d=this,h=p-1,g=e[0],m=b.isFunction(g);if(m||!(1>=p||"string"!=typeof g||b.support.checkClone)&&Ct.test(g))return this.each(function(i){var o=d.eq(i);m&&(e[0]=g.call(this,i,n?o.html():t)),o.domManip(e,n,r)});if(p&&(l=b.buildFragment(e,this[0].ownerDocument,!1,this),i=l.firstChild,1===l.childNodes.length&&(l=i),i)){for(n=n&&b.nodeName(i,"tr"),s=b.map(Ot(l,"script"),Ht),a=s.length;p>c;c++)o=l,c!==h&&(o=b.clone(o,!0,!0),a&&b.merge(s,Ot(o,"script"))),r.call(n&&b.nodeName(this[c],"table")?Lt(this[c],"tbody"):this[c],o,c);if(a)for(u=s[s.length-1].ownerDocument,b.map(s,qt),c=0;a>c;c++)o=s[c],kt.test(o.type||"")&&!b._data(o,"globalEval")&&b.contains(u,o)&&(o.src?b.ajax({url:o.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):b.globalEval((o.text||o.textContent||o.innerHTML||"").replace(St,"")));l=i=null}return this}});function Lt(e,t){return e.getElementsByTagName(t)[0]||e.appendChild(e.ownerDocument.createElement(t))}function Ht(e){var t=e.getAttributeNode("type");return e.type=(t&&t.specified)+"/"+e.type,e}function qt(e){var t=Et.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function Mt(e,t){var n,r=0;for(;null!=(n=e[r]);r++)b._data(n,"globalEval",!t||b._data(t[r],"globalEval"))}function _t(e,t){if(1===t.nodeType&&b.hasData(e)){var n,r,i,o=b._data(e),a=b._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)b.event.add(t,n,s[n][r])}a.data&&(a.data=b.extend({},a.data))}}function Ft(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!b.support.noCloneEvent&&t[b.expando]){i=b._data(t);for(r in i.events)b.removeEvent(t,r,i.handle);t.removeAttribute(b.expando)}"script"===n&&t.text!==e.text?(Ht(t).text=e.text,qt(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),b.support.html5Clone&&e.innerHTML&&!b.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Nt.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}b.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){b.fn[e]=function(e){var n,r=0,i=[],o=b(e),a=o.length-1;for(;a>=r;r++)n=r===a?this:this.clone(!0),b(o[r])[t](n),d.apply(i,n.get());return this.pushStack(i)}});function Ot(e,n){var r,o,a=0,s=typeof e.getElementsByTagName!==i?e.getElementsByTagName(n||"*"):typeof e.querySelectorAll!==i?e.querySelectorAll(n||"*"):t;if(!s)for(s=[],r=e.childNodes||e;null!=(o=r[a]);a++)!n||b.nodeName(o,n)?s.push(o):b.merge(s,Ot(o,n));return n===t||n&&b.nodeName(e,n)?b.merge([e],s):s}function Bt(e){Nt.test(e.type)&&(e.defaultChecked=e.checked)}b.extend({clone:function(e,t,n){var r,i,o,a,s,u=b.contains(e.ownerDocument,e);if(b.support.html5Clone||b.isXMLDoc(e)||!mt.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Dt.innerHTML=e.outerHTML,Dt.removeChild(o=Dt.firstChild)),!(b.support.noCloneEvent&&b.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(r=Ot(o),s=Ot(e),a=0;null!=(i=s[a]);++a)r[a]&&Ft(i,r[a]);if(t)if(n)for(s=s||Ot(e),r=r||Ot(o),a=0;null!=(i=s[a]);a++)_t(i,r[a]);else _t(e,o);return r=Ot(o,"script"),r.length>0&&Mt(r,!u&&Ot(e,"script")),r=s=i=null,o},buildFragment:function(e,t,n,r){var i,o,a,s,u,l,c,p=e.length,f=dt(t),d=[],h=0;for(;p>h;h++)if(o=e[h],o||0===o)if("object"===b.type(o))b.merge(d,o.nodeType?[o]:o);else if(wt.test(o)){s=s||f.appendChild(t.createElement("div")),u=(bt.exec(o)||["",""])[1].toLowerCase(),c=At[u]||At._default,s.innerHTML=c[1]+o.replace(vt,"<$1></$2>")+c[2],i=c[0];while(i--)s=s.lastChild;if(!b.support.leadingWhitespace&&yt.test(o)&&d.push(t.createTextNode(yt.exec(o)[0])),!b.support.tbody){o="table"!==u||xt.test(o)?"<table>"!==c[1]||xt.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;while(i--)b.nodeName(l=o.childNodes[i],"tbody")&&!l.childNodes.length&&o.removeChild(l)
}b.merge(d,s.childNodes),s.textContent="";while(s.firstChild)s.removeChild(s.firstChild);s=f.lastChild}else d.push(t.createTextNode(o));s&&f.removeChild(s),b.support.appendChecked||b.grep(Ot(d,"input"),Bt),h=0;while(o=d[h++])if((!r||-1===b.inArray(o,r))&&(a=b.contains(o.ownerDocument,o),s=Ot(f.appendChild(o),"script"),a&&Mt(s),n)){i=0;while(o=s[i++])kt.test(o.type||"")&&n.push(o)}return s=null,f},cleanData:function(e,t){var n,r,o,a,s=0,u=b.expando,l=b.cache,p=b.support.deleteExpando,f=b.event.special;for(;null!=(n=e[s]);s++)if((t||b.acceptData(n))&&(o=n[u],a=o&&l[o])){if(a.events)for(r in a.events)f[r]?b.event.remove(n,r):b.removeEvent(n,r,a.handle);l[o]&&(delete l[o],p?delete n[u]:typeof n.removeAttribute!==i?n.removeAttribute(u):n[u]=null,c.push(o))}}});var Pt,Rt,Wt,$t=/alpha\([^)]*\)/i,It=/opacity\s*=\s*([^)]*)/,zt=/^(top|right|bottom|left)$/,Xt=/^(none|table(?!-c[ea]).+)/,Ut=/^margin/,Vt=RegExp("^("+x+")(.*)$","i"),Yt=RegExp("^("+x+")(?!px)[a-z%]+$","i"),Jt=RegExp("^([+-])=("+x+")","i"),Gt={BODY:"block"},Qt={position:"absolute",visibility:"hidden",display:"block"},Kt={letterSpacing:0,fontWeight:400},Zt=["Top","Right","Bottom","Left"],en=["Webkit","O","Moz","ms"];function tn(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=en.length;while(i--)if(t=en[i]+n,t in e)return t;return r}function nn(e,t){return e=t||e,"none"===b.css(e,"display")||!b.contains(e.ownerDocument,e)}function rn(e,t){var n,r,i,o=[],a=0,s=e.length;for(;s>a;a++)r=e[a],r.style&&(o[a]=b._data(r,"olddisplay"),n=r.style.display,t?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&nn(r)&&(o[a]=b._data(r,"olddisplay",un(r.nodeName)))):o[a]||(i=nn(r),(n&&"none"!==n||!i)&&b._data(r,"olddisplay",i?n:b.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}b.fn.extend({css:function(e,n){return b.access(this,function(e,n,r){var i,o,a={},s=0;if(b.isArray(n)){for(o=Rt(e),i=n.length;i>s;s++)a[n[s]]=b.css(e,n[s],!1,o);return a}return r!==t?b.style(e,n,r):b.css(e,n)},e,n,arguments.length>1)},show:function(){return rn(this,!0)},hide:function(){return rn(this)},toggle:function(e){var t="boolean"==typeof e;return this.each(function(){(t?e:nn(this))?b(this).show():b(this).hide()})}}),b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Wt(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":b.support.cssFloat?"cssFloat":"styleFloat"},style:function(e,n,r,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,a,s,u=b.camelCase(n),l=e.style;if(n=b.cssProps[u]||(b.cssProps[u]=tn(l,u)),s=b.cssHooks[n]||b.cssHooks[u],r===t)return s&&"get"in s&&(o=s.get(e,!1,i))!==t?o:l[n];if(a=typeof r,"string"===a&&(o=Jt.exec(r))&&(r=(o[1]+1)*o[2]+parseFloat(b.css(e,n)),a="number"),!(null==r||"number"===a&&isNaN(r)||("number"!==a||b.cssNumber[u]||(r+="px"),b.support.clearCloneStyle||""!==r||0!==n.indexOf("background")||(l[n]="inherit"),s&&"set"in s&&(r=s.set(e,r,i))===t)))try{l[n]=r}catch(c){}}},css:function(e,n,r,i){var o,a,s,u=b.camelCase(n);return n=b.cssProps[u]||(b.cssProps[u]=tn(e.style,u)),s=b.cssHooks[n]||b.cssHooks[u],s&&"get"in s&&(a=s.get(e,!0,r)),a===t&&(a=Wt(e,n,i)),"normal"===a&&n in Kt&&(a=Kt[n]),""===r||r?(o=parseFloat(a),r===!0||b.isNumeric(o)?o||0:a):a},swap:function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i}}),e.getComputedStyle?(Rt=function(t){return e.getComputedStyle(t,null)},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),u=s?s.getPropertyValue(n)||s[n]:t,l=e.style;return s&&(""!==u||b.contains(e.ownerDocument,e)||(u=b.style(e,n)),Yt.test(u)&&Ut.test(n)&&(i=l.width,o=l.minWidth,a=l.maxWidth,l.minWidth=l.maxWidth=l.width=u,u=s.width,l.width=i,l.minWidth=o,l.maxWidth=a)),u}):o.documentElement.currentStyle&&(Rt=function(e){return e.currentStyle},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),u=s?s[n]:t,l=e.style;return null==u&&l&&l[n]&&(u=l[n]),Yt.test(u)&&!zt.test(n)&&(i=l.left,o=e.runtimeStyle,a=o&&o.left,a&&(o.left=e.currentStyle.left),l.left="fontSize"===n?"1em":u,u=l.pixelLeft+"px",l.left=i,a&&(o.left=a)),""===u?"auto":u});function on(e,t,n){var r=Vt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function an(e,t,n,r,i){var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;for(;4>o;o+=2)"margin"===n&&(a+=b.css(e,n+Zt[o],!0,i)),r?("content"===n&&(a-=b.css(e,"padding"+Zt[o],!0,i)),"margin"!==n&&(a-=b.css(e,"border"+Zt[o]+"Width",!0,i))):(a+=b.css(e,"padding"+Zt[o],!0,i),"padding"!==n&&(a+=b.css(e,"border"+Zt[o]+"Width",!0,i)));return a}function sn(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=Rt(e),a=b.support.boxSizing&&"border-box"===b.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=Wt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Yt.test(i))return i;r=a&&(b.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+an(e,t,n||(a?"border":"content"),r,o)+"px"}function un(e){var t=o,n=Gt[e];return n||(n=ln(e,t),"none"!==n&&n||(Pt=(Pt||b("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(t.documentElement),t=(Pt[0].contentWindow||Pt[0].contentDocument).document,t.write("<!doctype html><html><body>"),t.close(),n=ln(e,t),Pt.detach()),Gt[e]=n),n}function ln(e,t){var n=b(t.createElement(e)).appendTo(t.body),r=b.css(n[0],"display");return n.remove(),r}b.each(["height","width"],function(e,n){b.cssHooks[n]={get:function(e,r,i){return r?0===e.offsetWidth&&Xt.test(b.css(e,"display"))?b.swap(e,Qt,function(){return sn(e,n,i)}):sn(e,n,i):t},set:function(e,t,r){var i=r&&Rt(e);return on(e,t,r?an(e,n,r,b.support.boxSizing&&"border-box"===b.css(e,"boxSizing",!1,i),i):0)}}}),b.support.opacity||(b.cssHooks.opacity={get:function(e,t){return It.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=b.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===b.trim(o.replace($t,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=$t.test(o)?o.replace($t,i):o+" "+i)}}),b(function(){b.support.reliableMarginRight||(b.cssHooks.marginRight={get:function(e,n){return n?b.swap(e,{display:"inline-block"},Wt,[e,"marginRight"]):t}}),!b.support.pixelPosition&&b.fn.position&&b.each(["top","left"],function(e,n){b.cssHooks[n]={get:function(e,r){return r?(r=Wt(e,n),Yt.test(r)?b(e).position()[n]+"px":r):t}}})}),b.expr&&b.expr.filters&&(b.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight||!b.support.reliableHiddenOffsets&&"none"===(e.style&&e.style.display||b.css(e,"display"))},b.expr.filters.visible=function(e){return!b.expr.filters.hidden(e)}),b.each({margin:"",padding:"",border:"Width"},function(e,t){b.cssHooks[e+t]={expand:function(n){var r=0,i={},o="string"==typeof n?n.split(" "):[n];for(;4>r;r++)i[e+Zt[r]+t]=o[r]||o[r-2]||o[0];return i}},Ut.test(e)||(b.cssHooks[e+t].set=on)});var cn=/%20/g,pn=/\[\]$/,fn=/\r?\n/g,dn=/^(?:submit|button|image|reset|file)$/i,hn=/^(?:input|select|textarea|keygen)/i;b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=b.prop(this,"elements");return e?b.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!b(this).is(":disabled")&&hn.test(this.nodeName)&&!dn.test(e)&&(this.checked||!Nt.test(e))}).map(function(e,t){var n=b(this).val();return null==n?null:b.isArray(n)?b.map(n,function(e){return{name:t.name,value:e.replace(fn,"\r\n")}}):{name:t.name,value:n.replace(fn,"\r\n")}}).get()}}),b.param=function(e,n){var r,i=[],o=function(e,t){t=b.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(n===t&&(n=b.ajaxSettings&&b.ajaxSettings.traditional),b.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,function(){o(this.name,this.value)});else for(r in e)gn(r,e[r],n,o);return i.join("&").replace(cn,"+")};function gn(e,t,n,r){var i;if(b.isArray(t))b.each(t,function(t,i){n||pn.test(e)?r(e,i):gn(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==b.type(t))r(e,t);else for(i in t)gn(e+"["+i+"]",t[i],n,r)}b.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){b.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),b.fn.hover=function(e,t){return this.mouseenter(e).mouseleave(t||e)};var mn,yn,vn=b.now(),bn=/\?/,xn=/#.*$/,wn=/([?&])_=[^&]*/,Tn=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Nn=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Cn=/^(?:GET|HEAD)$/,kn=/^\/\//,En=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,Sn=b.fn.load,An={},jn={},Dn="*/".concat("*");try{yn=a.href}catch(Ln){yn=o.createElement("a"),yn.href="",yn=yn.href}mn=En.exec(yn.toLowerCase())||[];function Hn(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(w)||[];if(b.isFunction(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qn(e,n,r,i){var o={},a=e===jn;function s(u){var l;return o[u]=!0,b.each(e[u]||[],function(e,u){var c=u(n,r,i);return"string"!=typeof c||a||o[c]?a?!(l=c):t:(n.dataTypes.unshift(c),s(c),!1)}),l}return s(n.dataTypes[0])||!o["*"]&&s("*")}function Mn(e,n){var r,i,o=b.ajaxSettings.flatOptions||{};for(i in n)n[i]!==t&&((o[i]?e:r||(r={}))[i]=n[i]);return r&&b.extend(!0,e,r),e}b.fn.load=function(e,n,r){if("string"!=typeof e&&Sn)return Sn.apply(this,arguments);var i,o,a,s=this,u=e.indexOf(" ");return u>=0&&(i=e.slice(u,e.length),e=e.slice(0,u)),b.isFunction(n)?(r=n,n=t):n&&"object"==typeof n&&(a="POST"),s.length>0&&b.ajax({url:e,type:a,dataType:"html",data:n}).done(function(e){o=arguments,s.html(i?b("<div>").append(b.parseHTML(e)).find(i):e)}).complete(r&&function(e,t){s.each(r,o||[e.responseText,t,e])}),this},b.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){b.fn[t]=function(e){return this.on(t,e)}}),b.each(["get","post"],function(e,n){b[n]=function(e,r,i,o){return b.isFunction(r)&&(o=o||i,i=r,r=t),b.ajax({url:e,type:n,dataType:o,data:r,success:i})}}),b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:yn,type:"GET",isLocal:Nn.test(mn[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Dn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":e.String,"text html":!0,"text json":b.parseJSON,"text xml":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Mn(Mn(e,b.ajaxSettings),t):Mn(b.ajaxSettings,e)},ajaxPrefilter:Hn(An),ajaxTransport:Hn(jn),ajax:function(e,n){"object"==typeof e&&(n=e,e=t),n=n||{};var r,i,o,a,s,u,l,c,p=b.ajaxSetup({},n),f=p.context||p,d=p.context&&(f.nodeType||f.jquery)?b(f):b.event,h=b.Deferred(),g=b.Callbacks("once memory"),m=p.statusCode||{},y={},v={},x=0,T="canceled",N={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!c){c={};while(t=Tn.exec(a))c[t[1].toLowerCase()]=t[2]}t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=v[n]=v[n]||e,y[e]=t),this},overrideMimeType:function(e){return x||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>x)for(t in e)m[t]=[m[t],e[t]];else N.always(e[N.status]);return this},abort:function(e){var t=e||T;return l&&l.abort(t),k(0,t),this}};if(h.promise(N).complete=g.add,N.success=N.done,N.error=N.fail,p.url=((e||p.url||yn)+"").replace(xn,"").replace(kn,mn[1]+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=b.trim(p.dataType||"*").toLowerCase().match(w)||[""],null==p.crossDomain&&(r=En.exec(p.url.toLowerCase()),p.crossDomain=!(!r||r[1]===mn[1]&&r[2]===mn[2]&&(r[3]||("http:"===r[1]?80:443))==(mn[3]||("http:"===mn[1]?80:443)))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=b.param(p.data,p.traditional)),qn(An,p,n,N),2===x)return N;u=p.global,u&&0===b.active++&&b.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Cn.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(bn.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=wn.test(o)?o.replace(wn,"$1_="+vn++):o+(bn.test(o)?"&":"?")+"_="+vn++)),p.ifModified&&(b.lastModified[o]&&N.setRequestHeader("If-Modified-Since",b.lastModified[o]),b.etag[o]&&N.setRequestHeader("If-None-Match",b.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&N.setRequestHeader("Content-Type",p.contentType),N.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Dn+"; q=0.01":""):p.accepts["*"]);for(i in p.headers)N.setRequestHeader(i,p.headers[i]);if(p.beforeSend&&(p.beforeSend.call(f,N,p)===!1||2===x))return N.abort();T="abort";for(i in{success:1,error:1,complete:1})N[i](p[i]);if(l=qn(jn,p,n,N)){N.readyState=1,u&&d.trigger("ajaxSend",[N,p]),p.async&&p.timeout>0&&(s=setTimeout(function(){N.abort("timeout")},p.timeout));try{x=1,l.send(y,k)}catch(C){if(!(2>x))throw C;k(-1,C)}}else k(-1,"No Transport");function k(e,n,r,i){var c,y,v,w,T,C=n;2!==x&&(x=2,s&&clearTimeout(s),l=t,a=i||"",N.readyState=e>0?4:0,r&&(w=_n(p,N,r)),e>=200&&300>e||304===e?(p.ifModified&&(T=N.getResponseHeader("Last-Modified"),T&&(b.lastModified[o]=T),T=N.getResponseHeader("etag"),T&&(b.etag[o]=T)),204===e?(c=!0,C="nocontent"):304===e?(c=!0,C="notmodified"):(c=Fn(p,w),C=c.state,y=c.data,v=c.error,c=!v)):(v=C,(e||!C)&&(C="error",0>e&&(e=0))),N.status=e,N.statusText=(n||C)+"",c?h.resolveWith(f,[y,C,N]):h.rejectWith(f,[N,C,v]),N.statusCode(m),m=t,u&&d.trigger(c?"ajaxSuccess":"ajaxError",[N,p,c?y:v]),g.fireWith(f,[N,C]),u&&(d.trigger("ajaxComplete",[N,p]),--b.active||b.event.trigger("ajaxStop")))}return N},getScript:function(e,n){return b.get(e,t,n,"script")},getJSON:function(e,t,n){return b.get(e,t,n,"json")}});function _n(e,n,r){var i,o,a,s,u=e.contents,l=e.dataTypes,c=e.responseFields;for(s in c)s in r&&(n[c[s]]=r[s]);while("*"===l[0])l.shift(),o===t&&(o=e.mimeType||n.getResponseHeader("Content-Type"));if(o)for(s in u)if(u[s]&&u[s].test(o)){l.unshift(s);break}if(l[0]in r)a=l[0];else{for(s in r){if(!l[0]||e.converters[s+" "+l[0]]){a=s;break}i||(i=s)}a=a||i}return a?(a!==l[0]&&l.unshift(a),r[a]):t}function Fn(e,t){var n,r,i,o,a={},s=0,u=e.dataTypes.slice(),l=u[0];if(e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u[1])for(i in e.converters)a[i.toLowerCase()]=e.converters[i];for(;r=u[++s];)if("*"!==r){if("*"!==l&&l!==r){if(i=a[l+" "+r]||a["* "+r],!i)for(n in a)if(o=n.split(" "),o[1]===r&&(i=a[l+" "+o[0]]||a["* "+o[0]])){i===!0?i=a[n]:a[n]!==!0&&(r=o[0],u.splice(s--,0,r));break}if(i!==!0)if(i&&e["throws"])t=i(t);else try{t=i(t)}catch(c){return{state:"parsererror",error:i?c:"No conversion from "+l+" to "+r}}}l=r}return{state:"success",data:t}}b.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return b.globalEval(e),e}}}),b.ajaxPrefilter("script",function(e){e.cache===t&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),b.ajaxTransport("script",function(e){if(e.crossDomain){var n,r=o.head||b("head")[0]||o.documentElement;return{send:function(t,i){n=o.createElement("script"),n.async=!0,e.scriptCharset&&(n.charset=e.scriptCharset),n.src=e.url,n.onload=n.onreadystatechange=function(e,t){(t||!n.readyState||/loaded|complete/.test(n.readyState))&&(n.onload=n.onreadystatechange=null,n.parentNode&&n.parentNode.removeChild(n),n=null,t||i(200,"success"))},r.insertBefore(n,r.firstChild)},abort:function(){n&&n.onload(t,!0)}}}});var On=[],Bn=/(=)\?(?=&|$)|\?\?/;b.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=On.pop()||b.expando+"_"+vn++;return this[e]=!0,e}}),b.ajaxPrefilter("json jsonp",function(n,r,i){var o,a,s,u=n.jsonp!==!1&&(Bn.test(n.url)?"url":"string"==typeof n.data&&!(n.contentType||"").indexOf("application/x-www-form-urlencoded")&&Bn.test(n.data)&&"data");return u||"jsonp"===n.dataTypes[0]?(o=n.jsonpCallback=b.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,u?n[u]=n[u].replace(Bn,"$1"+o):n.jsonp!==!1&&(n.url+=(bn.test(n.url)?"&":"?")+n.jsonp+"="+o),n.converters["script json"]=function(){return s||b.error(o+" was not called"),s[0]},n.dataTypes[0]="json",a=e[o],e[o]=function(){s=arguments},i.always(function(){e[o]=a,n[o]&&(n.jsonpCallback=r.jsonpCallback,On.push(o)),s&&b.isFunction(a)&&a(s[0]),s=a=t}),"script"):t});var Pn,Rn,Wn=0,$n=e.ActiveXObject&&function(){var e;for(e in Pn)Pn[e](t,!0)};function In(){try{return new e.XMLHttpRequest}catch(t){}}function zn(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}b.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&In()||zn()}:In,Rn=b.ajaxSettings.xhr(),b.support.cors=!!Rn&&"withCredentials"in Rn,Rn=b.support.ajax=!!Rn,Rn&&b.ajaxTransport(function(n){if(!n.crossDomain||b.support.cors){var r;return{send:function(i,o){var a,s,u=n.xhr();if(n.username?u.open(n.type,n.url,n.async,n.username,n.password):u.open(n.type,n.url,n.async),n.xhrFields)for(s in n.xhrFields)u[s]=n.xhrFields[s];n.mimeType&&u.overrideMimeType&&u.overrideMimeType(n.mimeType),n.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");try{for(s in i)u.setRequestHeader(s,i[s])}catch(l){}u.send(n.hasContent&&n.data||null),r=function(e,i){var s,l,c,p;try{if(r&&(i||4===u.readyState))if(r=t,a&&(u.onreadystatechange=b.noop,$n&&delete Pn[a]),i)4!==u.readyState&&u.abort();else{p={},s=u.status,l=u.getAllResponseHeaders(),"string"==typeof u.responseText&&(p.text=u.responseText);try{c=u.statusText}catch(f){c=""}s||!n.isLocal||n.crossDomain?1223===s&&(s=204):s=p.text?200:404}}catch(d){i||o(-1,d)}p&&o(s,c,p,l)},n.async?4===u.readyState?setTimeout(r):(a=++Wn,$n&&(Pn||(Pn={},b(e).unload($n)),Pn[a]=r),u.onreadystatechange=r):r()},abort:function(){r&&r(t,!0)}}}});var Xn,Un,Vn=/^(?:toggle|show|hide)$/,Yn=RegExp("^(?:([+-])=|)("+x+")([a-z%]*)$","i"),Jn=/queueHooks$/,Gn=[nr],Qn={"*":[function(e,t){var n,r,i=this.createTween(e,t),o=Yn.exec(t),a=i.cur(),s=+a||0,u=1,l=20;if(o){if(n=+o[2],r=o[3]||(b.cssNumber[e]?"":"px"),"px"!==r&&s){s=b.css(i.elem,e,!0)||n||1;do u=u||".5",s/=u,b.style(i.elem,e,s+r);while(u!==(u=i.cur()/a)&&1!==u&&--l)}i.unit=r,i.start=s,i.end=o[1]?s+(o[1]+1)*n:n}return i}]};function Kn(){return setTimeout(function(){Xn=t}),Xn=b.now()}function Zn(e,t){b.each(t,function(t,n){var r=(Qn[t]||[]).concat(Qn["*"]),i=0,o=r.length;for(;o>i;i++)if(r[i].call(e,t,n))return})}function er(e,t,n){var r,i,o=0,a=Gn.length,s=b.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;var t=Xn||Kn(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,a=0,u=l.tweens.length;for(;u>a;a++)l.tweens[a].run(o);return s.notifyWith(e,[l,o,n]),1>o&&u?n:(s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:b.extend({},t),opts:b.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Xn||Kn(),duration:n.duration,tweens:[],createTween:function(t,n){var r=b.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?s.resolveWith(e,[l,t]):s.rejectWith(e,[l,t]),this}}),c=l.props;for(tr(c,l.opts.specialEasing);a>o;o++)if(r=Gn[o].call(l,e,c,l.opts))return r;return Zn(l,c),b.isFunction(l.opts.start)&&l.opts.start.call(e,l),b.fx.timer(b.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function tr(e,t){var n,r,i,o,a;for(i in e)if(r=b.camelCase(i),o=t[r],n=e[i],b.isArray(n)&&(o=n[1],n=e[i]=n[0]),i!==r&&(e[r]=n,delete e[i]),a=b.cssHooks[r],a&&"expand"in a){n=a.expand(n),delete e[r];for(i in n)i in e||(e[i]=n[i],t[i]=o)}else t[r]=o}b.Animation=b.extend(er,{tweener:function(e,t){b.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Qn[n]=Qn[n]||[],Qn[n].unshift(t)},prefilter:function(e,t){t?Gn.unshift(e):Gn.push(e)}});function nr(e,t,n){var r,i,o,a,s,u,l,c,p,f=this,d=e.style,h={},g=[],m=e.nodeType&&nn(e);n.queue||(c=b._queueHooks(e,"fx"),null==c.unqueued&&(c.unqueued=0,p=c.empty.fire,c.empty.fire=function(){c.unqueued||p()}),c.unqueued++,f.always(function(){f.always(function(){c.unqueued--,b.queue(e,"fx").length||c.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],"inline"===b.css(e,"display")&&"none"===b.css(e,"float")&&(b.support.inlineBlockNeedsLayout&&"inline"!==un(e.nodeName)?d.zoom=1:d.display="inline-block")),n.overflow&&(d.overflow="hidden",b.support.shrinkWrapBlocks||f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(i in t)if(a=t[i],Vn.exec(a)){if(delete t[i],u=u||"toggle"===a,a===(m?"hide":"show"))continue;g.push(i)}if(o=g.length){s=b._data(e,"fxshow")||b._data(e,"fxshow",{}),"hidden"in s&&(m=s.hidden),u&&(s.hidden=!m),m?b(e).show():f.done(function(){b(e).hide()}),f.done(function(){var t;b._removeData(e,"fxshow");for(t in h)b.style(e,t,h[t])});for(i=0;o>i;i++)r=g[i],l=f.createTween(r,m?s[r]:0),h[r]=s[r]||b.style(e,r),r in s||(s[r]=l.start,m&&(l.end=l.start,l.start="width"===r||"height"===r?1:0))}}function rr(e,t,n,r,i){return new rr.prototype.init(e,t,n,r,i)}b.Tween=rr,rr.prototype={constructor:rr,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(b.cssNumber[n]?"":"px")},cur:function(){var e=rr.propHooks[this.prop];return e&&e.get?e.get(this):rr.propHooks._default.get(this)},run:function(e){var t,n=rr.propHooks[this.prop];return this.pos=t=this.options.duration?b.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rr.propHooks._default.set(this),this}},rr.prototype.init.prototype=rr.prototype,rr.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=b.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){b.fx.step[e.prop]?b.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[b.cssProps[e.prop]]||b.cssHooks[e.prop])?b.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},rr.propHooks.scrollTop=rr.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},b.each(["toggle","show","hide"],function(e,t){var n=b.fn[t];b.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ir(t,!0),e,r,i)}}),b.fn.extend({fadeTo:function(e,t,n,r){return this.filter(nn).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=b.isEmptyObject(e),o=b.speed(t,n,r),a=function(){var t=er(this,b.extend({},e),o);a.finish=function(){t.stop(!0)},(i||b._data(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,n,r){var i=function(e){var t=e.stop;delete e.stop,t(r)};return"string"!=typeof e&&(r=n,n=e,e=t),n&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,n=null!=e&&e+"queueHooks",o=b.timers,a=b._data(this);if(n)a[n]&&a[n].stop&&i(a[n]);else for(n in a)a[n]&&a[n].stop&&Jn.test(n)&&i(a[n]);for(n=o.length;n--;)o[n].elem!==this||null!=e&&o[n].queue!==e||(o[n].anim.stop(r),t=!1,o.splice(n,1));(t||!r)&&b.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=b._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=b.timers,a=r?r.length:0;for(n.finish=!0,b.queue(this,e,[]),i&&i.cur&&i.cur.finish&&i.cur.finish.call(this),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function ir(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=Zt[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}b.each({slideDown:ir("show"),slideUp:ir("hide"),slideToggle:ir("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){b.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),b.speed=function(e,t,n){var r=e&&"object"==typeof e?b.extend({},e):{complete:n||!n&&t||b.isFunction(e)&&e,duration:e,easing:n&&t||t&&!b.isFunction(t)&&t};return r.duration=b.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in b.fx.speeds?b.fx.speeds[r.duration]:b.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){b.isFunction(r.old)&&r.old.call(this),r.queue&&b.dequeue(this,r.queue)},r},b.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},b.timers=[],b.fx=rr.prototype.init,b.fx.tick=function(){var e,n=b.timers,r=0;for(Xn=b.now();n.length>r;r++)e=n[r],e()||n[r]!==e||n.splice(r--,1);n.length||b.fx.stop(),Xn=t},b.fx.timer=function(e){e()&&b.timers.push(e)&&b.fx.start()},b.fx.interval=13,b.fx.start=function(){Un||(Un=setInterval(b.fx.tick,b.fx.interval))},b.fx.stop=function(){clearInterval(Un),Un=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fx.step={},b.expr&&b.expr.filters&&(b.expr.filters.animated=function(e){return b.grep(b.timers,function(t){return e===t.elem}).length}),b.fn.offset=function(e){if(arguments.length)return e===t?this:this.each(function(t){b.offset.setOffset(this,e,t)});var n,r,o={top:0,left:0},a=this[0],s=a&&a.ownerDocument;if(s)return n=s.documentElement,b.contains(n,a)?(typeof a.getBoundingClientRect!==i&&(o=a.getBoundingClientRect()),r=or(s),{top:o.top+(r.pageYOffset||n.scrollTop)-(n.clientTop||0),left:o.left+(r.pageXOffset||n.scrollLeft)-(n.clientLeft||0)}):o},b.offset={setOffset:function(e,t,n){var r=b.css(e,"position");"static"===r&&(e.style.position="relative");var i=b(e),o=i.offset(),a=b.css(e,"top"),s=b.css(e,"left"),u=("absolute"===r||"fixed"===r)&&b.inArray("auto",[a,s])>-1,l={},c={},p,f;u?(c=i.position(),p=c.top,f=c.left):(p=parseFloat(a)||0,f=parseFloat(s)||0),b.isFunction(t)&&(t=t.call(e,n,o)),null!=t.top&&(l.top=t.top-o.top+p),null!=t.left&&(l.left=t.left-o.left+f),"using"in t?t.using.call(e,l):i.css(l)}},b.fn.extend({position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===b.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),b.nodeName(e[0],"html")||(n=e.offset()),n.top+=b.css(e[0],"borderTopWidth",!0),n.left+=b.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-b.css(r,"marginTop",!0),left:t.left-n.left-b.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||o.documentElement;while(e&&!b.nodeName(e,"html")&&"static"===b.css(e,"position"))e=e.offsetParent;return e||o.documentElement})}}),b.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var r=/Y/.test(n);b.fn[e]=function(i){return b.access(this,function(e,i,o){var a=or(e);return o===t?a?n in a?a[n]:a.document.documentElement[i]:e[i]:(a?a.scrollTo(r?b(a).scrollLeft():o,r?o:b(a).scrollTop()):e[i]=o,t)},e,i,arguments.length,null)}});function or(e){return b.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}b.each({Height:"height",Width:"width"},function(e,n){b.each({padding:"inner"+e,content:n,"":"outer"+e},function(r,i){b.fn[i]=function(i,o){var a=arguments.length&&(r||"boolean"!=typeof i),s=r||(i===!0||o===!0?"margin":"border");return b.access(this,function(n,r,i){var o;return b.isWindow(n)?n.document.documentElement["client"+e]:9===n.nodeType?(o=n.documentElement,Math.max(n.body["scroll"+e],o["scroll"+e],n.body["offset"+e],o["offset"+e],o["client"+e])):i===t?b.css(n,r,s):b.style(n,r,i,s)},n,a?i:t,a,null)}})}),e.jQuery=e.$=b,"function"==typeof define&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return b})})(window);

; browserify_shim__define__module__export__(typeof $ != "undefined" ? $ : window.$);

}).call(global, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],"+EoJh8":[function(require,module,exports){
(function (global){
(function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
/*
 * Swiper 2.1 - Mobile Touch Slider
 * http://www.idangero.us/sliders/swiper/
 *
 * Copyright 2012-2013, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under GPL & MIT
 *
 * Updated on: August 22, 2013
*/
var Swiper=function(f,b){function g(a){return document.querySelectorAll?document.querySelectorAll(a):jQuery(a)}function h(){var c=y-l;b.freeMode&&(c=y-l);b.slidesPerView>a.slides.length&&(c=0);0>c&&(c=0);return c}function n(){function c(c){var d=new Image;d.onload=function(){a.imagesLoaded++;if(a.imagesLoaded==a.imagesToLoad.length&&(a.reInit(),b.onImagesReady))b.onImagesReady(a)};d.src=c}a.browser.ie10?(a.h.addEventListener(a.wrapper,a.touchEvents.touchStart,z,!1),a.h.addEventListener(document,a.touchEvents.touchMove,
A,!1),a.h.addEventListener(document,a.touchEvents.touchEnd,B,!1)):(a.support.touch&&(a.h.addEventListener(a.wrapper,"touchstart",z,!1),a.h.addEventListener(a.wrapper,"touchmove",A,!1),a.h.addEventListener(a.wrapper,"touchend",B,!1)),b.simulateTouch&&(a.h.addEventListener(a.wrapper,"mousedown",z,!1),a.h.addEventListener(document,"mousemove",A,!1),a.h.addEventListener(document,"mouseup",B,!1)));b.autoResize&&a.h.addEventListener(window,"resize",a.resizeFix,!1);t();a._wheelEvent=!1;if(b.mousewheelControl){void 0!==
document.onmousewheel&&(a._wheelEvent="mousewheel");try{WheelEvent("wheel"),a._wheelEvent="wheel"}catch(d){}a._wheelEvent||(a._wheelEvent="DOMMouseScroll");a._wheelEvent&&a.h.addEventListener(a.container,a._wheelEvent,N,!1)}b.keyboardControl&&a.h.addEventListener(document,"keydown",O,!1);if(b.updateOnImagesReady){document.querySelectorAll?a.imagesToLoad=a.container.querySelectorAll("img"):window.jQuery&&(a.imagesToLoad=g(a.container).find("img"));for(var e=0;e<a.imagesToLoad.length;e++)c(a.imagesToLoad[e].getAttribute("src"))}}
function t(){if(b.preventLinks){var c=[];document.querySelectorAll?c=a.container.querySelectorAll("a"):window.jQuery&&(c=g(a.container).find("a"));for(var d=0;d<c.length;d++)a.h.addEventListener(c[d],"click",P,!1)}if(b.releaseFormElements)for(c=document.querySelectorAll?a.container.querySelectorAll("input, textarea, select"):g(a.container).find("input, textarea, select"),d=0;d<c.length;d++)a.h.addEventListener(c[d],a.touchEvents.touchStart,Q,!0);if(b.onSlideClick)for(d=0;d<a.slides.length;d++)a.h.addEventListener(a.slides[d],
"click",R,!1);if(b.onSlideTouch)for(d=0;d<a.slides.length;d++)a.h.addEventListener(a.slides[d],a.touchEvents.touchStart,S,!1)}function v(){if(b.onSlideClick)for(var c=0;c<a.slides.length;c++)a.h.removeEventListener(a.slides[c],"click",R,!1);if(b.onSlideTouch)for(c=0;c<a.slides.length;c++)a.h.removeEventListener(a.slides[c],a.touchEvents.touchStart,S,!1);if(b.releaseFormElements)for(var d=document.querySelectorAll?a.container.querySelectorAll("input, textarea, select"):g(a.container).find("input, textarea, select"),
c=0;c<d.length;c++)a.h.removeEventListener(d[c],a.touchEvents.touchStart,Q,!0);if(b.preventLinks)for(d=[],document.querySelectorAll?d=a.container.querySelectorAll("a"):window.jQuery&&(d=g(a.container).find("a")),c=0;c<d.length;c++)a.h.removeEventListener(d[c],"click",P,!1)}function O(c){var b=c.keyCode||c.charCode;if(37==b||39==b||38==b||40==b){for(var e=!1,f=a.h.getOffset(a.container),h=a.h.windowScroll().left,g=a.h.windowScroll().top,m=a.h.windowWidth(),l=a.h.windowHeight(),f=[[f.left,f.top],[f.left+
a.width,f.top],[f.left,f.top+a.height],[f.left+a.width,f.top+a.height]],p=0;p<f.length;p++){var r=f[p];r[0]>=h&&(r[0]<=h+m&&r[1]>=g&&r[1]<=g+l)&&(e=!0)}if(!e)return}if(k){if(37==b||39==b)c.preventDefault?c.preventDefault():c.returnValue=!1;39==b&&a.swipeNext();37==b&&a.swipePrev()}else{if(38==b||40==b)c.preventDefault?c.preventDefault():c.returnValue=!1;40==b&&a.swipeNext();38==b&&a.swipePrev()}}function N(c){var d=a._wheelEvent,e;c.detail?e=-c.detail:"mousewheel"==d?e=c.wheelDelta:"DOMMouseScroll"==
d?e=-c.detail:"wheel"==d&&(e=Math.abs(c.deltaX)>Math.abs(c.deltaY)?-c.deltaX:-c.deltaY);b.freeMode?(k?a.getWrapperTranslate("x"):a.getWrapperTranslate("y"),k?(d=a.getWrapperTranslate("x")+e,e=a.getWrapperTranslate("y"),0<d&&(d=0),d<-h()&&(d=-h())):(d=a.getWrapperTranslate("x"),e=a.getWrapperTranslate("y")+e,0<e&&(e=0),e<-h()&&(e=-h())),a.setWrapperTransition(0),a.setWrapperTranslate(d,e,0),k?a.updateActiveSlide(d):a.updateActiveSlide(e)):0>e?a.swipeNext():a.swipePrev();b.autoplay&&a.stopAutoplay();
c.preventDefault?c.preventDefault():c.returnValue=!1;return!1}function T(a){for(var d=!1;!d;)-1<a.className.indexOf(b.slideClass)&&(d=a),a=a.parentElement;return d}function R(c){a.allowSlideClick&&(c.target?(a.clickedSlide=this,a.clickedSlideIndex=a.slides.indexOf(this)):(a.clickedSlide=T(c.srcElement),a.clickedSlideIndex=a.slides.indexOf(a.clickedSlide)),b.onSlideClick(a))}function S(c){a.clickedSlide=c.target?this:T(c.srcElement);a.clickedSlideIndex=a.slides.indexOf(a.clickedSlide);b.onSlideTouch(a)}
function P(b){if(!a.allowLinks)return b.preventDefault?b.preventDefault():b.returnValue=!1,!1}function Q(a){a.stopPropagation?a.stopPropagation():a.returnValue=!1;return!1}function z(c){b.preventLinks&&(a.allowLinks=!0);if(a.isTouched||b.onlyExternal)return!1;var d;if(d=b.noSwiping)if(d=c.target||c.srcElement){d=c.target||c.srcElement;var e=!1;do-1<d.className.indexOf(b.noSwipingClass)&&(e=!0),d=d.parentElement;while(!e&&d.parentElement&&-1==d.className.indexOf(b.wrapperClass));!e&&(-1<d.className.indexOf(b.wrapperClass)&&
-1<d.className.indexOf(b.noSwipingClass))&&(e=!0);d=e}if(d)return!1;G=!1;a.isTouched=!0;u="touchstart"==c.type;if(!u||1==c.targetTouches.length){b.loop&&a.fixLoop();a.callPlugins("onTouchStartBegin");u||(c.preventDefault?c.preventDefault():c.returnValue=!1);d=u?c.targetTouches[0].pageX:c.pageX||c.clientX;c=u?c.targetTouches[0].pageY:c.pageY||c.clientY;a.touches.startX=a.touches.currentX=d;a.touches.startY=a.touches.currentY=c;a.touches.start=a.touches.current=k?d:c;a.setWrapperTransition(0);a.positions.start=
a.positions.current=k?a.getWrapperTranslate("x"):a.getWrapperTranslate("y");k?a.setWrapperTranslate(a.positions.start,0,0):a.setWrapperTranslate(0,a.positions.start,0);a.times.start=(new Date).getTime();x=void 0;0<b.moveStartThreshold&&(M=!1);if(b.onTouchStart)b.onTouchStart(a);a.callPlugins("onTouchStartEnd")}}function A(c){if(a.isTouched&&!b.onlyExternal&&(!u||"mousemove"!=c.type)){var d=u?c.targetTouches[0].pageX:c.pageX||c.clientX,e=u?c.targetTouches[0].pageY:c.pageY||c.clientY;"undefined"===
typeof x&&k&&(x=!!(x||Math.abs(e-a.touches.startY)>Math.abs(d-a.touches.startX)));"undefined"!==typeof x||k||(x=!!(x||Math.abs(e-a.touches.startY)<Math.abs(d-a.touches.startX)));if(x)a.isTouched=!1;else if(c.assignedToSwiper)a.isTouched=!1;else if(c.assignedToSwiper=!0,a.isMoved=!0,b.preventLinks&&(a.allowLinks=!1),b.onSlideClick&&(a.allowSlideClick=!1),b.autoplay&&a.stopAutoplay(),!u||1==c.touches.length){a.callPlugins("onTouchMoveStart");c.preventDefault?c.preventDefault():c.returnValue=!1;a.touches.current=
k?d:e;a.positions.current=(a.touches.current-a.touches.start)*b.touchRatio+a.positions.start;if(0<a.positions.current&&b.onResistanceBefore)b.onResistanceBefore(a,a.positions.current);if(a.positions.current<-h()&&b.onResistanceAfter)b.onResistanceAfter(a,Math.abs(a.positions.current+h()));b.resistance&&"100%"!=b.resistance&&(0<a.positions.current&&(c=1-a.positions.current/l/2,a.positions.current=0.5>c?l/2:a.positions.current*c),a.positions.current<-h()&&(d=(a.touches.current-a.touches.start)*b.touchRatio+
(h()+a.positions.start),c=(l+d)/l,d=a.positions.current-d*(1-c)/2,e=-h()-l/2,a.positions.current=d<e||0>=c?e:d));b.resistance&&"100%"==b.resistance&&(0<a.positions.current&&(!b.freeMode||b.freeModeFluid)&&(a.positions.current=0),a.positions.current<-h()&&(!b.freeMode||b.freeModeFluid)&&(a.positions.current=-h()));if(b.followFinger){b.moveStartThreshold?Math.abs(a.touches.current-a.touches.start)>b.moveStartThreshold||M?(M=!0,k?a.setWrapperTranslate(a.positions.current,0,0):a.setWrapperTranslate(0,
a.positions.current,0)):a.positions.current=a.positions.start:k?a.setWrapperTranslate(a.positions.current,0,0):a.setWrapperTranslate(0,a.positions.current,0);(b.freeMode||b.watchActiveIndex)&&a.updateActiveSlide(a.positions.current);b.grabCursor&&(a.container.style.cursor="move",a.container.style.cursor="grabbing",a.container.style.cursor="-moz-grabbin",a.container.style.cursor="-webkit-grabbing");D||(D=a.touches.current);H||(H=(new Date).getTime());a.velocity=(a.touches.current-D)/((new Date).getTime()-
H)/2;2>Math.abs(a.touches.current-D)&&(a.velocity=0);D=a.touches.current;H=(new Date).getTime();a.callPlugins("onTouchMoveEnd");if(b.onTouchMove)b.onTouchMove(a);return!1}}}}function B(c){x&&a.swipeReset();if(!b.onlyExternal&&a.isTouched){a.isTouched=!1;b.grabCursor&&(a.container.style.cursor="move",a.container.style.cursor="grab",a.container.style.cursor="-moz-grab",a.container.style.cursor="-webkit-grab");a.positions.current||0===a.positions.current||(a.positions.current=a.positions.start);b.followFinger&&
(k?a.setWrapperTranslate(a.positions.current,0,0):a.setWrapperTranslate(0,a.positions.current,0));a.times.end=(new Date).getTime();a.touches.diff=a.touches.current-a.touches.start;a.touches.abs=Math.abs(a.touches.diff);a.positions.diff=a.positions.current-a.positions.start;a.positions.abs=Math.abs(a.positions.diff);var d=a.positions.diff,e=a.positions.abs;c=a.times.end-a.times.start;5>e&&(300>c&&!1==a.allowLinks)&&(b.freeMode||0==e||a.swipeReset(),b.preventLinks&&(a.allowLinks=!0),b.onSlideClick&&
(a.allowSlideClick=!0));setTimeout(function(){b.preventLinks&&(a.allowLinks=!0);b.onSlideClick&&(a.allowSlideClick=!0)},100);if(a.isMoved){a.isMoved=!1;var f=h();if(0<a.positions.current)a.swipeReset();else if(a.positions.current<-f)a.swipeReset();else if(b.freeMode){if(b.freeModeFluid){var e=1E3*b.momentumRatio,d=a.positions.current+a.velocity*e,g=!1,F,m=20*Math.abs(a.velocity)*b.momentumBounceRatio;d<-f&&(b.momentumBounce&&a.support.transitions?(d+f<-m&&(d=-f-m),F=-f,G=g=!0):d=-f);0<d&&(b.momentumBounce&&
a.support.transitions?(d>m&&(d=m),F=0,G=g=!0):d=0);0!=a.velocity&&(e=Math.abs((d-a.positions.current)/a.velocity));k?a.setWrapperTranslate(d,0,0):a.setWrapperTranslate(0,d,0);a.setWrapperTransition(e);b.momentumBounce&&g&&a.wrapperTransitionEnd(function(){if(G){if(b.onMomentumBounce)b.onMomentumBounce(a);k?a.setWrapperTranslate(F,0,0):a.setWrapperTranslate(0,F,0);a.setWrapperTransition(300)}});a.updateActiveSlide(d)}(!b.freeModeFluid||300<=c)&&a.updateActiveSlide(a.positions.current)}else{E=0>d?"toNext":
"toPrev";"toNext"==E&&300>=c&&(30>e||!b.shortSwipes?a.swipeReset():a.swipeNext(!0));"toPrev"==E&&300>=c&&(30>e||!b.shortSwipes?a.swipeReset():a.swipePrev(!0));f=0;if("auto"==b.slidesPerView){for(var d=Math.abs(k?a.getWrapperTranslate("x"):a.getWrapperTranslate("y")),q=g=0;q<a.slides.length;q++)if(m=k?a.slides[q].getWidth(!0):a.slides[q].getHeight(!0),g+=m,g>d){f=m;break}f>l&&(f=l)}else f=p*b.slidesPerView;"toNext"==E&&300<c&&(e>=0.5*f?a.swipeNext(!0):a.swipeReset());"toPrev"==E&&300<c&&(e>=0.5*f?
a.swipePrev(!0):a.swipeReset())}if(b.onTouchEnd)b.onTouchEnd(a);a.callPlugins("onTouchEnd")}else{a.isMoved=!1;if(b.onTouchEnd)b.onTouchEnd(a);a.callPlugins("onTouchEnd");a.swipeReset()}}}function I(c,d,e){function f(){g+=m;if(p="toNext"==l?g>c:g<c)k?a.setWrapperTranslate(Math.round(g),0):a.setWrapperTranslate(0,Math.round(g)),a._DOMAnimating=!0,window.setTimeout(function(){f()},1E3/60);else{if(b.onSlideChangeEnd)b.onSlideChangeEnd(a);k?a.setWrapperTranslate(c,0):a.setWrapperTranslate(0,c);a._DOMAnimating=
!1}}if(a.support.transitions||!b.DOMAnimation){k?a.setWrapperTranslate(c,0,0):a.setWrapperTranslate(0,c,0);var h="to"==d&&0<=e.speed?e.speed:b.speed;a.setWrapperTransition(h)}else{var g=k?a.getWrapperTranslate("x"):a.getWrapperTranslate("y"),h="to"==d&&0<=e.speed?e.speed:b.speed,m=Math.ceil((c-g)/h*(1E3/60)),l=g>c?"toNext":"toPrev",p="toNext"==l?g>c:g<c;if(a._DOMAnimating)return;f()}a.updateActiveSlide(c);if(b.onSlideNext&&"next"==d)b.onSlideNext(a,c);if(b.onSlidePrev&&"prev"==d)b.onSlidePrev(a,c);
if(b.onSlideReset&&"reset"==d)b.onSlideReset(a,c);("next"==d||"prev"==d||"to"==d&&!0==e.runCallbacks)&&W()}function W(){a.callPlugins("onSlideChangeStart");if(b.onSlideChangeStart)if(b.queueStartCallbacks&&a.support.transitions){if(a._queueStartCallbacks)return;a._queueStartCallbacks=!0;b.onSlideChangeStart(a);a.wrapperTransitionEnd(function(){a._queueStartCallbacks=!1})}else b.onSlideChangeStart(a);b.onSlideChangeEnd&&(a.support.transitions?b.queueEndCallbacks?a._queueEndCallbacks||(a._queueEndCallbacks=
!0,a.wrapperTransitionEnd(b.onSlideChangeEnd)):a.wrapperTransitionEnd(b.onSlideChangeEnd):b.DOMAnimation||setTimeout(function(){b.onSlideChangeEnd(a)},10))}function U(){for(var b=a.paginationButtons,d=0;d<b.length;d++)a.h.removeEventListener(b[d],"click",V,!1)}function V(b){var d;b=b.target||b.srcElement;for(var e=a.paginationButtons,f=0;f<e.length;f++)b===e[f]&&(d=f);a.swipeTo(d)}if(document.body.__defineGetter__&&HTMLElement){var s=HTMLElement.prototype;s.__defineGetter__&&s.__defineGetter__("outerHTML",
function(){return(new XMLSerializer).serializeToString(this)})}window.getComputedStyle||(window.getComputedStyle=function(a,b){this.el=a;this.getPropertyValue=function(b){var d=/(\-([a-z]){1})/g;"float"===b&&(b="styleFloat");d.test(b)&&(b=b.replace(d,function(a,b,c){return c.toUpperCase()}));return a.currentStyle[b]?a.currentStyle[b]:null};return this});Array.prototype.indexOf||(Array.prototype.indexOf=function(a,b){for(var e=b||0,f=this.length;e<f;e++)if(this[e]===a)return e;return-1});if((document.querySelectorAll||
window.jQuery)&&"undefined"!==typeof f&&(f.nodeType||0!==g(f).length)){var a=this;a.touches={start:0,startX:0,startY:0,current:0,currentX:0,currentY:0,diff:0,abs:0};a.positions={start:0,abs:0,diff:0,current:0};a.times={start:0,end:0};a.id=(new Date).getTime();a.container=f.nodeType?f:g(f)[0];a.isTouched=!1;a.isMoved=!1;a.activeIndex=0;a.activeLoaderIndex=0;a.activeLoopIndex=0;a.previousIndex=null;a.velocity=0;a.snapGrid=[];a.slidesGrid=[];a.imagesToLoad=[];a.imagesLoaded=0;a.wrapperLeft=0;a.wrapperRight=
0;a.wrapperTop=0;a.wrapperBottom=0;var J,p,y,E,x,l,s={mode:"horizontal",touchRatio:1,speed:300,freeMode:!1,freeModeFluid:!1,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,slidesPerView:1,slidesPerGroup:1,simulateTouch:!0,followFinger:!0,shortSwipes:!0,moveStartThreshold:!1,autoplay:!1,onlyExternal:!1,createPagination:!0,pagination:!1,paginationElement:"span",paginationClickable:!1,paginationAsRange:!0,resistance:!0,scrollContainer:!1,preventLinks:!0,noSwiping:!1,noSwipingClass:"swiper-no-swiping",
initialSlide:0,keyboardControl:!1,mousewheelControl:!1,mousewheelDebounce:600,useCSS3Transforms:!0,loop:!1,loopAdditionalSlides:0,calculateHeight:!1,updateOnImagesReady:!0,releaseFormElements:!0,watchActiveIndex:!1,visibilityFullFit:!1,offsetPxBefore:0,offsetPxAfter:0,offsetSlidesBefore:0,offsetSlidesAfter:0,centeredSlides:!1,queueStartCallbacks:!1,queueEndCallbacks:!1,autoResize:!0,resizeReInit:!1,DOMAnimation:!0,loader:{slides:[],slidesHTMLType:"inner",surroundGroups:1,logic:"reload",loadAllSlides:!1},
slideElement:"div",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",wrapperClass:"swiper-wrapper",paginationElementClass:"swiper-pagination-switch",paginationActiveClass:"swiper-active-switch",paginationVisibleClass:"swiper-visible-switch"};b=b||{};for(var q in s)if(q in b&&"object"===typeof b[q])for(var C in s[q])C in b[q]||(b[q][C]=s[q][C]);else q in b||(b[q]=s[q]);a.params=b;b.scrollContainer&&(b.freeMode=!0,b.freeModeFluid=!0);b.loop&&(b.resistance=
"100%");var k="horizontal"===b.mode;a.touchEvents={touchStart:a.support.touch||!b.simulateTouch?"touchstart":a.browser.ie10?"MSPointerDown":"mousedown",touchMove:a.support.touch||!b.simulateTouch?"touchmove":a.browser.ie10?"MSPointerMove":"mousemove",touchEnd:a.support.touch||!b.simulateTouch?"touchend":a.browser.ie10?"MSPointerUp":"mouseup"};for(q=a.container.childNodes.length-1;0<=q;q--)if(a.container.childNodes[q].className)for(C=a.container.childNodes[q].className.split(" "),s=0;s<C.length;s++)C[s]===
b.wrapperClass&&(J=a.container.childNodes[q]);a.wrapper=J;a._extendSwiperSlide=function(c){c.append=function(){b.loop?(c.insertAfter(a.slides.length-a.loopedSlides),a.removeLoopedSlides(),a.calcSlides(),a.createLoop()):a.wrapper.appendChild(c);a.reInit();return c};c.prepend=function(){b.loop?(a.wrapper.insertBefore(c,a.slides[a.loopedSlides]),a.removeLoopedSlides(),a.calcSlides(),a.createLoop()):a.wrapper.insertBefore(c,a.wrapper.firstChild);a.reInit();return c};c.insertAfter=function(d){if("undefined"===
typeof d)return!1;b.loop?(d=a.slides[d+1+a.loopedSlides],a.wrapper.insertBefore(c,d),a.removeLoopedSlides(),a.calcSlides(),a.createLoop()):(d=a.slides[d+1],a.wrapper.insertBefore(c,d));a.reInit();return c};c.clone=function(){return a._extendSwiperSlide(c.cloneNode(!0))};c.remove=function(){a.wrapper.removeChild(c);a.reInit()};c.html=function(a){if("undefined"===typeof a)return c.innerHTML;c.innerHTML=a;return c};c.index=function(){for(var b,e=a.slides.length-1;0<=e;e--)c===a.slides[e]&&(b=e);return b};
c.isActive=function(){return c.index()===a.activeIndex?!0:!1};c.swiperSlideDataStorage||(c.swiperSlideDataStorage={});c.getData=function(a){return c.swiperSlideDataStorage[a]};c.setData=function(a,b){c.swiperSlideDataStorage[a]=b;return c};c.data=function(a,b){return b?(c.setAttribute("data-"+a,b),c):c.getAttribute("data-"+a)};c.getWidth=function(b){return a.h.getWidth(c,b)};c.getHeight=function(b){return a.h.getHeight(c,b)};c.getOffset=function(){return a.h.getOffset(c)};return c};a.calcSlides=function(c){var d=
a.slides?a.slides.length:!1;a.slides=[];a.displaySlides=[];for(var e=0;e<a.wrapper.childNodes.length;e++)if(a.wrapper.childNodes[e].className)for(var f=a.wrapper.childNodes[e].className.split(" "),g=0;g<f.length;g++)f[g]===b.slideClass&&a.slides.push(a.wrapper.childNodes[e]);for(e=a.slides.length-1;0<=e;e--)a._extendSwiperSlide(a.slides[e]);d&&(d!==a.slides.length||c)&&(v(),t(),a.updateActiveSlide(),b.createPagination&&a.params.pagination&&a.createPagination(),a.callPlugins("numberOfSlidesChanged"))};
a.createSlide=function(c,d,e){d=d||a.params.slideClass;e=e||b.slideElement;e=document.createElement(e);e.innerHTML=c||"";e.className=d;return a._extendSwiperSlide(e)};a.appendSlide=function(b,d,e){if(b)return b.nodeType?a._extendSwiperSlide(b).append():a.createSlide(b,d,e).append()};a.prependSlide=function(b,d,e){if(b)return b.nodeType?a._extendSwiperSlide(b).prepend():a.createSlide(b,d,e).prepend()};a.insertSlideAfter=function(b,d,e,f){return"undefined"===typeof b?!1:d.nodeType?a._extendSwiperSlide(d).insertAfter(b):
a.createSlide(d,e,f).insertAfter(b)};a.removeSlide=function(c){if(a.slides[c]){if(b.loop){if(!a.slides[c+a.loopedSlides])return!1;a.slides[c+a.loopedSlides].remove();a.removeLoopedSlides();a.calcSlides();a.createLoop()}else a.slides[c].remove();return!0}return!1};a.removeLastSlide=function(){return 0<a.slides.length?(b.loop?(a.slides[a.slides.length-1-a.loopedSlides].remove(),a.removeLoopedSlides(),a.calcSlides(),a.createLoop()):a.slides[a.slides.length-1].remove(),!0):!1};a.removeAllSlides=function(){for(var b=
a.slides.length-1;0<=b;b--)a.slides[b].remove()};a.getSlide=function(b){return a.slides[b]};a.getLastSlide=function(){return a.slides[a.slides.length-1]};a.getFirstSlide=function(){return a.slides[0]};a.activeSlide=function(){return a.slides[a.activeIndex]};var K=[],L;for(L in a.plugins)b[L]&&(q=a.plugins[L](a,b[L]))&&K.push(q);a.callPlugins=function(a,b){b||(b={});for(var e=0;e<K.length;e++)if(a in K[e])K[e][a](b)};a.browser.ie10&&!b.onlyExternal&&(k?a.wrapper.classList.add("swiper-wp8-horizontal"):
a.wrapper.classList.add("swiper-wp8-vertical"));b.freeMode&&(a.container.className+=" swiper-free-mode");a.initialized=!1;a.init=function(c,d){var e=a.h.getWidth(a.container),f=a.h.getHeight(a.container);if(e!==a.width||f!==a.height||c){a.width=e;a.height=f;l=k?e:f;e=a.wrapper;c&&a.calcSlides(d);if("auto"===b.slidesPerView){var g=0,h=0;0<b.slidesOffset&&(e.style.paddingLeft="",e.style.paddingRight="",e.style.paddingTop="",e.style.paddingBottom="");e.style.width="";e.style.height="";0<b.offsetPxBefore&&
(k?a.wrapperLeft=b.offsetPxBefore:a.wrapperTop=b.offsetPxBefore);0<b.offsetPxAfter&&(k?a.wrapperRight=b.offsetPxAfter:a.wrapperBottom=b.offsetPxAfter);b.centeredSlides&&(k?(a.wrapperLeft=(l-this.slides[0].getWidth(!0))/2,a.wrapperRight=(l-a.slides[a.slides.length-1].getWidth(!0))/2):(a.wrapperTop=(l-a.slides[0].getHeight(!0))/2,a.wrapperBottom=(l-a.slides[a.slides.length-1].getHeight(!0))/2));k?(0<=a.wrapperLeft&&(e.style.paddingLeft=a.wrapperLeft+"px"),0<=a.wrapperRight&&(e.style.paddingRight=a.wrapperRight+
"px")):(0<=a.wrapperTop&&(e.style.paddingTop=a.wrapperTop+"px"),0<=a.wrapperBottom&&(e.style.paddingBottom=a.wrapperBottom+"px"));var m=0,q=0;a.snapGrid=[];a.slidesGrid=[];for(var n=0,r=0;r<a.slides.length;r++){var f=a.slides[r].getWidth(!0),s=a.slides[r].getHeight(!0);b.calculateHeight&&(n=Math.max(n,s));var t=k?f:s;if(b.centeredSlides){var u=r===a.slides.length-1?0:a.slides[r+1].getWidth(!0),w=r===a.slides.length-1?0:a.slides[r+1].getHeight(!0),u=k?u:w;if(t>l){for(w=0;w<=Math.floor(t/(l+a.wrapperLeft));w++)0===
w?a.snapGrid.push(m+a.wrapperLeft):a.snapGrid.push(m+a.wrapperLeft+l*w);a.slidesGrid.push(m+a.wrapperLeft)}else a.snapGrid.push(q),a.slidesGrid.push(q);q+=t/2+u/2}else{if(t>l)for(w=0;w<=Math.floor(t/l);w++)a.snapGrid.push(m+l*w);else a.snapGrid.push(m);a.slidesGrid.push(m)}m+=t;g+=f;h+=s}b.calculateHeight&&(a.height=n);k?(y=g+a.wrapperRight+a.wrapperLeft,e.style.width=g+"px",e.style.height=a.height+"px"):(y=h+a.wrapperTop+a.wrapperBottom,e.style.width=a.width+"px",e.style.height=h+"px")}else if(b.scrollContainer)e.style.width=
"",e.style.height="",n=a.slides[0].getWidth(!0),g=a.slides[0].getHeight(!0),y=k?n:g,e.style.width=n+"px",e.style.height=g+"px",p=k?n:g;else{if(b.calculateHeight){g=n=0;k||(a.container.style.height="");e.style.height="";for(r=0;r<a.slides.length;r++)a.slides[r].style.height="",n=Math.max(a.slides[r].getHeight(!0),n),k||(g+=a.slides[r].getHeight(!0));s=n;a.height=s;k?g=s:(l=s,a.container.style.height=l+"px")}else s=k?a.height:a.height/b.slidesPerView,g=k?a.height:a.slides.length*s;f=k?a.width/b.slidesPerView:
a.width;n=k?a.slides.length*f:a.width;p=k?f:s;0<b.offsetSlidesBefore&&(k?a.wrapperLeft=p*b.offsetSlidesBefore:a.wrapperTop=p*b.offsetSlidesBefore);0<b.offsetSlidesAfter&&(k?a.wrapperRight=p*b.offsetSlidesAfter:a.wrapperBottom=p*b.offsetSlidesAfter);0<b.offsetPxBefore&&(k?a.wrapperLeft=b.offsetPxBefore:a.wrapperTop=b.offsetPxBefore);0<b.offsetPxAfter&&(k?a.wrapperRight=b.offsetPxAfter:a.wrapperBottom=b.offsetPxAfter);b.centeredSlides&&(k?(a.wrapperLeft=(l-p)/2,a.wrapperRight=(l-p)/2):(a.wrapperTop=
(l-p)/2,a.wrapperBottom=(l-p)/2));k?(0<a.wrapperLeft&&(e.style.paddingLeft=a.wrapperLeft+"px"),0<a.wrapperRight&&(e.style.paddingRight=a.wrapperRight+"px")):(0<a.wrapperTop&&(e.style.paddingTop=a.wrapperTop+"px"),0<a.wrapperBottom&&(e.style.paddingBottom=a.wrapperBottom+"px"));y=k?n+a.wrapperRight+a.wrapperLeft:g+a.wrapperTop+a.wrapperBottom;e.style.width=n+"px";e.style.height=g+"px";m=0;a.snapGrid=[];a.slidesGrid=[];for(r=0;r<a.slides.length;r++)a.snapGrid.push(m),a.slidesGrid.push(m),m+=p,a.slides[r].style.width=
f+"px",a.slides[r].style.height=s+"px"}if(a.initialized){if(a.callPlugins("onInit"),b.onFirstInit)b.onInit(a)}else if(a.callPlugins("onFirstInit"),b.onFirstInit)b.onFirstInit(a);a.initialized=!0}};a.reInit=function(b){a.init(!0,b)};a.resizeFix=function(c){a.callPlugins("beforeResizeFix");a.init(b.resizeReInit||c);if(!b.freeMode)b.loop?a.swipeTo(a.activeLoopIndex,0,!1):a.swipeTo(a.activeIndex,0,!1);else if((k?a.getWrapperTranslate("x"):a.getWrapperTranslate("y"))<-h()){c=k?-h():0;var d=k?0:-h();a.setWrapperTransition(0);
a.setWrapperTranslate(c,d,0)}a.callPlugins("afterResizeFix")};a.destroy=function(c){a.browser.ie10?(a.h.removeEventListener(a.wrapper,a.touchEvents.touchStart,z,!1),a.h.removeEventListener(document,a.touchEvents.touchMove,A,!1),a.h.removeEventListener(document,a.touchEvents.touchEnd,B,!1)):(a.support.touch&&(a.h.removeEventListener(a.wrapper,"touchstart",z,!1),a.h.removeEventListener(a.wrapper,"touchmove",A,!1),a.h.removeEventListener(a.wrapper,"touchend",B,!1)),b.simulateTouch&&(a.h.removeEventListener(a.wrapper,
"mousedown",z,!1),a.h.removeEventListener(document,"mousemove",A,!1),a.h.removeEventListener(document,"mouseup",B,!1)));b.autoResize&&a.h.removeEventListener(window,"resize",a.resizeFix,!1);v();b.paginationClickable&&U();b.mousewheelControl&&a._wheelEvent&&a.h.removeEventListener(a.container,a._wheelEvent,N,!1);b.keyboardControl&&a.h.removeEventListener(document,"keydown",O,!1);b.autoplay&&a.stopAutoplay();a.callPlugins("onDestroy");a=null};b.grabCursor&&(a.container.style.cursor="move",a.container.style.cursor=
"grab",a.container.style.cursor="-moz-grab",a.container.style.cursor="-webkit-grab");a.allowSlideClick=!0;a.allowLinks=!0;var u=!1,M,G=!0,D,H;a.swipeNext=function(c){!c&&b.loop&&a.fixLoop();a.callPlugins("onSwipeNext");var d=c=k?a.getWrapperTranslate("x"):a.getWrapperTranslate("y");if("auto"==b.slidesPerView)for(var e=0;e<a.snapGrid.length;e++){if(-c>=a.snapGrid[e]&&-c<a.snapGrid[e+1]){d=-a.snapGrid[e+1];break}}else d=p*b.slidesPerGroup,d=-(Math.floor(Math.abs(c)/Math.floor(d))*d+d);d<-h()&&(d=-h());
if(d==c)return!1;I(d,"next");return!0};a.swipePrev=function(c){!c&&b.loop&&a.fixLoop();!c&&b.autoplay&&a.stopAutoplay();a.callPlugins("onSwipePrev");c=Math.ceil(k?a.getWrapperTranslate("x"):a.getWrapperTranslate("y"));var d;if("auto"==b.slidesPerView){d=0;for(var e=1;e<a.snapGrid.length;e++){if(-c==a.snapGrid[e]){d=-a.snapGrid[e-1];break}if(-c>a.snapGrid[e]&&-c<a.snapGrid[e+1]){d=-a.snapGrid[e];break}}}else d=p*b.slidesPerGroup,d*=-(Math.ceil(-c/d)-1);0<d&&(d=0);if(d==c)return!1;I(d,"prev");return!0};
a.swipeReset=function(){a.callPlugins("onSwipeReset");var c=k?a.getWrapperTranslate("x"):a.getWrapperTranslate("y"),d=p*b.slidesPerGroup;h();if("auto"==b.slidesPerView){for(var e=d=0;e<a.snapGrid.length;e++){if(-c===a.snapGrid[e])return;if(-c>=a.snapGrid[e]&&-c<a.snapGrid[e+1]){d=0<a.positions.diff?-a.snapGrid[e+1]:-a.snapGrid[e];break}}-c>=a.snapGrid[a.snapGrid.length-1]&&(d=-a.snapGrid[a.snapGrid.length-1]);c<=-h()&&(d=-h())}else d=0>c?Math.round(c/d)*d:0;b.scrollContainer&&(d=0>c?c:0);d<-h()&&
(d=-h());b.scrollContainer&&l>p&&(d=0);if(d==c)return!1;I(d,"reset");return!0};a.swipeTo=function(c,d,e){c=parseInt(c,10);a.callPlugins("onSwipeTo",{index:c,speed:d});b.loop&&(c+=a.loopedSlides);var f=k?a.getWrapperTranslate("x"):a.getWrapperTranslate("y");if(!(c>a.slides.length-1||0>c)){var g;g="auto"==b.slidesPerView?-a.slidesGrid[c]:-c*p;g<-h()&&(g=-h());if(g==f)return!1;I(g,"to",{index:c,speed:d,runCallbacks:!1===e?!1:!0});return!0}};a._queueStartCallbacks=!1;a._queueEndCallbacks=!1;a.updateActiveSlide=
function(c){if(a.initialized&&0!=a.slides.length){a.previousIndex=a.activeIndex;0<c&&(c=0);"undefined"==typeof c&&(c=k?a.getWrapperTranslate("x"):a.getWrapperTranslate("y"));if("auto"==b.slidesPerView){if(a.activeIndex=a.slidesGrid.indexOf(-c),0>a.activeIndex){for(var d=0;d<a.slidesGrid.length-1&&!(-c>a.slidesGrid[d]&&-c<a.slidesGrid[d+1]);d++);var e=Math.abs(a.slidesGrid[d]+c),f=Math.abs(a.slidesGrid[d+1]+c);a.activeIndex=e<=f?d:d+1}}else a.activeIndex=b.visibilityFullFit?Math.ceil(-c/p):Math.round(-c/
p);a.activeIndex==a.slides.length&&(a.activeIndex=a.slides.length-1);0>a.activeIndex&&(a.activeIndex=0);if(a.slides[a.activeIndex]){a.calcVisibleSlides(c);e=RegExp("\\s*"+b.slideActiveClass);f=RegExp("\\s*"+b.slideVisibleClass);for(d=0;d<a.slides.length;d++)a.slides[d].className=a.slides[d].className.replace(e,"").replace(f,""),0<=a.visibleSlides.indexOf(a.slides[d])&&(a.slides[d].className+=" "+b.slideVisibleClass);a.slides[a.activeIndex].className+=" "+b.slideActiveClass;b.loop?(d=a.loopedSlides,
a.activeLoopIndex=a.activeIndex-d,a.activeLoopIndex>=a.slides.length-2*d&&(a.activeLoopIndex=a.slides.length-2*d-a.activeLoopIndex),0>a.activeLoopIndex&&(a.activeLoopIndex=a.slides.length-2*d+a.activeLoopIndex)):a.activeLoopIndex=a.activeIndex;b.pagination&&a.updatePagination(c)}}};a.createPagination=function(c){b.paginationClickable&&a.paginationButtons&&U();var d="",e=a.slides.length;b.loop&&(e-=2*a.loopedSlides);for(var f=0;f<e;f++)d+="<"+b.paginationElement+' class="'+b.paginationElementClass+
'"></'+b.paginationElement+">";a.paginationContainer=b.pagination.nodeType?b.pagination:g(b.pagination)[0];a.paginationContainer.innerHTML=d;a.paginationButtons=[];document.querySelectorAll?a.paginationButtons=a.paginationContainer.querySelectorAll("."+b.paginationElementClass):window.jQuery&&(a.paginationButtons=g(a.paginationContainer).find("."+b.paginationElementClass));c||a.updatePagination();a.callPlugins("onCreatePagination");if(b.paginationClickable)for(c=a.paginationButtons,d=0;d<c.length;d++)a.h.addEventListener(c[d],
"click",V,!1)};a.updatePagination=function(c){if(b.pagination&&!(1>a.slides.length)){if(document.querySelectorAll)var d=a.paginationContainer.querySelectorAll("."+b.paginationActiveClass);else window.jQuery&&(d=g(a.paginationContainer).find("."+b.paginationActiveClass));if(d&&(d=a.paginationButtons,0!=d.length)){for(var e=0;e<d.length;e++)d[e].className=b.paginationElementClass;var f=b.loop?a.loopedSlides:0;if(b.paginationAsRange){a.visibleSlides||a.calcVisibleSlides(c);c=[];for(e=0;e<a.visibleSlides.length;e++){var h=
a.slides.indexOf(a.visibleSlides[e])-f;b.loop&&0>h&&(h=a.slides.length-2*a.loopedSlides+h);b.loop&&h>=a.slides.length-2*a.loopedSlides&&(h=a.slides.length-2*a.loopedSlides-h,h=Math.abs(h));c.push(h)}for(e=0;e<c.length;e++)d[c[e]]&&(d[c[e]].className+=" "+b.paginationVisibleClass);b.loop?d[a.activeLoopIndex].className+=" "+b.paginationActiveClass:d[a.activeIndex].className+=" "+b.paginationActiveClass}else b.loop?d[a.activeLoopIndex].className+=" "+b.paginationActiveClass+" "+b.paginationVisibleClass:
d[a.activeIndex].className+=" "+b.paginationActiveClass+" "+b.paginationVisibleClass}}};a.calcVisibleSlides=function(c){var d=[],e=0,f=0,g=0;k&&0<a.wrapperLeft&&(c+=a.wrapperLeft);!k&&0<a.wrapperTop&&(c+=a.wrapperTop);for(var h=0;h<a.slides.length;h++){var e=e+f,f="auto"==b.slidesPerView?k?a.h.getWidth(a.slides[h],!0):a.h.getHeight(a.slides[h],!0):p,g=e+f,m=!1;b.visibilityFullFit?(e>=-c&&g<=-c+l&&(m=!0),e<=-c&&g>=-c+l&&(m=!0)):(g>-c&&g<=-c+l&&(m=!0),e>=-c&&e<-c+l&&(m=!0),e<-c&&g>-c+l&&(m=!0));m&&
d.push(a.slides[h])}0==d.length&&(d=[a.slides[a.activeIndex]]);a.visibleSlides=d};a.autoPlayIntervalId=void 0;a.startAutoplay=function(){if("undefined"!==typeof a.autoPlayIntervalId)return!1;b.autoplay&&!b.loop&&(a.autoPlayIntervalId=setInterval(function(){a.swipeNext(!0)||a.swipeTo(0)},b.autoplay));b.autoplay&&b.loop&&(a.autoPlayIntervalId=setInterval(function(){a.swipeNext()},b.autoplay));a.callPlugins("onAutoplayStart")};a.stopAutoplay=function(){a.autoPlayIntervalId&&clearInterval(a.autoPlayIntervalId);
a.autoPlayIntervalId=void 0;a.callPlugins("onAutoplayStop")};a.loopCreated=!1;a.removeLoopedSlides=function(){if(a.loopCreated)for(var b=0;b<a.slides.length;b++)!0===a.slides[b].getData("looped")&&a.wrapper.removeChild(a.slides[b])};a.createLoop=function(){if(0!=a.slides.length){a.loopedSlides=b.slidesPerView+b.loopAdditionalSlides;for(var c="",d="",e=0;e<a.loopedSlides;e++)c+=a.slides[e].outerHTML;for(e=a.slides.length-a.loopedSlides;e<a.slides.length;e++)d+=a.slides[e].outerHTML;J.innerHTML=d+J.innerHTML+
c;a.loopCreated=!0;a.calcSlides();for(e=0;e<a.slides.length;e++)(e<a.loopedSlides||e>=a.slides.length-a.loopedSlides)&&a.slides[e].setData("looped",!0);a.callPlugins("onCreateLoop")}};a.fixLoop=function(){if(a.activeIndex<a.loopedSlides){var c=a.slides.length-3*a.loopedSlides+a.activeIndex;a.swipeTo(c,0,!1)}else a.activeIndex>a.slides.length-2*b.slidesPerView&&(c=-a.slides.length+a.activeIndex+a.loopedSlides,a.swipeTo(c,0,!1))};a.loadSlides=function(){var c="";a.activeLoaderIndex=0;for(var d=b.loader.slides,
e=b.loader.loadAllSlides?d.length:b.slidesPerView*(1+b.loader.surroundGroups),f=0;f<e;f++)c="outer"==b.loader.slidesHTMLType?c+d[f]:c+("<"+b.slideElement+' class="'+b.slideClass+'" data-swiperindex="'+f+'">'+d[f]+"</"+b.slideElement+">");a.wrapper.innerHTML=c;a.calcSlides(!0);b.loader.loadAllSlides||a.wrapperTransitionEnd(a.reloadSlides,!0)};a.reloadSlides=function(){var c=b.loader.slides,d=parseInt(a.activeSlide().data("swiperindex"),10);if(!(0>d||d>c.length-1)){a.activeLoaderIndex=d;var e=Math.max(0,
d-b.slidesPerView*b.loader.surroundGroups),f=Math.min(d+b.slidesPerView*(1+b.loader.surroundGroups)-1,c.length-1);0<d&&(d=-p*(d-e),k?a.setWrapperTranslate(d,0,0):a.setWrapperTranslate(0,d,0),a.setWrapperTransition(0));if("reload"===b.loader.logic){for(var g=a.wrapper.innerHTML="",d=e;d<=f;d++)g+="outer"==b.loader.slidesHTMLType?c[d]:"<"+b.slideElement+' class="'+b.slideClass+'" data-swiperindex="'+d+'">'+c[d]+"</"+b.slideElement+">";a.wrapper.innerHTML=g}else{for(var g=1E3,h=0,d=0;d<a.slides.length;d++){var l=
a.slides[d].data("swiperindex");l<e||l>f?a.wrapper.removeChild(a.slides[d]):(g=Math.min(l,g),h=Math.max(l,h))}for(d=e;d<=f;d++)d<g&&(e=document.createElement(b.slideElement),e.className=b.slideClass,e.setAttribute("data-swiperindex",d),e.innerHTML=c[d],a.wrapper.insertBefore(e,a.wrapper.firstChild)),d>h&&(e=document.createElement(b.slideElement),e.className=b.slideClass,e.setAttribute("data-swiperindex",d),e.innerHTML=c[d],a.wrapper.appendChild(e))}a.reInit(!0)}};a.calcSlides();0<b.loader.slides.length&&
0==a.slides.length&&a.loadSlides();b.loop&&a.createLoop();a.init();n();b.pagination&&b.createPagination&&a.createPagination(!0);b.loop||0<b.initialSlide?a.swipeTo(b.initialSlide,0,!1):a.updateActiveSlide(0);b.autoplay&&a.startAutoplay()}};
Swiper.prototype={plugins:{},wrapperTransitionEnd:function(f,b){function g(){f(h);h.params.queueEndCallbacks&&(h._queueEndCallbacks=!1);if(!b)for(var v=0;v<t.length;v++)h.h.removeEventListener(n,t[v],g,!1)}var h=this,n=h.wrapper,t=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"];if(f)for(var v=0;v<t.length;v++)h.h.addEventListener(n,t[v],g,!1)},getWrapperTranslate:function(f){var b=this.wrapper,g,h,n=window.WebKitCSSMatrix?new WebKitCSSMatrix(window.getComputedStyle(b,
null).webkitTransform):window.getComputedStyle(b,null).MozTransform||window.getComputedStyle(b,null).OTransform||window.getComputedStyle(b,null).MsTransform||window.getComputedStyle(b,null).msTransform||window.getComputedStyle(b,null).transform||window.getComputedStyle(b,null).getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,");g=n.toString().split(",");this.params.useCSS3Transforms?("x"==f&&(h=16==g.length?parseFloat(g[12]):window.WebKitCSSMatrix?n.m41:parseFloat(g[4])),"y"==
f&&(h=16==g.length?parseFloat(g[13]):window.WebKitCSSMatrix?n.m42:parseFloat(g[5]))):("x"==f&&(h=parseFloat(b.style.left,10)||0),"y"==f&&(h=parseFloat(b.style.top,10)||0));return h||0},setWrapperTranslate:function(f,b,g){var h=this.wrapper.style;f=f||0;b=b||0;g=g||0;this.params.useCSS3Transforms?this.support.transforms3d?h.webkitTransform=h.MsTransform=h.msTransform=h.MozTransform=h.OTransform=h.transform="translate3d("+f+"px, "+b+"px, "+g+"px)":(h.webkitTransform=h.MsTransform=h.msTransform=h.MozTransform=
h.OTransform=h.transform="translate("+f+"px, "+b+"px)",this.support.transforms||(h.left=f+"px",h.top=b+"px")):(h.left=f+"px",h.top=b+"px");this.callPlugins("onSetWrapperTransform",{x:f,y:b,z:g})},setWrapperTransition:function(f){var b=this.wrapper.style;b.webkitTransitionDuration=b.MsTransitionDuration=b.msTransitionDuration=b.MozTransitionDuration=b.OTransitionDuration=b.transitionDuration=f/1E3+"s";this.callPlugins("onSetWrapperTransition",{duration:f})},h:{getWidth:function(f,b){var g=window.getComputedStyle(f,
null).getPropertyValue("width"),h=parseFloat(g);if(isNaN(h)||0<g.indexOf("%"))h=f.offsetWidth-parseFloat(window.getComputedStyle(f,null).getPropertyValue("padding-left"))-parseFloat(window.getComputedStyle(f,null).getPropertyValue("padding-right"));b&&(h+=parseFloat(window.getComputedStyle(f,null).getPropertyValue("padding-left"))+parseFloat(window.getComputedStyle(f,null).getPropertyValue("padding-right")));return h},getHeight:function(f,b){if(b)return f.offsetHeight;var g=window.getComputedStyle(f,
null).getPropertyValue("height"),h=parseFloat(g);if(isNaN(h)||0<g.indexOf("%"))h=f.offsetHeight-parseFloat(window.getComputedStyle(f,null).getPropertyValue("padding-top"))-parseFloat(window.getComputedStyle(f,null).getPropertyValue("padding-bottom"));b&&(h+=parseFloat(window.getComputedStyle(f,null).getPropertyValue("padding-top"))+parseFloat(window.getComputedStyle(f,null).getPropertyValue("padding-bottom")));return h},getOffset:function(f){var b=f.getBoundingClientRect(),g=document.body,h=f.clientTop||
g.clientTop||0,g=f.clientLeft||g.clientLeft||0,n=window.pageYOffset||f.scrollTop;f=window.pageXOffset||f.scrollLeft;document.documentElement&&!window.pageYOffset&&(n=document.documentElement.scrollTop,f=document.documentElement.scrollLeft);return{top:b.top+n-h,left:b.left+f-g}},windowWidth:function(){if(window.innerWidth)return window.innerWidth;if(document.documentElement&&document.documentElement.clientWidth)return document.documentElement.clientWidth},windowHeight:function(){if(window.innerHeight)return window.innerHeight;
if(document.documentElement&&document.documentElement.clientHeight)return document.documentElement.clientHeight},windowScroll:function(){if("undefined"!=typeof pageYOffset)return{left:window.pageXOffset,top:window.pageYOffset};if(document.documentElement)return{left:document.documentElement.scrollLeft,top:document.documentElement.scrollTop}},addEventListener:function(f,b,g,h){f.addEventListener?f.addEventListener(b,g,h):f.attachEvent&&f.attachEvent("on"+b,g)},removeEventListener:function(f,b,g,h){f.removeEventListener?
f.removeEventListener(b,g,h):f.detachEvent&&f.detachEvent("on"+b,g)}},setTransform:function(f,b){var g=f.style;g.webkitTransform=g.MsTransform=g.msTransform=g.MozTransform=g.OTransform=g.transform=b},setTranslate:function(f,b){var g=f.style,h=b.x||0,n=b.y||0,t=b.z||0;g.webkitTransform=g.MsTransform=g.msTransform=g.MozTransform=g.OTransform=g.transform=this.support.transforms3d?"translate3d("+h+"px,"+n+"px,"+t+"px)":"translate("+h+"px,"+n+"px)";this.support.transforms||(g.left=h+"px",g.top=n+"px")},
setTransition:function(f,b){var g=f.style;g.webkitTransitionDuration=g.MsTransitionDuration=g.msTransitionDuration=g.MozTransitionDuration=g.OTransitionDuration=g.transitionDuration=b+"ms"},support:{touch:window.Modernizr&&!0===Modernizr.touch||function(){return!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)}(),transforms3d:window.Modernizr&&!0===Modernizr.csstransforms3d||function(){var f=document.createElement("div");return"webkitPerspective"in f.style||"MozPerspective"in
f.style||"OPerspective"in f.style||"MsPerspective"in f.style||"perspective"in f.style}(),transforms:window.Modernizr&&!0===Modernizr.csstransforms||function(){var f=document.createElement("div").style;return"transform"in f||"WebkitTransform"in f||"MozTransform"in f||"msTransform"in f||"MsTransform"in f||"OTransform"in f}(),transitions:window.Modernizr&&!0===Modernizr.csstransitions||function(){var f=document.createElement("div").style;return"transition"in f||"WebkitTransition"in f||"MozTransition"in
f||"msTransition"in f||"MsTransition"in f||"OTransition"in f}()},browser:{ie8:function(){var f=-1;"Microsoft Internet Explorer"==navigator.appName&&null!=/MSIE ([0-9]{1,}[.0-9]{0,})/.exec(navigator.userAgent)&&(f=parseFloat(RegExp.$1));return-1!=f&&9>f}(),ie10:window.navigator.msPointerEnabled}};(window.jQuery||window.Zepto)&&function(f){f.fn.swiper=function(b){b=new Swiper(f(this)[0],b);f(this).data("swiper",b);return b}}(window.jQuery||window.Zepto);
"undefined"!==typeof module&&(module.exports=Swiper);


if ( window.jQuery || window.Zepto ) {
  (function($) {
    $.fn.Swiper = function(params) {
      return this.each(function() {
        $(this).data('Swiper', new Swiper($(this)[0], params));
      });
    }
  })( window.jQuery || window.Zepto )
}

; browserify_shim__define__module__export__(typeof swiper != "undefined" ? swiper : window.swiper);

}).call(global, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],"swiper":[function(require,module,exports){
module.exports=require('+EoJh8');
},{}]},{},["LentoW","rCVOCK","OqBiMu","b9oWHN","lrhmoF","Ogpeh+","nBeCPh","sh/PiQ","76CSqE","xJ/34R","GmLQzC","n5JPJf","Q7OFda","IT+PYH","CVSQ7j","EucHRb","p9KMg0","sw7mcy","lqVaFV","sAspA0","RuXAvX","Cct4Ou","xxG+1D","cWO2Aw","Cu+0Ho","ocCzwm","qnrstJ","Lkugus","1ZHO47","GoV6d6","e/8fLa","gcAV3O","3tHZeC","86KJBY","bbl2t2","rFRVhs","5syn3K","6kWBjj","Zl+PJS","QNAum6","9GHdMD","en/BbC","to5G6a","m04hvl","UHE96j","5FbKVL","2M0Ez6","dLSvQ1","1FSS45","0CtdAT","NowQlh","QdN7bT","Zd0Zi3","b4bJNE","P+LSW/","oOQY32","rQi5xY","W8ZCb6","C+oG3G"])
//# sourceMappingURL=data:application/json;base64,
